// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: jon_shared_data_rotary.proto
// Protobuf C++ Version: 5.29.2

#include "jon_shared_data_rotary.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace ser {

inline constexpr ScanNode::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : index_{0},
        dayzoomtablevalue_{0},
        azimuth_{0},
        elevation_{0},
        linger_{0},
        speed_{0},
        heatzoomtablevalue_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ScanNode::ScanNode(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ScanNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScanNodeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScanNodeDefaultTypeInternal() {}
  union {
    ScanNode _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScanNodeDefaultTypeInternal _ScanNode_default_instance_;

inline constexpr JonGuiDataRotary::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        current_scan_node_{nullptr},
        azimuth_{0},
        azimuth_speed_{0},
        elevation_{0},
        elevation_speed_{0},
        platform_azimuth_{0},
        platform_elevation_{0},
        platform_bank_{0},
        mode_{static_cast< ::ser::JonGuiDataRotaryMode >(0)},
        is_moving_{false},
        is_scanning_{false},
        is_scanning_paused_{false},
        use_rotary_as_compass_{false},
        scan_target_{0},
        scan_target_max_{0},
        sun_azimuth_{0},
        sun_elevation_{0} {}

template <typename>
PROTOBUF_CONSTEXPR JonGuiDataRotary::JonGuiDataRotary(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct JonGuiDataRotaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JonGuiDataRotaryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~JonGuiDataRotaryDefaultTypeInternal() {}
  union {
    JonGuiDataRotary _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JonGuiDataRotaryDefaultTypeInternal _JonGuiDataRotary_default_instance_;
}  // namespace ser
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_jon_5fshared_5fdata_5frotary_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_jon_5fshared_5fdata_5frotary_2eproto = nullptr;
const ::uint32_t
    TableStruct_jon_5fshared_5fdata_5frotary_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataRotary, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataRotary, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataRotary, _impl_.azimuth_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataRotary, _impl_.azimuth_speed_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataRotary, _impl_.elevation_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataRotary, _impl_.elevation_speed_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataRotary, _impl_.platform_azimuth_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataRotary, _impl_.platform_elevation_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataRotary, _impl_.platform_bank_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataRotary, _impl_.is_moving_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataRotary, _impl_.mode_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataRotary, _impl_.is_scanning_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataRotary, _impl_.is_scanning_paused_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataRotary, _impl_.use_rotary_as_compass_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataRotary, _impl_.scan_target_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataRotary, _impl_.scan_target_max_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataRotary, _impl_.sun_azimuth_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataRotary, _impl_.sun_elevation_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataRotary, _impl_.current_scan_node_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ser::ScanNode, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::ser::ScanNode, _impl_.index_),
        PROTOBUF_FIELD_OFFSET(::ser::ScanNode, _impl_.dayzoomtablevalue_),
        PROTOBUF_FIELD_OFFSET(::ser::ScanNode, _impl_.heatzoomtablevalue_),
        PROTOBUF_FIELD_OFFSET(::ser::ScanNode, _impl_.azimuth_),
        PROTOBUF_FIELD_OFFSET(::ser::ScanNode, _impl_.elevation_),
        PROTOBUF_FIELD_OFFSET(::ser::ScanNode, _impl_.linger_),
        PROTOBUF_FIELD_OFFSET(::ser::ScanNode, _impl_.speed_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 25, -1, sizeof(::ser::JonGuiDataRotary)},
        {42, -1, -1, sizeof(::ser::ScanNode)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::ser::_JonGuiDataRotary_default_instance_._instance,
    &::ser::_ScanNode_default_instance_._instance,
};
const char descriptor_table_protodef_jon_5fshared_5fdata_5frotary_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\034jon_shared_data_rotary.proto\022\003ser\032\033jon"
    "_shared_data_types.proto\"\303\003\n\020JonGuiDataR"
    "otary\022\017\n\007azimuth\030\001 \001(\001\022\025\n\razimuth_speed\030"
    "\002 \001(\001\022\021\n\televation\030\003 \001(\001\022\027\n\017elevation_sp"
    "eed\030\004 \001(\001\022\030\n\020platform_azimuth\030\005 \001(\001\022\032\n\022p"
    "latform_elevation\030\006 \001(\001\022\025\n\rplatform_bank"
    "\030\007 \001(\001\022\021\n\tis_moving\030\010 \001(\010\022\'\n\004mode\030\t \001(\0162"
    "\031.ser.JonGuiDataRotaryMode\022\023\n\013is_scannin"
    "g\030\n \001(\010\022\032\n\022is_scanning_paused\030\013 \001(\010\022\035\n\025u"
    "se_rotary_as_compass\030\014 \001(\010\022\023\n\013scan_targe"
    "t\030\r \001(\005\022\027\n\017scan_target_max\030\016 \001(\005\022\023\n\013sun_"
    "azimuth\030\017 \001(\001\022\025\n\rsun_elevation\030\020 \001(\001\022(\n\021"
    "current_scan_node\030\021 \001(\0132\r.ser.ScanNode\"\223"
    "\001\n\010ScanNode\022\r\n\005index\030\001 \001(\005\022\031\n\021DayZoomTab"
    "leValue\030\002 \001(\005\022\032\n\022HeatZoomTableValue\030\003 \001("
    "\005\022\017\n\007azimuth\030\004 \001(\001\022\021\n\televation\030\005 \001(\001\022\016\n"
    "\006linger\030\006 \001(\001\022\r\n\005speed\030\007 \001(\001BNZLgit-code"
    "commit.eu-central-1.amazonaws.com/v1/rep"
    "os/jettison/jonp/data/rotaryb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_jon_5fshared_5fdata_5frotary_2eproto_deps[1] =
    {
        &::descriptor_table_jon_5fshared_5fdata_5ftypes_2eproto,
};
static ::absl::once_flag descriptor_table_jon_5fshared_5fdata_5frotary_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_jon_5fshared_5fdata_5frotary_2eproto = {
    false,
    false,
    756,
    descriptor_table_protodef_jon_5fshared_5fdata_5frotary_2eproto,
    "jon_shared_data_rotary.proto",
    &descriptor_table_jon_5fshared_5fdata_5frotary_2eproto_once,
    descriptor_table_jon_5fshared_5fdata_5frotary_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_jon_5fshared_5fdata_5frotary_2eproto::offsets,
    file_level_enum_descriptors_jon_5fshared_5fdata_5frotary_2eproto,
    file_level_service_descriptors_jon_5fshared_5fdata_5frotary_2eproto,
};
namespace ser {
// ===================================================================

class JonGuiDataRotary::_Internal {
 public:
  using HasBits =
      decltype(std::declval<JonGuiDataRotary>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_._has_bits_);
};

JonGuiDataRotary::JonGuiDataRotary(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ser.JonGuiDataRotary)
}
inline PROTOBUF_NDEBUG_INLINE JonGuiDataRotary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::ser::JonGuiDataRotary& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

JonGuiDataRotary::JonGuiDataRotary(
    ::google::protobuf::Arena* arena,
    const JonGuiDataRotary& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  JonGuiDataRotary* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.current_scan_node_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::ser::ScanNode>(
                              arena, *from._impl_.current_scan_node_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, azimuth_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, azimuth_),
           offsetof(Impl_, sun_elevation_) -
               offsetof(Impl_, azimuth_) +
               sizeof(Impl_::sun_elevation_));

  // @@protoc_insertion_point(copy_constructor:ser.JonGuiDataRotary)
}
inline PROTOBUF_NDEBUG_INLINE JonGuiDataRotary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void JonGuiDataRotary::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, current_scan_node_),
           0,
           offsetof(Impl_, sun_elevation_) -
               offsetof(Impl_, current_scan_node_) +
               sizeof(Impl_::sun_elevation_));
}
JonGuiDataRotary::~JonGuiDataRotary() {
  // @@protoc_insertion_point(destructor:ser.JonGuiDataRotary)
  SharedDtor(*this);
}
inline void JonGuiDataRotary::SharedDtor(MessageLite& self) {
  JonGuiDataRotary& this_ = static_cast<JonGuiDataRotary&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.current_scan_node_;
  this_._impl_.~Impl_();
}

inline void* JonGuiDataRotary::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) JonGuiDataRotary(arena);
}
constexpr auto JonGuiDataRotary::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(JonGuiDataRotary),
                                            alignof(JonGuiDataRotary));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull JonGuiDataRotary::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_JonGuiDataRotary_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &JonGuiDataRotary::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<JonGuiDataRotary>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &JonGuiDataRotary::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<JonGuiDataRotary>(), &JonGuiDataRotary::ByteSizeLong,
            &JonGuiDataRotary::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_._cached_size_),
        false,
    },
    &JonGuiDataRotary::kDescriptorMethods,
    &descriptor_table_jon_5fshared_5fdata_5frotary_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* JonGuiDataRotary::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 17, 1, 0, 2> JonGuiDataRotary::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_._has_bits_),
    0, // no _extensions_
    17, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294836224,  // skipmap
    offsetof(decltype(_table_), field_entries),
    17,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ser::JonGuiDataRotary>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double azimuth = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.azimuth_)}},
    // double azimuth_speed = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.azimuth_speed_)}},
    // double elevation = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.elevation_)}},
    // double elevation_speed = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.elevation_speed_)}},
    // double platform_azimuth = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.platform_azimuth_)}},
    // double platform_elevation = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.platform_elevation_)}},
    // double platform_bank = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.platform_bank_)}},
    // bool is_moving = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(JonGuiDataRotary, _impl_.is_moving_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.is_moving_)}},
    // .ser.JonGuiDataRotaryMode mode = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataRotary, _impl_.mode_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.mode_)}},
    // bool is_scanning = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(JonGuiDataRotary, _impl_.is_scanning_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.is_scanning_)}},
    // bool is_scanning_paused = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(JonGuiDataRotary, _impl_.is_scanning_paused_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.is_scanning_paused_)}},
    // bool use_rotary_as_compass = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(JonGuiDataRotary, _impl_.use_rotary_as_compass_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.use_rotary_as_compass_)}},
    // int32 scan_target = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataRotary, _impl_.scan_target_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.scan_target_)}},
    // int32 scan_target_max = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataRotary, _impl_.scan_target_max_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.scan_target_max_)}},
    // double sun_azimuth = 15;
    {::_pbi::TcParser::FastF64S1,
     {121, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.sun_azimuth_)}},
    // double sun_elevation = 16;
    {::_pbi::TcParser::FastF64S2,
     {385, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.sun_elevation_)}},
    // .ser.ScanNode current_scan_node = 17;
    {::_pbi::TcParser::FastMtS2,
     {394, 0, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.current_scan_node_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // double azimuth = 1;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.azimuth_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double azimuth_speed = 2;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.azimuth_speed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double elevation = 3;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.elevation_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double elevation_speed = 4;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.elevation_speed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double platform_azimuth = 5;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.platform_azimuth_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double platform_elevation = 6;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.platform_elevation_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double platform_bank = 7;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.platform_bank_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // bool is_moving = 8;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.is_moving_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .ser.JonGuiDataRotaryMode mode = 9;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool is_scanning = 10;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.is_scanning_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_scanning_paused = 11;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.is_scanning_paused_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool use_rotary_as_compass = 12;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.use_rotary_as_compass_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 scan_target = 13;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.scan_target_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 scan_target_max = 14;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.scan_target_max_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // double sun_azimuth = 15;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.sun_azimuth_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double sun_elevation = 16;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.sun_elevation_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // .ser.ScanNode current_scan_node = 17;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.current_scan_node_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::ser::ScanNode>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void JonGuiDataRotary::Clear() {
// @@protoc_insertion_point(message_clear_start:ser.JonGuiDataRotary)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.current_scan_node_ != nullptr);
    _impl_.current_scan_node_->Clear();
  }
  ::memset(&_impl_.azimuth_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.sun_elevation_) -
      reinterpret_cast<char*>(&_impl_.azimuth_)) + sizeof(_impl_.sun_elevation_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* JonGuiDataRotary::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const JonGuiDataRotary& this_ = static_cast<const JonGuiDataRotary&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* JonGuiDataRotary::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const JonGuiDataRotary& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:ser.JonGuiDataRotary)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // double azimuth = 1;
          if (::absl::bit_cast<::uint64_t>(this_._internal_azimuth()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_azimuth(), target);
          }

          // double azimuth_speed = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_azimuth_speed()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_azimuth_speed(), target);
          }

          // double elevation = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_elevation()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_elevation(), target);
          }

          // double elevation_speed = 4;
          if (::absl::bit_cast<::uint64_t>(this_._internal_elevation_speed()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                4, this_._internal_elevation_speed(), target);
          }

          // double platform_azimuth = 5;
          if (::absl::bit_cast<::uint64_t>(this_._internal_platform_azimuth()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_platform_azimuth(), target);
          }

          // double platform_elevation = 6;
          if (::absl::bit_cast<::uint64_t>(this_._internal_platform_elevation()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                6, this_._internal_platform_elevation(), target);
          }

          // double platform_bank = 7;
          if (::absl::bit_cast<::uint64_t>(this_._internal_platform_bank()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                7, this_._internal_platform_bank(), target);
          }

          // bool is_moving = 8;
          if (this_._internal_is_moving() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                8, this_._internal_is_moving(), target);
          }

          // .ser.JonGuiDataRotaryMode mode = 9;
          if (this_._internal_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                9, this_._internal_mode(), target);
          }

          // bool is_scanning = 10;
          if (this_._internal_is_scanning() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                10, this_._internal_is_scanning(), target);
          }

          // bool is_scanning_paused = 11;
          if (this_._internal_is_scanning_paused() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                11, this_._internal_is_scanning_paused(), target);
          }

          // bool use_rotary_as_compass = 12;
          if (this_._internal_use_rotary_as_compass() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                12, this_._internal_use_rotary_as_compass(), target);
          }

          // int32 scan_target = 13;
          if (this_._internal_scan_target() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<13>(
                    stream, this_._internal_scan_target(), target);
          }

          // int32 scan_target_max = 14;
          if (this_._internal_scan_target_max() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<14>(
                    stream, this_._internal_scan_target_max(), target);
          }

          // double sun_azimuth = 15;
          if (::absl::bit_cast<::uint64_t>(this_._internal_sun_azimuth()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                15, this_._internal_sun_azimuth(), target);
          }

          // double sun_elevation = 16;
          if (::absl::bit_cast<::uint64_t>(this_._internal_sun_elevation()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                16, this_._internal_sun_elevation(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .ser.ScanNode current_scan_node = 17;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                17, *this_._impl_.current_scan_node_, this_._impl_.current_scan_node_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:ser.JonGuiDataRotary)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t JonGuiDataRotary::ByteSizeLong(const MessageLite& base) {
          const JonGuiDataRotary& this_ = static_cast<const JonGuiDataRotary&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t JonGuiDataRotary::ByteSizeLong() const {
          const JonGuiDataRotary& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:ser.JonGuiDataRotary)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .ser.ScanNode current_scan_node = 17;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.current_scan_node_);
            }
          }
           {
            // double azimuth = 1;
            if (::absl::bit_cast<::uint64_t>(this_._internal_azimuth()) != 0) {
              total_size += 9;
            }
            // double azimuth_speed = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_azimuth_speed()) != 0) {
              total_size += 9;
            }
            // double elevation = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_elevation()) != 0) {
              total_size += 9;
            }
            // double elevation_speed = 4;
            if (::absl::bit_cast<::uint64_t>(this_._internal_elevation_speed()) != 0) {
              total_size += 9;
            }
            // double platform_azimuth = 5;
            if (::absl::bit_cast<::uint64_t>(this_._internal_platform_azimuth()) != 0) {
              total_size += 9;
            }
            // double platform_elevation = 6;
            if (::absl::bit_cast<::uint64_t>(this_._internal_platform_elevation()) != 0) {
              total_size += 9;
            }
            // double platform_bank = 7;
            if (::absl::bit_cast<::uint64_t>(this_._internal_platform_bank()) != 0) {
              total_size += 9;
            }
            // .ser.JonGuiDataRotaryMode mode = 9;
            if (this_._internal_mode() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_mode());
            }
            // bool is_moving = 8;
            if (this_._internal_is_moving() != 0) {
              total_size += 2;
            }
            // bool is_scanning = 10;
            if (this_._internal_is_scanning() != 0) {
              total_size += 2;
            }
            // bool is_scanning_paused = 11;
            if (this_._internal_is_scanning_paused() != 0) {
              total_size += 2;
            }
            // bool use_rotary_as_compass = 12;
            if (this_._internal_use_rotary_as_compass() != 0) {
              total_size += 2;
            }
            // int32 scan_target = 13;
            if (this_._internal_scan_target() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_scan_target());
            }
            // int32 scan_target_max = 14;
            if (this_._internal_scan_target_max() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_scan_target_max());
            }
            // double sun_azimuth = 15;
            if (::absl::bit_cast<::uint64_t>(this_._internal_sun_azimuth()) != 0) {
              total_size += 9;
            }
            // double sun_elevation = 16;
            if (::absl::bit_cast<::uint64_t>(this_._internal_sun_elevation()) != 0) {
              total_size += 10;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void JonGuiDataRotary::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<JonGuiDataRotary*>(&to_msg);
  auto& from = static_cast<const JonGuiDataRotary&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:ser.JonGuiDataRotary)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.current_scan_node_ != nullptr);
    if (_this->_impl_.current_scan_node_ == nullptr) {
      _this->_impl_.current_scan_node_ =
          ::google::protobuf::Message::CopyConstruct<::ser::ScanNode>(arena, *from._impl_.current_scan_node_);
    } else {
      _this->_impl_.current_scan_node_->MergeFrom(*from._impl_.current_scan_node_);
    }
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_azimuth()) != 0) {
    _this->_impl_.azimuth_ = from._impl_.azimuth_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_azimuth_speed()) != 0) {
    _this->_impl_.azimuth_speed_ = from._impl_.azimuth_speed_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_elevation()) != 0) {
    _this->_impl_.elevation_ = from._impl_.elevation_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_elevation_speed()) != 0) {
    _this->_impl_.elevation_speed_ = from._impl_.elevation_speed_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_platform_azimuth()) != 0) {
    _this->_impl_.platform_azimuth_ = from._impl_.platform_azimuth_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_platform_elevation()) != 0) {
    _this->_impl_.platform_elevation_ = from._impl_.platform_elevation_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_platform_bank()) != 0) {
    _this->_impl_.platform_bank_ = from._impl_.platform_bank_;
  }
  if (from._internal_mode() != 0) {
    _this->_impl_.mode_ = from._impl_.mode_;
  }
  if (from._internal_is_moving() != 0) {
    _this->_impl_.is_moving_ = from._impl_.is_moving_;
  }
  if (from._internal_is_scanning() != 0) {
    _this->_impl_.is_scanning_ = from._impl_.is_scanning_;
  }
  if (from._internal_is_scanning_paused() != 0) {
    _this->_impl_.is_scanning_paused_ = from._impl_.is_scanning_paused_;
  }
  if (from._internal_use_rotary_as_compass() != 0) {
    _this->_impl_.use_rotary_as_compass_ = from._impl_.use_rotary_as_compass_;
  }
  if (from._internal_scan_target() != 0) {
    _this->_impl_.scan_target_ = from._impl_.scan_target_;
  }
  if (from._internal_scan_target_max() != 0) {
    _this->_impl_.scan_target_max_ = from._impl_.scan_target_max_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_sun_azimuth()) != 0) {
    _this->_impl_.sun_azimuth_ = from._impl_.sun_azimuth_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_sun_elevation()) != 0) {
    _this->_impl_.sun_elevation_ = from._impl_.sun_elevation_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void JonGuiDataRotary::CopyFrom(const JonGuiDataRotary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ser.JonGuiDataRotary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void JonGuiDataRotary::InternalSwap(JonGuiDataRotary* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.sun_elevation_)
      + sizeof(JonGuiDataRotary::_impl_.sun_elevation_)
      - PROTOBUF_FIELD_OFFSET(JonGuiDataRotary, _impl_.current_scan_node_)>(
          reinterpret_cast<char*>(&_impl_.current_scan_node_),
          reinterpret_cast<char*>(&other->_impl_.current_scan_node_));
}

::google::protobuf::Metadata JonGuiDataRotary::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ScanNode::_Internal {
 public:
};

ScanNode::ScanNode(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ser.ScanNode)
}
ScanNode::ScanNode(
    ::google::protobuf::Arena* arena, const ScanNode& from)
    : ScanNode(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE ScanNode::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ScanNode::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, index_),
           0,
           offsetof(Impl_, heatzoomtablevalue_) -
               offsetof(Impl_, index_) +
               sizeof(Impl_::heatzoomtablevalue_));
}
ScanNode::~ScanNode() {
  // @@protoc_insertion_point(destructor:ser.ScanNode)
  SharedDtor(*this);
}
inline void ScanNode::SharedDtor(MessageLite& self) {
  ScanNode& this_ = static_cast<ScanNode&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* ScanNode::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ScanNode(arena);
}
constexpr auto ScanNode::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ScanNode),
                                            alignof(ScanNode));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ScanNode::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ScanNode_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ScanNode::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ScanNode>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ScanNode::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ScanNode>(), &ScanNode::ByteSizeLong,
            &ScanNode::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ScanNode, _impl_._cached_size_),
        false,
    },
    &ScanNode::kDescriptorMethods,
    &descriptor_table_jon_5fshared_5fdata_5frotary_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ScanNode::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2> ScanNode::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ser::ScanNode>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 index = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ScanNode, _impl_.index_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ScanNode, _impl_.index_)}},
    // int32 DayZoomTableValue = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ScanNode, _impl_.dayzoomtablevalue_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ScanNode, _impl_.dayzoomtablevalue_)}},
    // int32 HeatZoomTableValue = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ScanNode, _impl_.heatzoomtablevalue_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ScanNode, _impl_.heatzoomtablevalue_)}},
    // double azimuth = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(ScanNode, _impl_.azimuth_)}},
    // double elevation = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(ScanNode, _impl_.elevation_)}},
    // double linger = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 63, 0, PROTOBUF_FIELD_OFFSET(ScanNode, _impl_.linger_)}},
    // double speed = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 63, 0, PROTOBUF_FIELD_OFFSET(ScanNode, _impl_.speed_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 index = 1;
    {PROTOBUF_FIELD_OFFSET(ScanNode, _impl_.index_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 DayZoomTableValue = 2;
    {PROTOBUF_FIELD_OFFSET(ScanNode, _impl_.dayzoomtablevalue_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 HeatZoomTableValue = 3;
    {PROTOBUF_FIELD_OFFSET(ScanNode, _impl_.heatzoomtablevalue_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // double azimuth = 4;
    {PROTOBUF_FIELD_OFFSET(ScanNode, _impl_.azimuth_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double elevation = 5;
    {PROTOBUF_FIELD_OFFSET(ScanNode, _impl_.elevation_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double linger = 6;
    {PROTOBUF_FIELD_OFFSET(ScanNode, _impl_.linger_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double speed = 7;
    {PROTOBUF_FIELD_OFFSET(ScanNode, _impl_.speed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void ScanNode::Clear() {
// @@protoc_insertion_point(message_clear_start:ser.ScanNode)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.heatzoomtablevalue_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.heatzoomtablevalue_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ScanNode::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ScanNode& this_ = static_cast<const ScanNode&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ScanNode::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ScanNode& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:ser.ScanNode)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 index = 1;
          if (this_._internal_index() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_index(), target);
          }

          // int32 DayZoomTableValue = 2;
          if (this_._internal_dayzoomtablevalue() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_dayzoomtablevalue(), target);
          }

          // int32 HeatZoomTableValue = 3;
          if (this_._internal_heatzoomtablevalue() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_heatzoomtablevalue(), target);
          }

          // double azimuth = 4;
          if (::absl::bit_cast<::uint64_t>(this_._internal_azimuth()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                4, this_._internal_azimuth(), target);
          }

          // double elevation = 5;
          if (::absl::bit_cast<::uint64_t>(this_._internal_elevation()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_elevation(), target);
          }

          // double linger = 6;
          if (::absl::bit_cast<::uint64_t>(this_._internal_linger()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                6, this_._internal_linger(), target);
          }

          // double speed = 7;
          if (::absl::bit_cast<::uint64_t>(this_._internal_speed()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                7, this_._internal_speed(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:ser.ScanNode)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ScanNode::ByteSizeLong(const MessageLite& base) {
          const ScanNode& this_ = static_cast<const ScanNode&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ScanNode::ByteSizeLong() const {
          const ScanNode& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:ser.ScanNode)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // int32 index = 1;
            if (this_._internal_index() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_index());
            }
            // int32 DayZoomTableValue = 2;
            if (this_._internal_dayzoomtablevalue() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_dayzoomtablevalue());
            }
            // double azimuth = 4;
            if (::absl::bit_cast<::uint64_t>(this_._internal_azimuth()) != 0) {
              total_size += 9;
            }
            // double elevation = 5;
            if (::absl::bit_cast<::uint64_t>(this_._internal_elevation()) != 0) {
              total_size += 9;
            }
            // double linger = 6;
            if (::absl::bit_cast<::uint64_t>(this_._internal_linger()) != 0) {
              total_size += 9;
            }
            // double speed = 7;
            if (::absl::bit_cast<::uint64_t>(this_._internal_speed()) != 0) {
              total_size += 9;
            }
            // int32 HeatZoomTableValue = 3;
            if (this_._internal_heatzoomtablevalue() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_heatzoomtablevalue());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ScanNode::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ScanNode*>(&to_msg);
  auto& from = static_cast<const ScanNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ser.ScanNode)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_impl_.index_ = from._impl_.index_;
  }
  if (from._internal_dayzoomtablevalue() != 0) {
    _this->_impl_.dayzoomtablevalue_ = from._impl_.dayzoomtablevalue_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_azimuth()) != 0) {
    _this->_impl_.azimuth_ = from._impl_.azimuth_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_elevation()) != 0) {
    _this->_impl_.elevation_ = from._impl_.elevation_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_linger()) != 0) {
    _this->_impl_.linger_ = from._impl_.linger_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_speed()) != 0) {
    _this->_impl_.speed_ = from._impl_.speed_;
  }
  if (from._internal_heatzoomtablevalue() != 0) {
    _this->_impl_.heatzoomtablevalue_ = from._impl_.heatzoomtablevalue_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ScanNode::CopyFrom(const ScanNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ser.ScanNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ScanNode::InternalSwap(ScanNode* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScanNode, _impl_.heatzoomtablevalue_)
      + sizeof(ScanNode::_impl_.heatzoomtablevalue_)
      - PROTOBUF_FIELD_OFFSET(ScanNode, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::google::protobuf::Metadata ScanNode::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace ser
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_jon_5fshared_5fdata_5frotary_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
