// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: jon_shared_data_lrf.proto
// Protobuf C++ Version: 5.29.2

#include "jon_shared_data_lrf.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace ser {

inline constexpr RgbColor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : red_{0u},
        green_{0u},
        blue_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RgbColor::RgbColor(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RgbColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RgbColorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RgbColorDefaultTypeInternal() {}
  union {
    RgbColor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RgbColorDefaultTypeInternal _RgbColor_default_instance_;

inline constexpr JonGuiDataTarget::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        target_color_{nullptr},
        timestamp_{::int64_t{0}},
        target_longitude_{0},
        target_latitude_{0},
        target_altitude_{0},
        observer_longitude_{0},
        observer_latitude_{0},
        observer_altitude_{0},
        observer_azimuth_{0},
        observer_elevation_{0},
        observer_bank_{0},
        distance_2d_{0},
        distance_3b_{0},
        observer_fix_type_{static_cast< ::ser::JonGuiDataGpsFixType >(0)},
        session_id_{0},
        target_id_{0},
        type_{0u},
        uuid_part1_{0},
        uuid_part2_{0},
        uuid_part3_{0},
        uuid_part4_{0} {}

template <typename>
PROTOBUF_CONSTEXPR JonGuiDataTarget::JonGuiDataTarget(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct JonGuiDataTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JonGuiDataTargetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~JonGuiDataTargetDefaultTypeInternal() {}
  union {
    JonGuiDataTarget _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JonGuiDataTargetDefaultTypeInternal _JonGuiDataTarget_default_instance_;

inline constexpr JonGuiDataLrf::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        target_{nullptr},
        measure_id_{0},
        is_scanning_{false},
        is_measuring_{false},
        fogmodeenabled_{false},
        is_refining_{false},
        pointer_mode_{static_cast< ::ser::JonGuiDatatLrfLaserPointerModes >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR JonGuiDataLrf::JonGuiDataLrf(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct JonGuiDataLrfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JonGuiDataLrfDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~JonGuiDataLrfDefaultTypeInternal() {}
  union {
    JonGuiDataLrf _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JonGuiDataLrfDefaultTypeInternal _JonGuiDataLrf_default_instance_;
}  // namespace ser
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_jon_5fshared_5fdata_5flrf_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_jon_5fshared_5fdata_5flrf_2eproto = nullptr;
const ::uint32_t
    TableStruct_jon_5fshared_5fdata_5flrf_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataLrf, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataLrf, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataLrf, _impl_.is_scanning_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataLrf, _impl_.is_measuring_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataLrf, _impl_.measure_id_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataLrf, _impl_.target_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataLrf, _impl_.pointer_mode_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataLrf, _impl_.fogmodeenabled_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataLrf, _impl_.is_refining_),
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataTarget, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataTarget, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataTarget, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataTarget, _impl_.target_longitude_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataTarget, _impl_.target_latitude_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataTarget, _impl_.target_altitude_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataTarget, _impl_.observer_longitude_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataTarget, _impl_.observer_latitude_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataTarget, _impl_.observer_altitude_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataTarget, _impl_.observer_azimuth_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataTarget, _impl_.observer_elevation_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataTarget, _impl_.observer_bank_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataTarget, _impl_.distance_2d_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataTarget, _impl_.distance_3b_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataTarget, _impl_.observer_fix_type_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataTarget, _impl_.session_id_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataTarget, _impl_.target_id_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataTarget, _impl_.target_color_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataTarget, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataTarget, _impl_.uuid_part1_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataTarget, _impl_.uuid_part2_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataTarget, _impl_.uuid_part3_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataTarget, _impl_.uuid_part4_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ser::RgbColor, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::ser::RgbColor, _impl_.red_),
        PROTOBUF_FIELD_OFFSET(::ser::RgbColor, _impl_.green_),
        PROTOBUF_FIELD_OFFSET(::ser::RgbColor, _impl_.blue_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 15, -1, sizeof(::ser::JonGuiDataLrf)},
        {22, 51, -1, sizeof(::ser::JonGuiDataTarget)},
        {72, -1, -1, sizeof(::ser::RgbColor)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::ser::_JonGuiDataLrf_default_instance_._instance,
    &::ser::_JonGuiDataTarget_default_instance_._instance,
    &::ser::_RgbColor_default_instance_._instance,
};
const char descriptor_table_protodef_jon_5fshared_5fdata_5flrf_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\031jon_shared_data_lrf.proto\022\003ser\032\033jon_sh"
    "ared_data_types.proto\"\336\001\n\rJonGuiDataLrf\022"
    "\023\n\013is_scanning\030\001 \001(\010\022\024\n\014is_measuring\030\002 \001"
    "(\010\022\022\n\nmeasure_id\030\003 \001(\005\022%\n\006target\030\004 \001(\0132\025"
    ".ser.JonGuiDataTarget\022:\n\014pointer_mode\030\005 "
    "\001(\0162$.ser.JonGuiDatatLrfLaserPointerMode"
    "s\022\026\n\016fogModeEnabled\030\006 \001(\010\022\023\n\013is_refining"
    "\030\007 \001(\010\"\232\004\n\020JonGuiDataTarget\022\021\n\ttimestamp"
    "\030\001 \001(\003\022\030\n\020target_longitude\030\002 \001(\001\022\027\n\017targ"
    "et_latitude\030\003 \001(\001\022\027\n\017target_altitude\030\004 \001"
    "(\001\022\032\n\022observer_longitude\030\005 \001(\001\022\031\n\021observ"
    "er_latitude\030\006 \001(\001\022\031\n\021observer_altitude\030\007"
    " \001(\001\022\030\n\020observer_azimuth\030\010 \001(\001\022\032\n\022observ"
    "er_elevation\030\t \001(\001\022\025\n\robserver_bank\030\n \001("
    "\001\022\023\n\013distance_2d\030\013 \001(\001\022\023\n\013distance_3b\030\014 "
    "\001(\001\0224\n\021observer_fix_type\030\r \001(\0162\031.ser.Jon"
    "GuiDataGpsFixType\022\022\n\nsession_id\030\016 \001(\005\022\021\n"
    "\ttarget_id\030\017 \001(\005\022#\n\014target_color\030\020 \001(\0132\r"
    ".ser.RgbColor\022\014\n\004type\030\021 \001(\r\022\022\n\nuuid_part"
    "1\030\022 \001(\005\022\022\n\nuuid_part2\030\023 \001(\005\022\022\n\nuuid_part"
    "3\030\024 \001(\005\022\022\n\nuuid_part4\030\025 \001(\005\"4\n\010RgbColor\022"
    "\013\n\003red\030\001 \001(\r\022\r\n\005green\030\002 \001(\r\022\014\n\004blue\030\003 \001("
    "\rBKZIgit-codecommit.eu-central-1.amazona"
    "ws.com/v1/repos/jettison/jonp/data/lrfb\006"
    "proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_jon_5fshared_5fdata_5flrf_2eproto_deps[1] =
    {
        &::descriptor_table_jon_5fshared_5fdata_5ftypes_2eproto,
};
static ::absl::once_flag descriptor_table_jon_5fshared_5fdata_5flrf_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_jon_5fshared_5fdata_5flrf_2eproto = {
    false,
    false,
    966,
    descriptor_table_protodef_jon_5fshared_5fdata_5flrf_2eproto,
    "jon_shared_data_lrf.proto",
    &descriptor_table_jon_5fshared_5fdata_5flrf_2eproto_once,
    descriptor_table_jon_5fshared_5fdata_5flrf_2eproto_deps,
    1,
    3,
    schemas,
    file_default_instances,
    TableStruct_jon_5fshared_5fdata_5flrf_2eproto::offsets,
    file_level_enum_descriptors_jon_5fshared_5fdata_5flrf_2eproto,
    file_level_service_descriptors_jon_5fshared_5fdata_5flrf_2eproto,
};
namespace ser {
// ===================================================================

class JonGuiDataLrf::_Internal {
 public:
  using HasBits =
      decltype(std::declval<JonGuiDataLrf>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(JonGuiDataLrf, _impl_._has_bits_);
};

JonGuiDataLrf::JonGuiDataLrf(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ser.JonGuiDataLrf)
}
inline PROTOBUF_NDEBUG_INLINE JonGuiDataLrf::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::ser::JonGuiDataLrf& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

JonGuiDataLrf::JonGuiDataLrf(
    ::google::protobuf::Arena* arena,
    const JonGuiDataLrf& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  JonGuiDataLrf* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.target_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataTarget>(
                              arena, *from._impl_.target_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, measure_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, measure_id_),
           offsetof(Impl_, pointer_mode_) -
               offsetof(Impl_, measure_id_) +
               sizeof(Impl_::pointer_mode_));

  // @@protoc_insertion_point(copy_constructor:ser.JonGuiDataLrf)
}
inline PROTOBUF_NDEBUG_INLINE JonGuiDataLrf::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void JonGuiDataLrf::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, target_),
           0,
           offsetof(Impl_, pointer_mode_) -
               offsetof(Impl_, target_) +
               sizeof(Impl_::pointer_mode_));
}
JonGuiDataLrf::~JonGuiDataLrf() {
  // @@protoc_insertion_point(destructor:ser.JonGuiDataLrf)
  SharedDtor(*this);
}
inline void JonGuiDataLrf::SharedDtor(MessageLite& self) {
  JonGuiDataLrf& this_ = static_cast<JonGuiDataLrf&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.target_;
  this_._impl_.~Impl_();
}

inline void* JonGuiDataLrf::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) JonGuiDataLrf(arena);
}
constexpr auto JonGuiDataLrf::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(JonGuiDataLrf),
                                            alignof(JonGuiDataLrf));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull JonGuiDataLrf::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_JonGuiDataLrf_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &JonGuiDataLrf::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<JonGuiDataLrf>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &JonGuiDataLrf::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<JonGuiDataLrf>(), &JonGuiDataLrf::ByteSizeLong,
            &JonGuiDataLrf::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(JonGuiDataLrf, _impl_._cached_size_),
        false,
    },
    &JonGuiDataLrf::kDescriptorMethods,
    &descriptor_table_jon_5fshared_5fdata_5flrf_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* JonGuiDataLrf::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 0, 2> JonGuiDataLrf::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(JonGuiDataLrf, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ser::JonGuiDataLrf>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool is_scanning = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(JonGuiDataLrf, _impl_.is_scanning_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataLrf, _impl_.is_scanning_)}},
    // bool is_measuring = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(JonGuiDataLrf, _impl_.is_measuring_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataLrf, _impl_.is_measuring_)}},
    // int32 measure_id = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataLrf, _impl_.measure_id_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataLrf, _impl_.measure_id_)}},
    // .ser.JonGuiDataTarget target = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataLrf, _impl_.target_)}},
    // .ser.JonGuiDatatLrfLaserPointerModes pointer_mode = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataLrf, _impl_.pointer_mode_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataLrf, _impl_.pointer_mode_)}},
    // bool fogModeEnabled = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(JonGuiDataLrf, _impl_.fogmodeenabled_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataLrf, _impl_.fogmodeenabled_)}},
    // bool is_refining = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(JonGuiDataLrf, _impl_.is_refining_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataLrf, _impl_.is_refining_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool is_scanning = 1;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataLrf, _impl_.is_scanning_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_measuring = 2;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataLrf, _impl_.is_measuring_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 measure_id = 3;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataLrf, _impl_.measure_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .ser.JonGuiDataTarget target = 4;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataLrf, _impl_.target_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .ser.JonGuiDatatLrfLaserPointerModes pointer_mode = 5;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataLrf, _impl_.pointer_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool fogModeEnabled = 6;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataLrf, _impl_.fogmodeenabled_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_refining = 7;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataLrf, _impl_.is_refining_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::ser::JonGuiDataTarget>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void JonGuiDataLrf::Clear() {
// @@protoc_insertion_point(message_clear_start:ser.JonGuiDataLrf)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.target_ != nullptr);
    _impl_.target_->Clear();
  }
  ::memset(&_impl_.measure_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.pointer_mode_) -
      reinterpret_cast<char*>(&_impl_.measure_id_)) + sizeof(_impl_.pointer_mode_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* JonGuiDataLrf::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const JonGuiDataLrf& this_ = static_cast<const JonGuiDataLrf&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* JonGuiDataLrf::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const JonGuiDataLrf& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:ser.JonGuiDataLrf)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool is_scanning = 1;
          if (this_._internal_is_scanning() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_is_scanning(), target);
          }

          // bool is_measuring = 2;
          if (this_._internal_is_measuring() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_is_measuring(), target);
          }

          // int32 measure_id = 3;
          if (this_._internal_measure_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_measure_id(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .ser.JonGuiDataTarget target = 4;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.target_, this_._impl_.target_->GetCachedSize(), target,
                stream);
          }

          // .ser.JonGuiDatatLrfLaserPointerModes pointer_mode = 5;
          if (this_._internal_pointer_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                5, this_._internal_pointer_mode(), target);
          }

          // bool fogModeEnabled = 6;
          if (this_._internal_fogmodeenabled() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                6, this_._internal_fogmodeenabled(), target);
          }

          // bool is_refining = 7;
          if (this_._internal_is_refining() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                7, this_._internal_is_refining(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:ser.JonGuiDataLrf)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t JonGuiDataLrf::ByteSizeLong(const MessageLite& base) {
          const JonGuiDataLrf& this_ = static_cast<const JonGuiDataLrf&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t JonGuiDataLrf::ByteSizeLong() const {
          const JonGuiDataLrf& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:ser.JonGuiDataLrf)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .ser.JonGuiDataTarget target = 4;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.target_);
            }
          }
           {
            // int32 measure_id = 3;
            if (this_._internal_measure_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_measure_id());
            }
            // bool is_scanning = 1;
            if (this_._internal_is_scanning() != 0) {
              total_size += 2;
            }
            // bool is_measuring = 2;
            if (this_._internal_is_measuring() != 0) {
              total_size += 2;
            }
            // bool fogModeEnabled = 6;
            if (this_._internal_fogmodeenabled() != 0) {
              total_size += 2;
            }
            // bool is_refining = 7;
            if (this_._internal_is_refining() != 0) {
              total_size += 2;
            }
            // .ser.JonGuiDatatLrfLaserPointerModes pointer_mode = 5;
            if (this_._internal_pointer_mode() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_pointer_mode());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void JonGuiDataLrf::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<JonGuiDataLrf*>(&to_msg);
  auto& from = static_cast<const JonGuiDataLrf&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:ser.JonGuiDataLrf)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.target_ != nullptr);
    if (_this->_impl_.target_ == nullptr) {
      _this->_impl_.target_ =
          ::google::protobuf::Message::CopyConstruct<::ser::JonGuiDataTarget>(arena, *from._impl_.target_);
    } else {
      _this->_impl_.target_->MergeFrom(*from._impl_.target_);
    }
  }
  if (from._internal_measure_id() != 0) {
    _this->_impl_.measure_id_ = from._impl_.measure_id_;
  }
  if (from._internal_is_scanning() != 0) {
    _this->_impl_.is_scanning_ = from._impl_.is_scanning_;
  }
  if (from._internal_is_measuring() != 0) {
    _this->_impl_.is_measuring_ = from._impl_.is_measuring_;
  }
  if (from._internal_fogmodeenabled() != 0) {
    _this->_impl_.fogmodeenabled_ = from._impl_.fogmodeenabled_;
  }
  if (from._internal_is_refining() != 0) {
    _this->_impl_.is_refining_ = from._impl_.is_refining_;
  }
  if (from._internal_pointer_mode() != 0) {
    _this->_impl_.pointer_mode_ = from._impl_.pointer_mode_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void JonGuiDataLrf::CopyFrom(const JonGuiDataLrf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ser.JonGuiDataLrf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void JonGuiDataLrf::InternalSwap(JonGuiDataLrf* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JonGuiDataLrf, _impl_.pointer_mode_)
      + sizeof(JonGuiDataLrf::_impl_.pointer_mode_)
      - PROTOBUF_FIELD_OFFSET(JonGuiDataLrf, _impl_.target_)>(
          reinterpret_cast<char*>(&_impl_.target_),
          reinterpret_cast<char*>(&other->_impl_.target_));
}

::google::protobuf::Metadata JonGuiDataLrf::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class JonGuiDataTarget::_Internal {
 public:
  using HasBits =
      decltype(std::declval<JonGuiDataTarget>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_._has_bits_);
};

JonGuiDataTarget::JonGuiDataTarget(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ser.JonGuiDataTarget)
}
inline PROTOBUF_NDEBUG_INLINE JonGuiDataTarget::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::ser::JonGuiDataTarget& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

JonGuiDataTarget::JonGuiDataTarget(
    ::google::protobuf::Arena* arena,
    const JonGuiDataTarget& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  JonGuiDataTarget* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.target_color_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::ser::RgbColor>(
                              arena, *from._impl_.target_color_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, timestamp_),
           offsetof(Impl_, uuid_part4_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::uuid_part4_));

  // @@protoc_insertion_point(copy_constructor:ser.JonGuiDataTarget)
}
inline PROTOBUF_NDEBUG_INLINE JonGuiDataTarget::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void JonGuiDataTarget::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, target_color_),
           0,
           offsetof(Impl_, uuid_part4_) -
               offsetof(Impl_, target_color_) +
               sizeof(Impl_::uuid_part4_));
}
JonGuiDataTarget::~JonGuiDataTarget() {
  // @@protoc_insertion_point(destructor:ser.JonGuiDataTarget)
  SharedDtor(*this);
}
inline void JonGuiDataTarget::SharedDtor(MessageLite& self) {
  JonGuiDataTarget& this_ = static_cast<JonGuiDataTarget&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.target_color_;
  this_._impl_.~Impl_();
}

inline void* JonGuiDataTarget::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) JonGuiDataTarget(arena);
}
constexpr auto JonGuiDataTarget::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(JonGuiDataTarget),
                                            alignof(JonGuiDataTarget));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull JonGuiDataTarget::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_JonGuiDataTarget_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &JonGuiDataTarget::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<JonGuiDataTarget>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &JonGuiDataTarget::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<JonGuiDataTarget>(), &JonGuiDataTarget::ByteSizeLong,
            &JonGuiDataTarget::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_._cached_size_),
        false,
    },
    &JonGuiDataTarget::kDescriptorMethods,
    &descriptor_table_jon_5fshared_5fdata_5flrf_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* JonGuiDataTarget::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 21, 1, 0, 2> JonGuiDataTarget::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_._has_bits_),
    0, // no _extensions_
    21, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4292870144,  // skipmap
    offsetof(decltype(_table_), field_entries),
    21,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ser::JonGuiDataTarget>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 timestamp = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(JonGuiDataTarget, _impl_.timestamp_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.timestamp_)}},
    // double target_longitude = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.target_longitude_)}},
    // double target_latitude = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.target_latitude_)}},
    // double target_altitude = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.target_altitude_)}},
    // double observer_longitude = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.observer_longitude_)}},
    // double observer_latitude = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.observer_latitude_)}},
    // double observer_altitude = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.observer_altitude_)}},
    // double observer_azimuth = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.observer_azimuth_)}},
    // double observer_elevation = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.observer_elevation_)}},
    // double observer_bank = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.observer_bank_)}},
    // double distance_2d = 11;
    {::_pbi::TcParser::FastF64S1,
     {89, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.distance_2d_)}},
    // double distance_3b = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.distance_3b_)}},
    // .ser.JonGuiDataGpsFixType observer_fix_type = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataTarget, _impl_.observer_fix_type_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.observer_fix_type_)}},
    // int32 session_id = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataTarget, _impl_.session_id_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.session_id_)}},
    // int32 target_id = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataTarget, _impl_.target_id_), 63>(),
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.target_id_)}},
    // .ser.RgbColor target_color = 16;
    {::_pbi::TcParser::FastMtS2,
     {386, 0, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.target_color_)}},
    // uint32 type = 17;
    {::_pbi::TcParser::FastV32S2,
     {392, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.type_)}},
    // int32 uuid_part1 = 18;
    {::_pbi::TcParser::FastV32S2,
     {400, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.uuid_part1_)}},
    // int32 uuid_part2 = 19;
    {::_pbi::TcParser::FastV32S2,
     {408, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.uuid_part2_)}},
    // int32 uuid_part3 = 20;
    {::_pbi::TcParser::FastV32S2,
     {416, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.uuid_part3_)}},
    // int32 uuid_part4 = 21;
    {::_pbi::TcParser::FastV32S2,
     {424, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.uuid_part4_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.timestamp_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // double target_longitude = 2;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.target_longitude_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double target_latitude = 3;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.target_latitude_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double target_altitude = 4;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.target_altitude_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double observer_longitude = 5;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.observer_longitude_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double observer_latitude = 6;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.observer_latitude_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double observer_altitude = 7;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.observer_altitude_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double observer_azimuth = 8;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.observer_azimuth_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double observer_elevation = 9;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.observer_elevation_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double observer_bank = 10;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.observer_bank_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double distance_2d = 11;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.distance_2d_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double distance_3b = 12;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.distance_3b_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // .ser.JonGuiDataGpsFixType observer_fix_type = 13;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.observer_fix_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 session_id = 14;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.session_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 target_id = 15;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.target_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .ser.RgbColor target_color = 16;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.target_color_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 type = 17;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // int32 uuid_part1 = 18;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.uuid_part1_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 uuid_part2 = 19;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.uuid_part2_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 uuid_part3 = 20;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.uuid_part3_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 uuid_part4 = 21;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.uuid_part4_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::ser::RgbColor>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void JonGuiDataTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:ser.JonGuiDataTarget)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.target_color_ != nullptr);
    _impl_.target_color_->Clear();
  }
  ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.uuid_part4_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.uuid_part4_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* JonGuiDataTarget::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const JonGuiDataTarget& this_ = static_cast<const JonGuiDataTarget&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* JonGuiDataTarget::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const JonGuiDataTarget& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:ser.JonGuiDataTarget)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int64 timestamp = 1;
          if (this_._internal_timestamp() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<1>(
                    stream, this_._internal_timestamp(), target);
          }

          // double target_longitude = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_target_longitude()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_target_longitude(), target);
          }

          // double target_latitude = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_target_latitude()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_target_latitude(), target);
          }

          // double target_altitude = 4;
          if (::absl::bit_cast<::uint64_t>(this_._internal_target_altitude()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                4, this_._internal_target_altitude(), target);
          }

          // double observer_longitude = 5;
          if (::absl::bit_cast<::uint64_t>(this_._internal_observer_longitude()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_observer_longitude(), target);
          }

          // double observer_latitude = 6;
          if (::absl::bit_cast<::uint64_t>(this_._internal_observer_latitude()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                6, this_._internal_observer_latitude(), target);
          }

          // double observer_altitude = 7;
          if (::absl::bit_cast<::uint64_t>(this_._internal_observer_altitude()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                7, this_._internal_observer_altitude(), target);
          }

          // double observer_azimuth = 8;
          if (::absl::bit_cast<::uint64_t>(this_._internal_observer_azimuth()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                8, this_._internal_observer_azimuth(), target);
          }

          // double observer_elevation = 9;
          if (::absl::bit_cast<::uint64_t>(this_._internal_observer_elevation()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                9, this_._internal_observer_elevation(), target);
          }

          // double observer_bank = 10;
          if (::absl::bit_cast<::uint64_t>(this_._internal_observer_bank()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                10, this_._internal_observer_bank(), target);
          }

          // double distance_2d = 11;
          if (::absl::bit_cast<::uint64_t>(this_._internal_distance_2d()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                11, this_._internal_distance_2d(), target);
          }

          // double distance_3b = 12;
          if (::absl::bit_cast<::uint64_t>(this_._internal_distance_3b()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                12, this_._internal_distance_3b(), target);
          }

          // .ser.JonGuiDataGpsFixType observer_fix_type = 13;
          if (this_._internal_observer_fix_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                13, this_._internal_observer_fix_type(), target);
          }

          // int32 session_id = 14;
          if (this_._internal_session_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<14>(
                    stream, this_._internal_session_id(), target);
          }

          // int32 target_id = 15;
          if (this_._internal_target_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<15>(
                    stream, this_._internal_target_id(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .ser.RgbColor target_color = 16;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                16, *this_._impl_.target_color_, this_._impl_.target_color_->GetCachedSize(), target,
                stream);
          }

          // uint32 type = 17;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                17, this_._internal_type(), target);
          }

          // int32 uuid_part1 = 18;
          if (this_._internal_uuid_part1() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                18, this_._internal_uuid_part1(), target);
          }

          // int32 uuid_part2 = 19;
          if (this_._internal_uuid_part2() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                19, this_._internal_uuid_part2(), target);
          }

          // int32 uuid_part3 = 20;
          if (this_._internal_uuid_part3() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                20, this_._internal_uuid_part3(), target);
          }

          // int32 uuid_part4 = 21;
          if (this_._internal_uuid_part4() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                21, this_._internal_uuid_part4(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:ser.JonGuiDataTarget)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t JonGuiDataTarget::ByteSizeLong(const MessageLite& base) {
          const JonGuiDataTarget& this_ = static_cast<const JonGuiDataTarget&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t JonGuiDataTarget::ByteSizeLong() const {
          const JonGuiDataTarget& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:ser.JonGuiDataTarget)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .ser.RgbColor target_color = 16;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.target_color_);
            }
          }
           {
            // int64 timestamp = 1;
            if (this_._internal_timestamp() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_timestamp());
            }
            // double target_longitude = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_target_longitude()) != 0) {
              total_size += 9;
            }
            // double target_latitude = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_target_latitude()) != 0) {
              total_size += 9;
            }
            // double target_altitude = 4;
            if (::absl::bit_cast<::uint64_t>(this_._internal_target_altitude()) != 0) {
              total_size += 9;
            }
            // double observer_longitude = 5;
            if (::absl::bit_cast<::uint64_t>(this_._internal_observer_longitude()) != 0) {
              total_size += 9;
            }
            // double observer_latitude = 6;
            if (::absl::bit_cast<::uint64_t>(this_._internal_observer_latitude()) != 0) {
              total_size += 9;
            }
            // double observer_altitude = 7;
            if (::absl::bit_cast<::uint64_t>(this_._internal_observer_altitude()) != 0) {
              total_size += 9;
            }
            // double observer_azimuth = 8;
            if (::absl::bit_cast<::uint64_t>(this_._internal_observer_azimuth()) != 0) {
              total_size += 9;
            }
            // double observer_elevation = 9;
            if (::absl::bit_cast<::uint64_t>(this_._internal_observer_elevation()) != 0) {
              total_size += 9;
            }
            // double observer_bank = 10;
            if (::absl::bit_cast<::uint64_t>(this_._internal_observer_bank()) != 0) {
              total_size += 9;
            }
            // double distance_2d = 11;
            if (::absl::bit_cast<::uint64_t>(this_._internal_distance_2d()) != 0) {
              total_size += 9;
            }
            // double distance_3b = 12;
            if (::absl::bit_cast<::uint64_t>(this_._internal_distance_3b()) != 0) {
              total_size += 9;
            }
            // .ser.JonGuiDataGpsFixType observer_fix_type = 13;
            if (this_._internal_observer_fix_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_observer_fix_type());
            }
            // int32 session_id = 14;
            if (this_._internal_session_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_session_id());
            }
            // int32 target_id = 15;
            if (this_._internal_target_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_target_id());
            }
            // uint32 type = 17;
            if (this_._internal_type() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_type());
            }
            // int32 uuid_part1 = 18;
            if (this_._internal_uuid_part1() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_uuid_part1());
            }
            // int32 uuid_part2 = 19;
            if (this_._internal_uuid_part2() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_uuid_part2());
            }
            // int32 uuid_part3 = 20;
            if (this_._internal_uuid_part3() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_uuid_part3());
            }
            // int32 uuid_part4 = 21;
            if (this_._internal_uuid_part4() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_uuid_part4());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void JonGuiDataTarget::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<JonGuiDataTarget*>(&to_msg);
  auto& from = static_cast<const JonGuiDataTarget&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:ser.JonGuiDataTarget)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.target_color_ != nullptr);
    if (_this->_impl_.target_color_ == nullptr) {
      _this->_impl_.target_color_ =
          ::google::protobuf::Message::CopyConstruct<::ser::RgbColor>(arena, *from._impl_.target_color_);
    } else {
      _this->_impl_.target_color_->MergeFrom(*from._impl_.target_color_);
    }
  }
  if (from._internal_timestamp() != 0) {
    _this->_impl_.timestamp_ = from._impl_.timestamp_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_target_longitude()) != 0) {
    _this->_impl_.target_longitude_ = from._impl_.target_longitude_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_target_latitude()) != 0) {
    _this->_impl_.target_latitude_ = from._impl_.target_latitude_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_target_altitude()) != 0) {
    _this->_impl_.target_altitude_ = from._impl_.target_altitude_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_observer_longitude()) != 0) {
    _this->_impl_.observer_longitude_ = from._impl_.observer_longitude_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_observer_latitude()) != 0) {
    _this->_impl_.observer_latitude_ = from._impl_.observer_latitude_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_observer_altitude()) != 0) {
    _this->_impl_.observer_altitude_ = from._impl_.observer_altitude_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_observer_azimuth()) != 0) {
    _this->_impl_.observer_azimuth_ = from._impl_.observer_azimuth_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_observer_elevation()) != 0) {
    _this->_impl_.observer_elevation_ = from._impl_.observer_elevation_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_observer_bank()) != 0) {
    _this->_impl_.observer_bank_ = from._impl_.observer_bank_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_distance_2d()) != 0) {
    _this->_impl_.distance_2d_ = from._impl_.distance_2d_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_distance_3b()) != 0) {
    _this->_impl_.distance_3b_ = from._impl_.distance_3b_;
  }
  if (from._internal_observer_fix_type() != 0) {
    _this->_impl_.observer_fix_type_ = from._impl_.observer_fix_type_;
  }
  if (from._internal_session_id() != 0) {
    _this->_impl_.session_id_ = from._impl_.session_id_;
  }
  if (from._internal_target_id() != 0) {
    _this->_impl_.target_id_ = from._impl_.target_id_;
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (from._internal_uuid_part1() != 0) {
    _this->_impl_.uuid_part1_ = from._impl_.uuid_part1_;
  }
  if (from._internal_uuid_part2() != 0) {
    _this->_impl_.uuid_part2_ = from._impl_.uuid_part2_;
  }
  if (from._internal_uuid_part3() != 0) {
    _this->_impl_.uuid_part3_ = from._impl_.uuid_part3_;
  }
  if (from._internal_uuid_part4() != 0) {
    _this->_impl_.uuid_part4_ = from._impl_.uuid_part4_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void JonGuiDataTarget::CopyFrom(const JonGuiDataTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ser.JonGuiDataTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void JonGuiDataTarget::InternalSwap(JonGuiDataTarget* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.uuid_part4_)
      + sizeof(JonGuiDataTarget::_impl_.uuid_part4_)
      - PROTOBUF_FIELD_OFFSET(JonGuiDataTarget, _impl_.target_color_)>(
          reinterpret_cast<char*>(&_impl_.target_color_),
          reinterpret_cast<char*>(&other->_impl_.target_color_));
}

::google::protobuf::Metadata JonGuiDataTarget::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RgbColor::_Internal {
 public:
};

RgbColor::RgbColor(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ser.RgbColor)
}
RgbColor::RgbColor(
    ::google::protobuf::Arena* arena, const RgbColor& from)
    : RgbColor(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE RgbColor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RgbColor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, red_),
           0,
           offsetof(Impl_, blue_) -
               offsetof(Impl_, red_) +
               sizeof(Impl_::blue_));
}
RgbColor::~RgbColor() {
  // @@protoc_insertion_point(destructor:ser.RgbColor)
  SharedDtor(*this);
}
inline void RgbColor::SharedDtor(MessageLite& self) {
  RgbColor& this_ = static_cast<RgbColor&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* RgbColor::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) RgbColor(arena);
}
constexpr auto RgbColor::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(RgbColor),
                                            alignof(RgbColor));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull RgbColor::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_RgbColor_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &RgbColor::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<RgbColor>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &RgbColor::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<RgbColor>(), &RgbColor::ByteSizeLong,
            &RgbColor::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(RgbColor, _impl_._cached_size_),
        false,
    },
    &RgbColor::kDescriptorMethods,
    &descriptor_table_jon_5fshared_5fdata_5flrf_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* RgbColor::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> RgbColor::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ser::RgbColor>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 red = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RgbColor, _impl_.red_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RgbColor, _impl_.red_)}},
    // uint32 green = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RgbColor, _impl_.green_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RgbColor, _impl_.green_)}},
    // uint32 blue = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RgbColor, _impl_.blue_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(RgbColor, _impl_.blue_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 red = 1;
    {PROTOBUF_FIELD_OFFSET(RgbColor, _impl_.red_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 green = 2;
    {PROTOBUF_FIELD_OFFSET(RgbColor, _impl_.green_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 blue = 3;
    {PROTOBUF_FIELD_OFFSET(RgbColor, _impl_.blue_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void RgbColor::Clear() {
// @@protoc_insertion_point(message_clear_start:ser.RgbColor)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.red_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.blue_) -
      reinterpret_cast<char*>(&_impl_.red_)) + sizeof(_impl_.blue_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RgbColor::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RgbColor& this_ = static_cast<const RgbColor&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RgbColor::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RgbColor& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:ser.RgbColor)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 red = 1;
          if (this_._internal_red() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_red(), target);
          }

          // uint32 green = 2;
          if (this_._internal_green() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_green(), target);
          }

          // uint32 blue = 3;
          if (this_._internal_blue() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                3, this_._internal_blue(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:ser.RgbColor)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RgbColor::ByteSizeLong(const MessageLite& base) {
          const RgbColor& this_ = static_cast<const RgbColor&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RgbColor::ByteSizeLong() const {
          const RgbColor& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:ser.RgbColor)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // uint32 red = 1;
            if (this_._internal_red() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_red());
            }
            // uint32 green = 2;
            if (this_._internal_green() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_green());
            }
            // uint32 blue = 3;
            if (this_._internal_blue() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_blue());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RgbColor::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RgbColor*>(&to_msg);
  auto& from = static_cast<const RgbColor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ser.RgbColor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_red() != 0) {
    _this->_impl_.red_ = from._impl_.red_;
  }
  if (from._internal_green() != 0) {
    _this->_impl_.green_ = from._impl_.green_;
  }
  if (from._internal_blue() != 0) {
    _this->_impl_.blue_ = from._impl_.blue_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RgbColor::CopyFrom(const RgbColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ser.RgbColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RgbColor::InternalSwap(RgbColor* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RgbColor, _impl_.blue_)
      + sizeof(RgbColor::_impl_.blue_)
      - PROTOBUF_FIELD_OFFSET(RgbColor, _impl_.red_)>(
          reinterpret_cast<char*>(&_impl_.red_),
          reinterpret_cast<char*>(&other->_impl_.red_));
}

::google::protobuf::Metadata RgbColor::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace ser
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_jon_5fshared_5fdata_5flrf_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
