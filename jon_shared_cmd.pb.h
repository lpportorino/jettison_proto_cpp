// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: jon_shared_cmd.proto
// Protobuf C++ Version: 5.29.2

#ifndef jon_5fshared_5fcmd_2eproto_2epb_2eh
#define jon_5fshared_5fcmd_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "jon_shared_cmd_compass.pb.h"
#include "jon_shared_cmd_gps.pb.h"
#include "jon_shared_cmd_lrf.pb.h"
#include "jon_shared_cmd_day_camera.pb.h"
#include "jon_shared_cmd_heat_camera.pb.h"
#include "jon_shared_cmd_rotary.pb.h"
#include "jon_shared_cmd_osd.pb.h"
#include "jon_shared_cmd_lrf_align.pb.h"
#include "jon_shared_cmd_system.pb.h"
#include "jon_shared_cmd_cv.pb.h"
#include "jon_shared_cmd_day_cam_glass_heater.pb.h"
#include "jon_shared_cmd_lira.pb.h"
#include "jon_shared_data_types.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_jon_5fshared_5fcmd_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_jon_5fshared_5fcmd_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_jon_5fshared_5fcmd_2eproto;
namespace cmd {
class Frozen;
struct FrozenDefaultTypeInternal;
extern FrozenDefaultTypeInternal _Frozen_default_instance_;
class Noop;
struct NoopDefaultTypeInternal;
extern NoopDefaultTypeInternal _Noop_default_instance_;
class Ping;
struct PingDefaultTypeInternal;
extern PingDefaultTypeInternal _Ping_default_instance_;
class Root;
struct RootDefaultTypeInternal;
extern RootDefaultTypeInternal _Root_default_instance_;
}  // namespace cmd
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cmd {

// ===================================================================


// -------------------------------------------------------------------

class Ping final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.Ping) */ {
 public:
  inline Ping() : Ping(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Ping* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Ping));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Ping(
      ::google::protobuf::internal::ConstantInitialized);

  inline Ping(const Ping& from) : Ping(nullptr, from) {}
  inline Ping(Ping&& from) noexcept
      : Ping(nullptr, std::move(from)) {}
  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ping& operator=(Ping&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ping& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ping* internal_default_instance() {
    return reinterpret_cast<const Ping*>(
        &_Ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Ping& a, Ping& b) { a.Swap(&b); }
  inline void Swap(Ping* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ping* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ping* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Ping>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Ping& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Ping& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.Ping"; }

 protected:
  explicit Ping(::google::protobuf::Arena* arena);
  Ping(::google::protobuf::Arena* arena, const Ping& from);
  Ping(::google::protobuf::Arena* arena, Ping&& from) noexcept
      : Ping(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.Ping)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Ping& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_2eproto;
};
// -------------------------------------------------------------------

class Noop final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.Noop) */ {
 public:
  inline Noop() : Noop(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Noop* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Noop));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Noop(
      ::google::protobuf::internal::ConstantInitialized);

  inline Noop(const Noop& from) : Noop(nullptr, from) {}
  inline Noop(Noop&& from) noexcept
      : Noop(nullptr, std::move(from)) {}
  inline Noop& operator=(const Noop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Noop& operator=(Noop&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Noop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Noop* internal_default_instance() {
    return reinterpret_cast<const Noop*>(
        &_Noop_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Noop& a, Noop& b) { a.Swap(&b); }
  inline void Swap(Noop* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Noop* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Noop* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Noop>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Noop& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Noop& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.Noop"; }

 protected:
  explicit Noop(::google::protobuf::Arena* arena);
  Noop(::google::protobuf::Arena* arena, const Noop& from);
  Noop(::google::protobuf::Arena* arena, Noop&& from) noexcept
      : Noop(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.Noop)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Noop& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_2eproto;
};
// -------------------------------------------------------------------

class Frozen final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.Frozen) */ {
 public:
  inline Frozen() : Frozen(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Frozen* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Frozen));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Frozen(
      ::google::protobuf::internal::ConstantInitialized);

  inline Frozen(const Frozen& from) : Frozen(nullptr, from) {}
  inline Frozen(Frozen&& from) noexcept
      : Frozen(nullptr, std::move(from)) {}
  inline Frozen& operator=(const Frozen& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frozen& operator=(Frozen&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Frozen& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frozen* internal_default_instance() {
    return reinterpret_cast<const Frozen*>(
        &_Frozen_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Frozen& a, Frozen& b) { a.Swap(&b); }
  inline void Swap(Frozen* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frozen* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Frozen* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Frozen>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Frozen& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Frozen& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.Frozen"; }

 protected:
  explicit Frozen(::google::protobuf::Arena* arena);
  Frozen(::google::protobuf::Arena* arena, const Frozen& from);
  Frozen(::google::protobuf::Arena* arena, Frozen&& from) noexcept
      : Frozen(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.Frozen)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Frozen& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_2eproto;
};
// -------------------------------------------------------------------

class Root final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.Root) */ {
 public:
  inline Root() : Root(nullptr) {}
  ~Root() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Root* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Root));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Root(
      ::google::protobuf::internal::ConstantInitialized);

  inline Root(const Root& from) : Root(nullptr, from) {}
  inline Root(Root&& from) noexcept
      : Root(nullptr, std::move(from)) {}
  inline Root& operator=(const Root& from) {
    CopyFrom(from);
    return *this;
  }
  inline Root& operator=(Root&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Root& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kDayCamera = 20,
    kHeatCamera = 21,
    kGps = 22,
    kCompass = 23,
    kLrf = 24,
    kLrfCalib = 25,
    kRotary = 26,
    kOsd = 27,
    kPing = 28,
    kNoop = 29,
    kFrozen = 30,
    kSystem = 31,
    kCv = 32,
    kDayCamGlassHeater = 33,
    kLira = 34,
    PAYLOAD_NOT_SET = 0,
  };
  static inline const Root* internal_default_instance() {
    return reinterpret_cast<const Root*>(
        &_Root_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Root& a, Root& b) { a.Swap(&b); }
  inline void Swap(Root* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Root* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Root* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Root>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Root& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Root& from) { Root::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Root* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.Root"; }

 protected:
  explicit Root(::google::protobuf::Arena* arena);
  Root(::google::protobuf::Arena* arena, const Root& from);
  Root(::google::protobuf::Arena* arena, Root&& from) noexcept
      : Root(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kProtocolVersionFieldNumber = 1,
    kSessionIdFieldNumber = 2,
    kImportantFieldNumber = 3,
    kFromCvSubsystemFieldNumber = 4,
    kClientTypeFieldNumber = 5,
    kDayCameraFieldNumber = 20,
    kHeatCameraFieldNumber = 21,
    kGpsFieldNumber = 22,
    kCompassFieldNumber = 23,
    kLrfFieldNumber = 24,
    kLrfCalibFieldNumber = 25,
    kRotaryFieldNumber = 26,
    kOsdFieldNumber = 27,
    kPingFieldNumber = 28,
    kNoopFieldNumber = 29,
    kFrozenFieldNumber = 30,
    kSystemFieldNumber = 31,
    kCvFieldNumber = 32,
    kDayCamGlassHeaterFieldNumber = 33,
    kLiraFieldNumber = 34,
  };
  // uint32 protocol_version = 1;
  void clear_protocol_version() ;
  ::uint32_t protocol_version() const;
  void set_protocol_version(::uint32_t value);

  private:
  ::uint32_t _internal_protocol_version() const;
  void _internal_set_protocol_version(::uint32_t value);

  public:
  // uint32 session_id = 2;
  void clear_session_id() ;
  ::uint32_t session_id() const;
  void set_session_id(::uint32_t value);

  private:
  ::uint32_t _internal_session_id() const;
  void _internal_set_session_id(::uint32_t value);

  public:
  // bool important = 3;
  void clear_important() ;
  bool important() const;
  void set_important(bool value);

  private:
  bool _internal_important() const;
  void _internal_set_important(bool value);

  public:
  // bool from_cv_subsystem = 4;
  void clear_from_cv_subsystem() ;
  bool from_cv_subsystem() const;
  void set_from_cv_subsystem(bool value);

  private:
  bool _internal_from_cv_subsystem() const;
  void _internal_set_from_cv_subsystem(bool value);

  public:
  // .ser.JonGuiDataClientType client_type = 5;
  void clear_client_type() ;
  ::ser::JonGuiDataClientType client_type() const;
  void set_client_type(::ser::JonGuiDataClientType value);

  private:
  ::ser::JonGuiDataClientType _internal_client_type() const;
  void _internal_set_client_type(::ser::JonGuiDataClientType value);

  public:
  // .cmd.DayCamera.Root day_camera = 20;
  bool has_day_camera() const;
  private:
  bool _internal_has_day_camera() const;

  public:
  void clear_day_camera() ;
  const ::cmd::DayCamera::Root& day_camera() const;
  PROTOBUF_NODISCARD ::cmd::DayCamera::Root* release_day_camera();
  ::cmd::DayCamera::Root* mutable_day_camera();
  void set_allocated_day_camera(::cmd::DayCamera::Root* value);
  void unsafe_arena_set_allocated_day_camera(::cmd::DayCamera::Root* value);
  ::cmd::DayCamera::Root* unsafe_arena_release_day_camera();

  private:
  const ::cmd::DayCamera::Root& _internal_day_camera() const;
  ::cmd::DayCamera::Root* _internal_mutable_day_camera();

  public:
  // .cmd.HeatCamera.Root heat_camera = 21;
  bool has_heat_camera() const;
  private:
  bool _internal_has_heat_camera() const;

  public:
  void clear_heat_camera() ;
  const ::cmd::HeatCamera::Root& heat_camera() const;
  PROTOBUF_NODISCARD ::cmd::HeatCamera::Root* release_heat_camera();
  ::cmd::HeatCamera::Root* mutable_heat_camera();
  void set_allocated_heat_camera(::cmd::HeatCamera::Root* value);
  void unsafe_arena_set_allocated_heat_camera(::cmd::HeatCamera::Root* value);
  ::cmd::HeatCamera::Root* unsafe_arena_release_heat_camera();

  private:
  const ::cmd::HeatCamera::Root& _internal_heat_camera() const;
  ::cmd::HeatCamera::Root* _internal_mutable_heat_camera();

  public:
  // .cmd.Gps.Root gps = 22;
  bool has_gps() const;
  private:
  bool _internal_has_gps() const;

  public:
  void clear_gps() ;
  const ::cmd::Gps::Root& gps() const;
  PROTOBUF_NODISCARD ::cmd::Gps::Root* release_gps();
  ::cmd::Gps::Root* mutable_gps();
  void set_allocated_gps(::cmd::Gps::Root* value);
  void unsafe_arena_set_allocated_gps(::cmd::Gps::Root* value);
  ::cmd::Gps::Root* unsafe_arena_release_gps();

  private:
  const ::cmd::Gps::Root& _internal_gps() const;
  ::cmd::Gps::Root* _internal_mutable_gps();

  public:
  // .cmd.Compass.Root compass = 23;
  bool has_compass() const;
  private:
  bool _internal_has_compass() const;

  public:
  void clear_compass() ;
  const ::cmd::Compass::Root& compass() const;
  PROTOBUF_NODISCARD ::cmd::Compass::Root* release_compass();
  ::cmd::Compass::Root* mutable_compass();
  void set_allocated_compass(::cmd::Compass::Root* value);
  void unsafe_arena_set_allocated_compass(::cmd::Compass::Root* value);
  ::cmd::Compass::Root* unsafe_arena_release_compass();

  private:
  const ::cmd::Compass::Root& _internal_compass() const;
  ::cmd::Compass::Root* _internal_mutable_compass();

  public:
  // .cmd.Lrf.Root lrf = 24;
  bool has_lrf() const;
  private:
  bool _internal_has_lrf() const;

  public:
  void clear_lrf() ;
  const ::cmd::Lrf::Root& lrf() const;
  PROTOBUF_NODISCARD ::cmd::Lrf::Root* release_lrf();
  ::cmd::Lrf::Root* mutable_lrf();
  void set_allocated_lrf(::cmd::Lrf::Root* value);
  void unsafe_arena_set_allocated_lrf(::cmd::Lrf::Root* value);
  ::cmd::Lrf::Root* unsafe_arena_release_lrf();

  private:
  const ::cmd::Lrf::Root& _internal_lrf() const;
  ::cmd::Lrf::Root* _internal_mutable_lrf();

  public:
  // .cmd.Lrf_calib.Root lrf_calib = 25;
  bool has_lrf_calib() const;
  private:
  bool _internal_has_lrf_calib() const;

  public:
  void clear_lrf_calib() ;
  const ::cmd::Lrf_calib::Root& lrf_calib() const;
  PROTOBUF_NODISCARD ::cmd::Lrf_calib::Root* release_lrf_calib();
  ::cmd::Lrf_calib::Root* mutable_lrf_calib();
  void set_allocated_lrf_calib(::cmd::Lrf_calib::Root* value);
  void unsafe_arena_set_allocated_lrf_calib(::cmd::Lrf_calib::Root* value);
  ::cmd::Lrf_calib::Root* unsafe_arena_release_lrf_calib();

  private:
  const ::cmd::Lrf_calib::Root& _internal_lrf_calib() const;
  ::cmd::Lrf_calib::Root* _internal_mutable_lrf_calib();

  public:
  // .cmd.RotaryPlatform.Root rotary = 26;
  bool has_rotary() const;
  private:
  bool _internal_has_rotary() const;

  public:
  void clear_rotary() ;
  const ::cmd::RotaryPlatform::Root& rotary() const;
  PROTOBUF_NODISCARD ::cmd::RotaryPlatform::Root* release_rotary();
  ::cmd::RotaryPlatform::Root* mutable_rotary();
  void set_allocated_rotary(::cmd::RotaryPlatform::Root* value);
  void unsafe_arena_set_allocated_rotary(::cmd::RotaryPlatform::Root* value);
  ::cmd::RotaryPlatform::Root* unsafe_arena_release_rotary();

  private:
  const ::cmd::RotaryPlatform::Root& _internal_rotary() const;
  ::cmd::RotaryPlatform::Root* _internal_mutable_rotary();

  public:
  // .cmd.OSD.Root osd = 27;
  bool has_osd() const;
  private:
  bool _internal_has_osd() const;

  public:
  void clear_osd() ;
  const ::cmd::OSD::Root& osd() const;
  PROTOBUF_NODISCARD ::cmd::OSD::Root* release_osd();
  ::cmd::OSD::Root* mutable_osd();
  void set_allocated_osd(::cmd::OSD::Root* value);
  void unsafe_arena_set_allocated_osd(::cmd::OSD::Root* value);
  ::cmd::OSD::Root* unsafe_arena_release_osd();

  private:
  const ::cmd::OSD::Root& _internal_osd() const;
  ::cmd::OSD::Root* _internal_mutable_osd();

  public:
  // .cmd.Ping ping = 28;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;

  public:
  void clear_ping() ;
  const ::cmd::Ping& ping() const;
  PROTOBUF_NODISCARD ::cmd::Ping* release_ping();
  ::cmd::Ping* mutable_ping();
  void set_allocated_ping(::cmd::Ping* value);
  void unsafe_arena_set_allocated_ping(::cmd::Ping* value);
  ::cmd::Ping* unsafe_arena_release_ping();

  private:
  const ::cmd::Ping& _internal_ping() const;
  ::cmd::Ping* _internal_mutable_ping();

  public:
  // .cmd.Noop noop = 29;
  bool has_noop() const;
  private:
  bool _internal_has_noop() const;

  public:
  void clear_noop() ;
  const ::cmd::Noop& noop() const;
  PROTOBUF_NODISCARD ::cmd::Noop* release_noop();
  ::cmd::Noop* mutable_noop();
  void set_allocated_noop(::cmd::Noop* value);
  void unsafe_arena_set_allocated_noop(::cmd::Noop* value);
  ::cmd::Noop* unsafe_arena_release_noop();

  private:
  const ::cmd::Noop& _internal_noop() const;
  ::cmd::Noop* _internal_mutable_noop();

  public:
  // .cmd.Frozen frozen = 30;
  bool has_frozen() const;
  private:
  bool _internal_has_frozen() const;

  public:
  void clear_frozen() ;
  const ::cmd::Frozen& frozen() const;
  PROTOBUF_NODISCARD ::cmd::Frozen* release_frozen();
  ::cmd::Frozen* mutable_frozen();
  void set_allocated_frozen(::cmd::Frozen* value);
  void unsafe_arena_set_allocated_frozen(::cmd::Frozen* value);
  ::cmd::Frozen* unsafe_arena_release_frozen();

  private:
  const ::cmd::Frozen& _internal_frozen() const;
  ::cmd::Frozen* _internal_mutable_frozen();

  public:
  // .cmd.System.Root system = 31;
  bool has_system() const;
  private:
  bool _internal_has_system() const;

  public:
  void clear_system() ;
  const ::cmd::System::Root& system() const;
  PROTOBUF_NODISCARD ::cmd::System::Root* release_system();
  ::cmd::System::Root* mutable_system();
  void set_allocated_system(::cmd::System::Root* value);
  void unsafe_arena_set_allocated_system(::cmd::System::Root* value);
  ::cmd::System::Root* unsafe_arena_release_system();

  private:
  const ::cmd::System::Root& _internal_system() const;
  ::cmd::System::Root* _internal_mutable_system();

  public:
  // .cmd.CV.Root cv = 32;
  bool has_cv() const;
  private:
  bool _internal_has_cv() const;

  public:
  void clear_cv() ;
  const ::cmd::CV::Root& cv() const;
  PROTOBUF_NODISCARD ::cmd::CV::Root* release_cv();
  ::cmd::CV::Root* mutable_cv();
  void set_allocated_cv(::cmd::CV::Root* value);
  void unsafe_arena_set_allocated_cv(::cmd::CV::Root* value);
  ::cmd::CV::Root* unsafe_arena_release_cv();

  private:
  const ::cmd::CV::Root& _internal_cv() const;
  ::cmd::CV::Root* _internal_mutable_cv();

  public:
  // .cmd.DayCamGlassHeater.Root day_cam_glass_heater = 33;
  bool has_day_cam_glass_heater() const;
  private:
  bool _internal_has_day_cam_glass_heater() const;

  public:
  void clear_day_cam_glass_heater() ;
  const ::cmd::DayCamGlassHeater::Root& day_cam_glass_heater() const;
  PROTOBUF_NODISCARD ::cmd::DayCamGlassHeater::Root* release_day_cam_glass_heater();
  ::cmd::DayCamGlassHeater::Root* mutable_day_cam_glass_heater();
  void set_allocated_day_cam_glass_heater(::cmd::DayCamGlassHeater::Root* value);
  void unsafe_arena_set_allocated_day_cam_glass_heater(::cmd::DayCamGlassHeater::Root* value);
  ::cmd::DayCamGlassHeater::Root* unsafe_arena_release_day_cam_glass_heater();

  private:
  const ::cmd::DayCamGlassHeater::Root& _internal_day_cam_glass_heater() const;
  ::cmd::DayCamGlassHeater::Root* _internal_mutable_day_cam_glass_heater();

  public:
  // .cmd.Lira.Root lira = 34;
  bool has_lira() const;
  private:
  bool _internal_has_lira() const;

  public:
  void clear_lira() ;
  const ::cmd::Lira::Root& lira() const;
  PROTOBUF_NODISCARD ::cmd::Lira::Root* release_lira();
  ::cmd::Lira::Root* mutable_lira();
  void set_allocated_lira(::cmd::Lira::Root* value);
  void unsafe_arena_set_allocated_lira(::cmd::Lira::Root* value);
  ::cmd::Lira::Root* unsafe_arena_release_lira();

  private:
  const ::cmd::Lira::Root& _internal_lira() const;
  ::cmd::Lira::Root* _internal_mutable_lira();

  public:
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:cmd.Root)
 private:
  class _Internal;
  void set_has_day_camera();
  void set_has_heat_camera();
  void set_has_gps();
  void set_has_compass();
  void set_has_lrf();
  void set_has_lrf_calib();
  void set_has_rotary();
  void set_has_osd();
  void set_has_ping();
  void set_has_noop();
  void set_has_frozen();
  void set_has_system();
  void set_has_cv();
  void set_has_day_cam_glass_heater();
  void set_has_lira();
  inline bool has_payload() const;
  inline void clear_has_payload();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 20, 15,
      0, 7>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Root& from_msg);
    ::uint32_t protocol_version_;
    ::uint32_t session_id_;
    bool important_;
    bool from_cv_subsystem_;
    int client_type_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::cmd::DayCamera::Root* day_camera_;
      ::cmd::HeatCamera::Root* heat_camera_;
      ::cmd::Gps::Root* gps_;
      ::cmd::Compass::Root* compass_;
      ::cmd::Lrf::Root* lrf_;
      ::cmd::Lrf_calib::Root* lrf_calib_;
      ::cmd::RotaryPlatform::Root* rotary_;
      ::cmd::OSD::Root* osd_;
      ::cmd::Ping* ping_;
      ::cmd::Noop* noop_;
      ::cmd::Frozen* frozen_;
      ::cmd::System::Root* system_;
      ::cmd::CV::Root* cv_;
      ::cmd::DayCamGlassHeater::Root* day_cam_glass_heater_;
      ::cmd::Lira::Root* lira_;
    } payload_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Root

// uint32 protocol_version = 1;
inline void Root::clear_protocol_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_version_ = 0u;
}
inline ::uint32_t Root::protocol_version() const {
  // @@protoc_insertion_point(field_get:cmd.Root.protocol_version)
  return _internal_protocol_version();
}
inline void Root::set_protocol_version(::uint32_t value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:cmd.Root.protocol_version)
}
inline ::uint32_t Root::_internal_protocol_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.protocol_version_;
}
inline void Root::_internal_set_protocol_version(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.protocol_version_ = value;
}

// uint32 session_id = 2;
inline void Root::clear_session_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_ = 0u;
}
inline ::uint32_t Root::session_id() const {
  // @@protoc_insertion_point(field_get:cmd.Root.session_id)
  return _internal_session_id();
}
inline void Root::set_session_id(::uint32_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:cmd.Root.session_id)
}
inline ::uint32_t Root::_internal_session_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_id_;
}
inline void Root::_internal_set_session_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_id_ = value;
}

// bool important = 3;
inline void Root::clear_important() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.important_ = false;
}
inline bool Root::important() const {
  // @@protoc_insertion_point(field_get:cmd.Root.important)
  return _internal_important();
}
inline void Root::set_important(bool value) {
  _internal_set_important(value);
  // @@protoc_insertion_point(field_set:cmd.Root.important)
}
inline bool Root::_internal_important() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.important_;
}
inline void Root::_internal_set_important(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.important_ = value;
}

// bool from_cv_subsystem = 4;
inline void Root::clear_from_cv_subsystem() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_cv_subsystem_ = false;
}
inline bool Root::from_cv_subsystem() const {
  // @@protoc_insertion_point(field_get:cmd.Root.from_cv_subsystem)
  return _internal_from_cv_subsystem();
}
inline void Root::set_from_cv_subsystem(bool value) {
  _internal_set_from_cv_subsystem(value);
  // @@protoc_insertion_point(field_set:cmd.Root.from_cv_subsystem)
}
inline bool Root::_internal_from_cv_subsystem() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.from_cv_subsystem_;
}
inline void Root::_internal_set_from_cv_subsystem(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_cv_subsystem_ = value;
}

// .ser.JonGuiDataClientType client_type = 5;
inline void Root::clear_client_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_type_ = 0;
}
inline ::ser::JonGuiDataClientType Root::client_type() const {
  // @@protoc_insertion_point(field_get:cmd.Root.client_type)
  return _internal_client_type();
}
inline void Root::set_client_type(::ser::JonGuiDataClientType value) {
  _internal_set_client_type(value);
  // @@protoc_insertion_point(field_set:cmd.Root.client_type)
}
inline ::ser::JonGuiDataClientType Root::_internal_client_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ser::JonGuiDataClientType>(_impl_.client_type_);
}
inline void Root::_internal_set_client_type(::ser::JonGuiDataClientType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_type_ = value;
}

// .cmd.DayCamera.Root day_camera = 20;
inline bool Root::has_day_camera() const {
  return payload_case() == kDayCamera;
}
inline bool Root::_internal_has_day_camera() const {
  return payload_case() == kDayCamera;
}
inline void Root::set_has_day_camera() {
  _impl_._oneof_case_[0] = kDayCamera;
}
inline ::cmd::DayCamera::Root* Root::release_day_camera() {
  // @@protoc_insertion_point(field_release:cmd.Root.day_camera)
  if (payload_case() == kDayCamera) {
    clear_has_payload();
    auto* temp = _impl_.payload_.day_camera_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.day_camera_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamera::Root& Root::_internal_day_camera() const {
  return payload_case() == kDayCamera ? *_impl_.payload_.day_camera_ : reinterpret_cast<::cmd::DayCamera::Root&>(::cmd::DayCamera::_Root_default_instance_);
}
inline const ::cmd::DayCamera::Root& Root::day_camera() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Root.day_camera)
  return _internal_day_camera();
}
inline ::cmd::DayCamera::Root* Root::unsafe_arena_release_day_camera() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Root.day_camera)
  if (payload_case() == kDayCamera) {
    clear_has_payload();
    auto* temp = _impl_.payload_.day_camera_;
    _impl_.payload_.day_camera_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_day_camera(::cmd::DayCamera::Root* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_day_camera();
    _impl_.payload_.day_camera_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Root.day_camera)
}
inline ::cmd::DayCamera::Root* Root::_internal_mutable_day_camera() {
  if (payload_case() != kDayCamera) {
    clear_payload();
    set_has_day_camera();
    _impl_.payload_.day_camera_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamera::Root>(GetArena());
  }
  return _impl_.payload_.day_camera_;
}
inline ::cmd::DayCamera::Root* Root::mutable_day_camera() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamera::Root* _msg = _internal_mutable_day_camera();
  // @@protoc_insertion_point(field_mutable:cmd.Root.day_camera)
  return _msg;
}

// .cmd.HeatCamera.Root heat_camera = 21;
inline bool Root::has_heat_camera() const {
  return payload_case() == kHeatCamera;
}
inline bool Root::_internal_has_heat_camera() const {
  return payload_case() == kHeatCamera;
}
inline void Root::set_has_heat_camera() {
  _impl_._oneof_case_[0] = kHeatCamera;
}
inline ::cmd::HeatCamera::Root* Root::release_heat_camera() {
  // @@protoc_insertion_point(field_release:cmd.Root.heat_camera)
  if (payload_case() == kHeatCamera) {
    clear_has_payload();
    auto* temp = _impl_.payload_.heat_camera_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.heat_camera_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::HeatCamera::Root& Root::_internal_heat_camera() const {
  return payload_case() == kHeatCamera ? *_impl_.payload_.heat_camera_ : reinterpret_cast<::cmd::HeatCamera::Root&>(::cmd::HeatCamera::_Root_default_instance_);
}
inline const ::cmd::HeatCamera::Root& Root::heat_camera() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Root.heat_camera)
  return _internal_heat_camera();
}
inline ::cmd::HeatCamera::Root* Root::unsafe_arena_release_heat_camera() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Root.heat_camera)
  if (payload_case() == kHeatCamera) {
    clear_has_payload();
    auto* temp = _impl_.payload_.heat_camera_;
    _impl_.payload_.heat_camera_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_heat_camera(::cmd::HeatCamera::Root* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_heat_camera();
    _impl_.payload_.heat_camera_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Root.heat_camera)
}
inline ::cmd::HeatCamera::Root* Root::_internal_mutable_heat_camera() {
  if (payload_case() != kHeatCamera) {
    clear_payload();
    set_has_heat_camera();
    _impl_.payload_.heat_camera_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::HeatCamera::Root>(GetArena());
  }
  return _impl_.payload_.heat_camera_;
}
inline ::cmd::HeatCamera::Root* Root::mutable_heat_camera() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::HeatCamera::Root* _msg = _internal_mutable_heat_camera();
  // @@protoc_insertion_point(field_mutable:cmd.Root.heat_camera)
  return _msg;
}

// .cmd.Gps.Root gps = 22;
inline bool Root::has_gps() const {
  return payload_case() == kGps;
}
inline bool Root::_internal_has_gps() const {
  return payload_case() == kGps;
}
inline void Root::set_has_gps() {
  _impl_._oneof_case_[0] = kGps;
}
inline ::cmd::Gps::Root* Root::release_gps() {
  // @@protoc_insertion_point(field_release:cmd.Root.gps)
  if (payload_case() == kGps) {
    clear_has_payload();
    auto* temp = _impl_.payload_.gps_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.gps_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::Gps::Root& Root::_internal_gps() const {
  return payload_case() == kGps ? *_impl_.payload_.gps_ : reinterpret_cast<::cmd::Gps::Root&>(::cmd::Gps::_Root_default_instance_);
}
inline const ::cmd::Gps::Root& Root::gps() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Root.gps)
  return _internal_gps();
}
inline ::cmd::Gps::Root* Root::unsafe_arena_release_gps() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Root.gps)
  if (payload_case() == kGps) {
    clear_has_payload();
    auto* temp = _impl_.payload_.gps_;
    _impl_.payload_.gps_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_gps(::cmd::Gps::Root* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_gps();
    _impl_.payload_.gps_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Root.gps)
}
inline ::cmd::Gps::Root* Root::_internal_mutable_gps() {
  if (payload_case() != kGps) {
    clear_payload();
    set_has_gps();
    _impl_.payload_.gps_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::Gps::Root>(GetArena());
  }
  return _impl_.payload_.gps_;
}
inline ::cmd::Gps::Root* Root::mutable_gps() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::Gps::Root* _msg = _internal_mutable_gps();
  // @@protoc_insertion_point(field_mutable:cmd.Root.gps)
  return _msg;
}

// .cmd.Compass.Root compass = 23;
inline bool Root::has_compass() const {
  return payload_case() == kCompass;
}
inline bool Root::_internal_has_compass() const {
  return payload_case() == kCompass;
}
inline void Root::set_has_compass() {
  _impl_._oneof_case_[0] = kCompass;
}
inline ::cmd::Compass::Root* Root::release_compass() {
  // @@protoc_insertion_point(field_release:cmd.Root.compass)
  if (payload_case() == kCompass) {
    clear_has_payload();
    auto* temp = _impl_.payload_.compass_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.compass_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::Compass::Root& Root::_internal_compass() const {
  return payload_case() == kCompass ? *_impl_.payload_.compass_ : reinterpret_cast<::cmd::Compass::Root&>(::cmd::Compass::_Root_default_instance_);
}
inline const ::cmd::Compass::Root& Root::compass() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Root.compass)
  return _internal_compass();
}
inline ::cmd::Compass::Root* Root::unsafe_arena_release_compass() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Root.compass)
  if (payload_case() == kCompass) {
    clear_has_payload();
    auto* temp = _impl_.payload_.compass_;
    _impl_.payload_.compass_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_compass(::cmd::Compass::Root* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_compass();
    _impl_.payload_.compass_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Root.compass)
}
inline ::cmd::Compass::Root* Root::_internal_mutable_compass() {
  if (payload_case() != kCompass) {
    clear_payload();
    set_has_compass();
    _impl_.payload_.compass_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::Compass::Root>(GetArena());
  }
  return _impl_.payload_.compass_;
}
inline ::cmd::Compass::Root* Root::mutable_compass() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::Compass::Root* _msg = _internal_mutable_compass();
  // @@protoc_insertion_point(field_mutable:cmd.Root.compass)
  return _msg;
}

// .cmd.Lrf.Root lrf = 24;
inline bool Root::has_lrf() const {
  return payload_case() == kLrf;
}
inline bool Root::_internal_has_lrf() const {
  return payload_case() == kLrf;
}
inline void Root::set_has_lrf() {
  _impl_._oneof_case_[0] = kLrf;
}
inline ::cmd::Lrf::Root* Root::release_lrf() {
  // @@protoc_insertion_point(field_release:cmd.Root.lrf)
  if (payload_case() == kLrf) {
    clear_has_payload();
    auto* temp = _impl_.payload_.lrf_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.lrf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::Lrf::Root& Root::_internal_lrf() const {
  return payload_case() == kLrf ? *_impl_.payload_.lrf_ : reinterpret_cast<::cmd::Lrf::Root&>(::cmd::Lrf::_Root_default_instance_);
}
inline const ::cmd::Lrf::Root& Root::lrf() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Root.lrf)
  return _internal_lrf();
}
inline ::cmd::Lrf::Root* Root::unsafe_arena_release_lrf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Root.lrf)
  if (payload_case() == kLrf) {
    clear_has_payload();
    auto* temp = _impl_.payload_.lrf_;
    _impl_.payload_.lrf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_lrf(::cmd::Lrf::Root* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_lrf();
    _impl_.payload_.lrf_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Root.lrf)
}
inline ::cmd::Lrf::Root* Root::_internal_mutable_lrf() {
  if (payload_case() != kLrf) {
    clear_payload();
    set_has_lrf();
    _impl_.payload_.lrf_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::Lrf::Root>(GetArena());
  }
  return _impl_.payload_.lrf_;
}
inline ::cmd::Lrf::Root* Root::mutable_lrf() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::Lrf::Root* _msg = _internal_mutable_lrf();
  // @@protoc_insertion_point(field_mutable:cmd.Root.lrf)
  return _msg;
}

// .cmd.Lrf_calib.Root lrf_calib = 25;
inline bool Root::has_lrf_calib() const {
  return payload_case() == kLrfCalib;
}
inline bool Root::_internal_has_lrf_calib() const {
  return payload_case() == kLrfCalib;
}
inline void Root::set_has_lrf_calib() {
  _impl_._oneof_case_[0] = kLrfCalib;
}
inline ::cmd::Lrf_calib::Root* Root::release_lrf_calib() {
  // @@protoc_insertion_point(field_release:cmd.Root.lrf_calib)
  if (payload_case() == kLrfCalib) {
    clear_has_payload();
    auto* temp = _impl_.payload_.lrf_calib_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.lrf_calib_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::Lrf_calib::Root& Root::_internal_lrf_calib() const {
  return payload_case() == kLrfCalib ? *_impl_.payload_.lrf_calib_ : reinterpret_cast<::cmd::Lrf_calib::Root&>(::cmd::Lrf_calib::_Root_default_instance_);
}
inline const ::cmd::Lrf_calib::Root& Root::lrf_calib() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Root.lrf_calib)
  return _internal_lrf_calib();
}
inline ::cmd::Lrf_calib::Root* Root::unsafe_arena_release_lrf_calib() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Root.lrf_calib)
  if (payload_case() == kLrfCalib) {
    clear_has_payload();
    auto* temp = _impl_.payload_.lrf_calib_;
    _impl_.payload_.lrf_calib_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_lrf_calib(::cmd::Lrf_calib::Root* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_lrf_calib();
    _impl_.payload_.lrf_calib_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Root.lrf_calib)
}
inline ::cmd::Lrf_calib::Root* Root::_internal_mutable_lrf_calib() {
  if (payload_case() != kLrfCalib) {
    clear_payload();
    set_has_lrf_calib();
    _impl_.payload_.lrf_calib_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::Lrf_calib::Root>(GetArena());
  }
  return _impl_.payload_.lrf_calib_;
}
inline ::cmd::Lrf_calib::Root* Root::mutable_lrf_calib() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::Lrf_calib::Root* _msg = _internal_mutable_lrf_calib();
  // @@protoc_insertion_point(field_mutable:cmd.Root.lrf_calib)
  return _msg;
}

// .cmd.RotaryPlatform.Root rotary = 26;
inline bool Root::has_rotary() const {
  return payload_case() == kRotary;
}
inline bool Root::_internal_has_rotary() const {
  return payload_case() == kRotary;
}
inline void Root::set_has_rotary() {
  _impl_._oneof_case_[0] = kRotary;
}
inline ::cmd::RotaryPlatform::Root* Root::release_rotary() {
  // @@protoc_insertion_point(field_release:cmd.Root.rotary)
  if (payload_case() == kRotary) {
    clear_has_payload();
    auto* temp = _impl_.payload_.rotary_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.rotary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::RotaryPlatform::Root& Root::_internal_rotary() const {
  return payload_case() == kRotary ? *_impl_.payload_.rotary_ : reinterpret_cast<::cmd::RotaryPlatform::Root&>(::cmd::RotaryPlatform::_Root_default_instance_);
}
inline const ::cmd::RotaryPlatform::Root& Root::rotary() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Root.rotary)
  return _internal_rotary();
}
inline ::cmd::RotaryPlatform::Root* Root::unsafe_arena_release_rotary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Root.rotary)
  if (payload_case() == kRotary) {
    clear_has_payload();
    auto* temp = _impl_.payload_.rotary_;
    _impl_.payload_.rotary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_rotary(::cmd::RotaryPlatform::Root* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_rotary();
    _impl_.payload_.rotary_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Root.rotary)
}
inline ::cmd::RotaryPlatform::Root* Root::_internal_mutable_rotary() {
  if (payload_case() != kRotary) {
    clear_payload();
    set_has_rotary();
    _impl_.payload_.rotary_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::RotaryPlatform::Root>(GetArena());
  }
  return _impl_.payload_.rotary_;
}
inline ::cmd::RotaryPlatform::Root* Root::mutable_rotary() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::RotaryPlatform::Root* _msg = _internal_mutable_rotary();
  // @@protoc_insertion_point(field_mutable:cmd.Root.rotary)
  return _msg;
}

// .cmd.OSD.Root osd = 27;
inline bool Root::has_osd() const {
  return payload_case() == kOsd;
}
inline bool Root::_internal_has_osd() const {
  return payload_case() == kOsd;
}
inline void Root::set_has_osd() {
  _impl_._oneof_case_[0] = kOsd;
}
inline ::cmd::OSD::Root* Root::release_osd() {
  // @@protoc_insertion_point(field_release:cmd.Root.osd)
  if (payload_case() == kOsd) {
    clear_has_payload();
    auto* temp = _impl_.payload_.osd_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.osd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::OSD::Root& Root::_internal_osd() const {
  return payload_case() == kOsd ? *_impl_.payload_.osd_ : reinterpret_cast<::cmd::OSD::Root&>(::cmd::OSD::_Root_default_instance_);
}
inline const ::cmd::OSD::Root& Root::osd() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Root.osd)
  return _internal_osd();
}
inline ::cmd::OSD::Root* Root::unsafe_arena_release_osd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Root.osd)
  if (payload_case() == kOsd) {
    clear_has_payload();
    auto* temp = _impl_.payload_.osd_;
    _impl_.payload_.osd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_osd(::cmd::OSD::Root* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_osd();
    _impl_.payload_.osd_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Root.osd)
}
inline ::cmd::OSD::Root* Root::_internal_mutable_osd() {
  if (payload_case() != kOsd) {
    clear_payload();
    set_has_osd();
    _impl_.payload_.osd_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::OSD::Root>(GetArena());
  }
  return _impl_.payload_.osd_;
}
inline ::cmd::OSD::Root* Root::mutable_osd() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::OSD::Root* _msg = _internal_mutable_osd();
  // @@protoc_insertion_point(field_mutable:cmd.Root.osd)
  return _msg;
}

// .cmd.Ping ping = 28;
inline bool Root::has_ping() const {
  return payload_case() == kPing;
}
inline bool Root::_internal_has_ping() const {
  return payload_case() == kPing;
}
inline void Root::set_has_ping() {
  _impl_._oneof_case_[0] = kPing;
}
inline void Root::clear_ping() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kPing) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.ping_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.ping_);
    }
    clear_has_payload();
  }
}
inline ::cmd::Ping* Root::release_ping() {
  // @@protoc_insertion_point(field_release:cmd.Root.ping)
  if (payload_case() == kPing) {
    clear_has_payload();
    auto* temp = _impl_.payload_.ping_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::Ping& Root::_internal_ping() const {
  return payload_case() == kPing ? *_impl_.payload_.ping_ : reinterpret_cast<::cmd::Ping&>(::cmd::_Ping_default_instance_);
}
inline const ::cmd::Ping& Root::ping() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Root.ping)
  return _internal_ping();
}
inline ::cmd::Ping* Root::unsafe_arena_release_ping() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Root.ping)
  if (payload_case() == kPing) {
    clear_has_payload();
    auto* temp = _impl_.payload_.ping_;
    _impl_.payload_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_ping(::cmd::Ping* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_ping();
    _impl_.payload_.ping_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Root.ping)
}
inline ::cmd::Ping* Root::_internal_mutable_ping() {
  if (payload_case() != kPing) {
    clear_payload();
    set_has_ping();
    _impl_.payload_.ping_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::Ping>(GetArena());
  }
  return _impl_.payload_.ping_;
}
inline ::cmd::Ping* Root::mutable_ping() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::Ping* _msg = _internal_mutable_ping();
  // @@protoc_insertion_point(field_mutable:cmd.Root.ping)
  return _msg;
}

// .cmd.Noop noop = 29;
inline bool Root::has_noop() const {
  return payload_case() == kNoop;
}
inline bool Root::_internal_has_noop() const {
  return payload_case() == kNoop;
}
inline void Root::set_has_noop() {
  _impl_._oneof_case_[0] = kNoop;
}
inline void Root::clear_noop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kNoop) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.noop_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.noop_);
    }
    clear_has_payload();
  }
}
inline ::cmd::Noop* Root::release_noop() {
  // @@protoc_insertion_point(field_release:cmd.Root.noop)
  if (payload_case() == kNoop) {
    clear_has_payload();
    auto* temp = _impl_.payload_.noop_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.noop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::Noop& Root::_internal_noop() const {
  return payload_case() == kNoop ? *_impl_.payload_.noop_ : reinterpret_cast<::cmd::Noop&>(::cmd::_Noop_default_instance_);
}
inline const ::cmd::Noop& Root::noop() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Root.noop)
  return _internal_noop();
}
inline ::cmd::Noop* Root::unsafe_arena_release_noop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Root.noop)
  if (payload_case() == kNoop) {
    clear_has_payload();
    auto* temp = _impl_.payload_.noop_;
    _impl_.payload_.noop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_noop(::cmd::Noop* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_noop();
    _impl_.payload_.noop_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Root.noop)
}
inline ::cmd::Noop* Root::_internal_mutable_noop() {
  if (payload_case() != kNoop) {
    clear_payload();
    set_has_noop();
    _impl_.payload_.noop_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::Noop>(GetArena());
  }
  return _impl_.payload_.noop_;
}
inline ::cmd::Noop* Root::mutable_noop() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::Noop* _msg = _internal_mutable_noop();
  // @@protoc_insertion_point(field_mutable:cmd.Root.noop)
  return _msg;
}

// .cmd.Frozen frozen = 30;
inline bool Root::has_frozen() const {
  return payload_case() == kFrozen;
}
inline bool Root::_internal_has_frozen() const {
  return payload_case() == kFrozen;
}
inline void Root::set_has_frozen() {
  _impl_._oneof_case_[0] = kFrozen;
}
inline void Root::clear_frozen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kFrozen) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.frozen_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.frozen_);
    }
    clear_has_payload();
  }
}
inline ::cmd::Frozen* Root::release_frozen() {
  // @@protoc_insertion_point(field_release:cmd.Root.frozen)
  if (payload_case() == kFrozen) {
    clear_has_payload();
    auto* temp = _impl_.payload_.frozen_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.frozen_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::Frozen& Root::_internal_frozen() const {
  return payload_case() == kFrozen ? *_impl_.payload_.frozen_ : reinterpret_cast<::cmd::Frozen&>(::cmd::_Frozen_default_instance_);
}
inline const ::cmd::Frozen& Root::frozen() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Root.frozen)
  return _internal_frozen();
}
inline ::cmd::Frozen* Root::unsafe_arena_release_frozen() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Root.frozen)
  if (payload_case() == kFrozen) {
    clear_has_payload();
    auto* temp = _impl_.payload_.frozen_;
    _impl_.payload_.frozen_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_frozen(::cmd::Frozen* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_frozen();
    _impl_.payload_.frozen_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Root.frozen)
}
inline ::cmd::Frozen* Root::_internal_mutable_frozen() {
  if (payload_case() != kFrozen) {
    clear_payload();
    set_has_frozen();
    _impl_.payload_.frozen_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::Frozen>(GetArena());
  }
  return _impl_.payload_.frozen_;
}
inline ::cmd::Frozen* Root::mutable_frozen() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::Frozen* _msg = _internal_mutable_frozen();
  // @@protoc_insertion_point(field_mutable:cmd.Root.frozen)
  return _msg;
}

// .cmd.System.Root system = 31;
inline bool Root::has_system() const {
  return payload_case() == kSystem;
}
inline bool Root::_internal_has_system() const {
  return payload_case() == kSystem;
}
inline void Root::set_has_system() {
  _impl_._oneof_case_[0] = kSystem;
}
inline ::cmd::System::Root* Root::release_system() {
  // @@protoc_insertion_point(field_release:cmd.Root.system)
  if (payload_case() == kSystem) {
    clear_has_payload();
    auto* temp = _impl_.payload_.system_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.system_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::System::Root& Root::_internal_system() const {
  return payload_case() == kSystem ? *_impl_.payload_.system_ : reinterpret_cast<::cmd::System::Root&>(::cmd::System::_Root_default_instance_);
}
inline const ::cmd::System::Root& Root::system() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Root.system)
  return _internal_system();
}
inline ::cmd::System::Root* Root::unsafe_arena_release_system() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Root.system)
  if (payload_case() == kSystem) {
    clear_has_payload();
    auto* temp = _impl_.payload_.system_;
    _impl_.payload_.system_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_system(::cmd::System::Root* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_system();
    _impl_.payload_.system_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Root.system)
}
inline ::cmd::System::Root* Root::_internal_mutable_system() {
  if (payload_case() != kSystem) {
    clear_payload();
    set_has_system();
    _impl_.payload_.system_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::System::Root>(GetArena());
  }
  return _impl_.payload_.system_;
}
inline ::cmd::System::Root* Root::mutable_system() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::System::Root* _msg = _internal_mutable_system();
  // @@protoc_insertion_point(field_mutable:cmd.Root.system)
  return _msg;
}

// .cmd.CV.Root cv = 32;
inline bool Root::has_cv() const {
  return payload_case() == kCv;
}
inline bool Root::_internal_has_cv() const {
  return payload_case() == kCv;
}
inline void Root::set_has_cv() {
  _impl_._oneof_case_[0] = kCv;
}
inline ::cmd::CV::Root* Root::release_cv() {
  // @@protoc_insertion_point(field_release:cmd.Root.cv)
  if (payload_case() == kCv) {
    clear_has_payload();
    auto* temp = _impl_.payload_.cv_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.cv_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::CV::Root& Root::_internal_cv() const {
  return payload_case() == kCv ? *_impl_.payload_.cv_ : reinterpret_cast<::cmd::CV::Root&>(::cmd::CV::_Root_default_instance_);
}
inline const ::cmd::CV::Root& Root::cv() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Root.cv)
  return _internal_cv();
}
inline ::cmd::CV::Root* Root::unsafe_arena_release_cv() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Root.cv)
  if (payload_case() == kCv) {
    clear_has_payload();
    auto* temp = _impl_.payload_.cv_;
    _impl_.payload_.cv_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_cv(::cmd::CV::Root* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_cv();
    _impl_.payload_.cv_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Root.cv)
}
inline ::cmd::CV::Root* Root::_internal_mutable_cv() {
  if (payload_case() != kCv) {
    clear_payload();
    set_has_cv();
    _impl_.payload_.cv_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::CV::Root>(GetArena());
  }
  return _impl_.payload_.cv_;
}
inline ::cmd::CV::Root* Root::mutable_cv() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::CV::Root* _msg = _internal_mutable_cv();
  // @@protoc_insertion_point(field_mutable:cmd.Root.cv)
  return _msg;
}

// .cmd.DayCamGlassHeater.Root day_cam_glass_heater = 33;
inline bool Root::has_day_cam_glass_heater() const {
  return payload_case() == kDayCamGlassHeater;
}
inline bool Root::_internal_has_day_cam_glass_heater() const {
  return payload_case() == kDayCamGlassHeater;
}
inline void Root::set_has_day_cam_glass_heater() {
  _impl_._oneof_case_[0] = kDayCamGlassHeater;
}
inline ::cmd::DayCamGlassHeater::Root* Root::release_day_cam_glass_heater() {
  // @@protoc_insertion_point(field_release:cmd.Root.day_cam_glass_heater)
  if (payload_case() == kDayCamGlassHeater) {
    clear_has_payload();
    auto* temp = _impl_.payload_.day_cam_glass_heater_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.day_cam_glass_heater_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamGlassHeater::Root& Root::_internal_day_cam_glass_heater() const {
  return payload_case() == kDayCamGlassHeater ? *_impl_.payload_.day_cam_glass_heater_ : reinterpret_cast<::cmd::DayCamGlassHeater::Root&>(::cmd::DayCamGlassHeater::_Root_default_instance_);
}
inline const ::cmd::DayCamGlassHeater::Root& Root::day_cam_glass_heater() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Root.day_cam_glass_heater)
  return _internal_day_cam_glass_heater();
}
inline ::cmd::DayCamGlassHeater::Root* Root::unsafe_arena_release_day_cam_glass_heater() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Root.day_cam_glass_heater)
  if (payload_case() == kDayCamGlassHeater) {
    clear_has_payload();
    auto* temp = _impl_.payload_.day_cam_glass_heater_;
    _impl_.payload_.day_cam_glass_heater_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_day_cam_glass_heater(::cmd::DayCamGlassHeater::Root* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_day_cam_glass_heater();
    _impl_.payload_.day_cam_glass_heater_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Root.day_cam_glass_heater)
}
inline ::cmd::DayCamGlassHeater::Root* Root::_internal_mutable_day_cam_glass_heater() {
  if (payload_case() != kDayCamGlassHeater) {
    clear_payload();
    set_has_day_cam_glass_heater();
    _impl_.payload_.day_cam_glass_heater_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamGlassHeater::Root>(GetArena());
  }
  return _impl_.payload_.day_cam_glass_heater_;
}
inline ::cmd::DayCamGlassHeater::Root* Root::mutable_day_cam_glass_heater() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamGlassHeater::Root* _msg = _internal_mutable_day_cam_glass_heater();
  // @@protoc_insertion_point(field_mutable:cmd.Root.day_cam_glass_heater)
  return _msg;
}

// .cmd.Lira.Root lira = 34;
inline bool Root::has_lira() const {
  return payload_case() == kLira;
}
inline bool Root::_internal_has_lira() const {
  return payload_case() == kLira;
}
inline void Root::set_has_lira() {
  _impl_._oneof_case_[0] = kLira;
}
inline ::cmd::Lira::Root* Root::release_lira() {
  // @@protoc_insertion_point(field_release:cmd.Root.lira)
  if (payload_case() == kLira) {
    clear_has_payload();
    auto* temp = _impl_.payload_.lira_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.lira_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::Lira::Root& Root::_internal_lira() const {
  return payload_case() == kLira ? *_impl_.payload_.lira_ : reinterpret_cast<::cmd::Lira::Root&>(::cmd::Lira::_Root_default_instance_);
}
inline const ::cmd::Lira::Root& Root::lira() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Root.lira)
  return _internal_lira();
}
inline ::cmd::Lira::Root* Root::unsafe_arena_release_lira() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Root.lira)
  if (payload_case() == kLira) {
    clear_has_payload();
    auto* temp = _impl_.payload_.lira_;
    _impl_.payload_.lira_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_lira(::cmd::Lira::Root* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_lira();
    _impl_.payload_.lira_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Root.lira)
}
inline ::cmd::Lira::Root* Root::_internal_mutable_lira() {
  if (payload_case() != kLira) {
    clear_payload();
    set_has_lira();
    _impl_.payload_.lira_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::Lira::Root>(GetArena());
  }
  return _impl_.payload_.lira_;
}
inline ::cmd::Lira::Root* Root::mutable_lira() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::Lira::Root* _msg = _internal_mutable_lira();
  // @@protoc_insertion_point(field_mutable:cmd.Root.lira)
  return _msg;
}

inline bool Root::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Root::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Root::PayloadCase Root::payload_case() const {
  return Root::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Ping

// -------------------------------------------------------------------

// Noop

// -------------------------------------------------------------------

// Frozen

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace cmd


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // jon_5fshared_5fcmd_2eproto_2epb_2eh
