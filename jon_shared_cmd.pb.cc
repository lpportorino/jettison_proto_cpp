// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: jon_shared_cmd.proto
// Protobuf C++ Version: 5.29.2

#include "jon_shared_cmd.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace cmd {
              template <typename>
PROTOBUF_CONSTEXPR Ping::Ping(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct PingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PingDefaultTypeInternal() {}
  union {
    Ping _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PingDefaultTypeInternal _Ping_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR Noop::Noop(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct NoopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NoopDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NoopDefaultTypeInternal() {}
  union {
    Noop _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NoopDefaultTypeInternal _Noop_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR Frozen::Frozen(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct FrozenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrozenDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrozenDefaultTypeInternal() {}
  union {
    Frozen _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrozenDefaultTypeInternal _Frozen_default_instance_;

inline constexpr Root::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : protocol_version_{0u},
        session_id_{0u},
        important_{false},
        from_cv_subsystem_{false},
        client_type_{static_cast< ::ser::JonGuiDataClientType >(0)},
        payload_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Root::Root(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RootDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RootDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RootDefaultTypeInternal() {}
  union {
    Root _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RootDefaultTypeInternal _Root_default_instance_;
}  // namespace cmd
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_jon_5fshared_5fcmd_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_jon_5fshared_5fcmd_2eproto = nullptr;
const ::uint32_t
    TableStruct_jon_5fshared_5fcmd_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cmd::Root, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::cmd::Root, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::cmd::Root, _impl_.protocol_version_),
        PROTOBUF_FIELD_OFFSET(::cmd::Root, _impl_.session_id_),
        PROTOBUF_FIELD_OFFSET(::cmd::Root, _impl_.important_),
        PROTOBUF_FIELD_OFFSET(::cmd::Root, _impl_.from_cv_subsystem_),
        PROTOBUF_FIELD_OFFSET(::cmd::Root, _impl_.client_type_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::cmd::Root, _impl_.payload_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cmd::Ping, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cmd::Noop, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cmd::Frozen, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::cmd::Root)},
        {29, -1, -1, sizeof(::cmd::Ping)},
        {37, -1, -1, sizeof(::cmd::Noop)},
        {45, -1, -1, sizeof(::cmd::Frozen)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::cmd::_Root_default_instance_._instance,
    &::cmd::_Ping_default_instance_._instance,
    &::cmd::_Noop_default_instance_._instance,
    &::cmd::_Frozen_default_instance_._instance,
};
const char descriptor_table_protodef_jon_5fshared_5fcmd_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\024jon_shared_cmd.proto\022\003cmd\032\034jon_shared_"
    "cmd_compass.proto\032\030jon_shared_cmd_gps.pr"
    "oto\032\030jon_shared_cmd_lrf.proto\032\037jon_share"
    "d_cmd_day_camera.proto\032 jon_shared_cmd_h"
    "eat_camera.proto\032\033jon_shared_cmd_rotary."
    "proto\032\030jon_shared_cmd_osd.proto\032\036jon_sha"
    "red_cmd_lrf_align.proto\032\033jon_shared_cmd_"
    "system.proto\032\027jon_shared_cmd_cv.proto\032)j"
    "on_shared_cmd_day_cam_glass_heater.proto"
    "\032\031jon_shared_cmd_lira.proto\032\033jon_shared_"
    "data_types.proto\"\303\005\n\004Root\022\030\n\020protocol_ve"
    "rsion\030\001 \001(\r\022\022\n\nsession_id\030\002 \001(\r\022\021\n\timpor"
    "tant\030\003 \001(\010\022\031\n\021from_cv_subsystem\030\004 \001(\010\022.\n"
    "\013client_type\030\005 \001(\0162\031.ser.JonGuiDataClien"
    "tType\022)\n\nday_camera\030\024 \001(\0132\023.cmd.DayCamer"
    "a.RootH\000\022+\n\013heat_camera\030\025 \001(\0132\024.cmd.Heat"
    "Camera.RootH\000\022\034\n\003gps\030\026 \001(\0132\r.cmd.Gps.Roo"
    "tH\000\022$\n\007compass\030\027 \001(\0132\021.cmd.Compass.RootH"
    "\000\022\034\n\003lrf\030\030 \001(\0132\r.cmd.Lrf.RootH\000\022(\n\tlrf_c"
    "alib\030\031 \001(\0132\023.cmd.Lrf_calib.RootH\000\022*\n\006rot"
    "ary\030\032 \001(\0132\030.cmd.RotaryPlatform.RootH\000\022\034\n"
    "\003osd\030\033 \001(\0132\r.cmd.OSD.RootH\000\022\031\n\004ping\030\034 \001("
    "\0132\t.cmd.PingH\000\022\031\n\004noop\030\035 \001(\0132\t.cmd.NoopH"
    "\000\022\035\n\006frozen\030\036 \001(\0132\013.cmd.FrozenH\000\022\"\n\006syst"
    "em\030\037 \001(\0132\020.cmd.System.RootH\000\022\032\n\002cv\030  \001(\013"
    "2\014.cmd.CV.RootH\000\022;\n\024day_cam_glass_heater"
    "\030! \001(\0132\033.cmd.DayCamGlassHeater.RootH\000\022\036\n"
    "\004lira\030\" \001(\0132\016.cmd.Lira.RootH\000B\t\n\007payload"
    "J\004\010\006\020\024\"\006\n\004Ping\"\006\n\004Noop\"\010\n\006FrozenBFZDgit-"
    "codecommit.eu-central-1.amazonaws.com/v1"
    "/repos/jettison/jonp/cmdb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_jon_5fshared_5fcmd_2eproto_deps[13] =
    {
        &::descriptor_table_jon_5fshared_5fcmd_5fcompass_2eproto,
        &::descriptor_table_jon_5fshared_5fcmd_5fcv_2eproto,
        &::descriptor_table_jon_5fshared_5fcmd_5fday_5fcam_5fglass_5fheater_2eproto,
        &::descriptor_table_jon_5fshared_5fcmd_5fday_5fcamera_2eproto,
        &::descriptor_table_jon_5fshared_5fcmd_5fgps_2eproto,
        &::descriptor_table_jon_5fshared_5fcmd_5fheat_5fcamera_2eproto,
        &::descriptor_table_jon_5fshared_5fcmd_5flira_2eproto,
        &::descriptor_table_jon_5fshared_5fcmd_5flrf_2eproto,
        &::descriptor_table_jon_5fshared_5fcmd_5flrf_5falign_2eproto,
        &::descriptor_table_jon_5fshared_5fcmd_5fosd_2eproto,
        &::descriptor_table_jon_5fshared_5fcmd_5frotary_2eproto,
        &::descriptor_table_jon_5fshared_5fcmd_5fsystem_2eproto,
        &::descriptor_table_jon_5fshared_5fdata_5ftypes_2eproto,
};
static ::absl::once_flag descriptor_table_jon_5fshared_5fcmd_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_jon_5fshared_5fcmd_2eproto = {
    false,
    false,
    1232,
    descriptor_table_protodef_jon_5fshared_5fcmd_2eproto,
    "jon_shared_cmd.proto",
    &descriptor_table_jon_5fshared_5fcmd_2eproto_once,
    descriptor_table_jon_5fshared_5fcmd_2eproto_deps,
    13,
    4,
    schemas,
    file_default_instances,
    TableStruct_jon_5fshared_5fcmd_2eproto::offsets,
    file_level_enum_descriptors_jon_5fshared_5fcmd_2eproto,
    file_level_service_descriptors_jon_5fshared_5fcmd_2eproto,
};
namespace cmd {
// ===================================================================

class Root::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::cmd::Root, _impl_._oneof_case_);
};

void Root::set_allocated_day_camera(::cmd::DayCamera::Root* day_camera) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (day_camera) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(day_camera)->GetArena();
    if (message_arena != submessage_arena) {
      day_camera = ::google::protobuf::internal::GetOwnedMessage(message_arena, day_camera, submessage_arena);
    }
    set_has_day_camera();
    _impl_.payload_.day_camera_ = day_camera;
  }
  // @@protoc_insertion_point(field_set_allocated:cmd.Root.day_camera)
}
void Root::clear_day_camera() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kDayCamera) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.day_camera_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.day_camera_);
    }
    clear_has_payload();
  }
}
void Root::set_allocated_heat_camera(::cmd::HeatCamera::Root* heat_camera) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (heat_camera) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(heat_camera)->GetArena();
    if (message_arena != submessage_arena) {
      heat_camera = ::google::protobuf::internal::GetOwnedMessage(message_arena, heat_camera, submessage_arena);
    }
    set_has_heat_camera();
    _impl_.payload_.heat_camera_ = heat_camera;
  }
  // @@protoc_insertion_point(field_set_allocated:cmd.Root.heat_camera)
}
void Root::clear_heat_camera() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kHeatCamera) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.heat_camera_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.heat_camera_);
    }
    clear_has_payload();
  }
}
void Root::set_allocated_gps(::cmd::Gps::Root* gps) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (gps) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(gps)->GetArena();
    if (message_arena != submessage_arena) {
      gps = ::google::protobuf::internal::GetOwnedMessage(message_arena, gps, submessage_arena);
    }
    set_has_gps();
    _impl_.payload_.gps_ = gps;
  }
  // @@protoc_insertion_point(field_set_allocated:cmd.Root.gps)
}
void Root::clear_gps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kGps) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.gps_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.gps_);
    }
    clear_has_payload();
  }
}
void Root::set_allocated_compass(::cmd::Compass::Root* compass) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (compass) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(compass)->GetArena();
    if (message_arena != submessage_arena) {
      compass = ::google::protobuf::internal::GetOwnedMessage(message_arena, compass, submessage_arena);
    }
    set_has_compass();
    _impl_.payload_.compass_ = compass;
  }
  // @@protoc_insertion_point(field_set_allocated:cmd.Root.compass)
}
void Root::clear_compass() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kCompass) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.compass_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.compass_);
    }
    clear_has_payload();
  }
}
void Root::set_allocated_lrf(::cmd::Lrf::Root* lrf) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (lrf) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(lrf)->GetArena();
    if (message_arena != submessage_arena) {
      lrf = ::google::protobuf::internal::GetOwnedMessage(message_arena, lrf, submessage_arena);
    }
    set_has_lrf();
    _impl_.payload_.lrf_ = lrf;
  }
  // @@protoc_insertion_point(field_set_allocated:cmd.Root.lrf)
}
void Root::clear_lrf() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kLrf) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.lrf_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.lrf_);
    }
    clear_has_payload();
  }
}
void Root::set_allocated_lrf_calib(::cmd::Lrf_calib::Root* lrf_calib) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (lrf_calib) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(lrf_calib)->GetArena();
    if (message_arena != submessage_arena) {
      lrf_calib = ::google::protobuf::internal::GetOwnedMessage(message_arena, lrf_calib, submessage_arena);
    }
    set_has_lrf_calib();
    _impl_.payload_.lrf_calib_ = lrf_calib;
  }
  // @@protoc_insertion_point(field_set_allocated:cmd.Root.lrf_calib)
}
void Root::clear_lrf_calib() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kLrfCalib) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.lrf_calib_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.lrf_calib_);
    }
    clear_has_payload();
  }
}
void Root::set_allocated_rotary(::cmd::RotaryPlatform::Root* rotary) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (rotary) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(rotary)->GetArena();
    if (message_arena != submessage_arena) {
      rotary = ::google::protobuf::internal::GetOwnedMessage(message_arena, rotary, submessage_arena);
    }
    set_has_rotary();
    _impl_.payload_.rotary_ = rotary;
  }
  // @@protoc_insertion_point(field_set_allocated:cmd.Root.rotary)
}
void Root::clear_rotary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kRotary) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.rotary_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.rotary_);
    }
    clear_has_payload();
  }
}
void Root::set_allocated_osd(::cmd::OSD::Root* osd) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (osd) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(osd)->GetArena();
    if (message_arena != submessage_arena) {
      osd = ::google::protobuf::internal::GetOwnedMessage(message_arena, osd, submessage_arena);
    }
    set_has_osd();
    _impl_.payload_.osd_ = osd;
  }
  // @@protoc_insertion_point(field_set_allocated:cmd.Root.osd)
}
void Root::clear_osd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kOsd) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.osd_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.osd_);
    }
    clear_has_payload();
  }
}
void Root::set_allocated_ping(::cmd::Ping* ping) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (ping) {
    ::google::protobuf::Arena* submessage_arena = ping->GetArena();
    if (message_arena != submessage_arena) {
      ping = ::google::protobuf::internal::GetOwnedMessage(message_arena, ping, submessage_arena);
    }
    set_has_ping();
    _impl_.payload_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:cmd.Root.ping)
}
void Root::set_allocated_noop(::cmd::Noop* noop) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (noop) {
    ::google::protobuf::Arena* submessage_arena = noop->GetArena();
    if (message_arena != submessage_arena) {
      noop = ::google::protobuf::internal::GetOwnedMessage(message_arena, noop, submessage_arena);
    }
    set_has_noop();
    _impl_.payload_.noop_ = noop;
  }
  // @@protoc_insertion_point(field_set_allocated:cmd.Root.noop)
}
void Root::set_allocated_frozen(::cmd::Frozen* frozen) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (frozen) {
    ::google::protobuf::Arena* submessage_arena = frozen->GetArena();
    if (message_arena != submessage_arena) {
      frozen = ::google::protobuf::internal::GetOwnedMessage(message_arena, frozen, submessage_arena);
    }
    set_has_frozen();
    _impl_.payload_.frozen_ = frozen;
  }
  // @@protoc_insertion_point(field_set_allocated:cmd.Root.frozen)
}
void Root::set_allocated_system(::cmd::System::Root* system) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (system) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(system)->GetArena();
    if (message_arena != submessage_arena) {
      system = ::google::protobuf::internal::GetOwnedMessage(message_arena, system, submessage_arena);
    }
    set_has_system();
    _impl_.payload_.system_ = system;
  }
  // @@protoc_insertion_point(field_set_allocated:cmd.Root.system)
}
void Root::clear_system() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kSystem) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.system_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.system_);
    }
    clear_has_payload();
  }
}
void Root::set_allocated_cv(::cmd::CV::Root* cv) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (cv) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(cv)->GetArena();
    if (message_arena != submessage_arena) {
      cv = ::google::protobuf::internal::GetOwnedMessage(message_arena, cv, submessage_arena);
    }
    set_has_cv();
    _impl_.payload_.cv_ = cv;
  }
  // @@protoc_insertion_point(field_set_allocated:cmd.Root.cv)
}
void Root::clear_cv() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kCv) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.cv_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.cv_);
    }
    clear_has_payload();
  }
}
void Root::set_allocated_day_cam_glass_heater(::cmd::DayCamGlassHeater::Root* day_cam_glass_heater) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (day_cam_glass_heater) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(day_cam_glass_heater)->GetArena();
    if (message_arena != submessage_arena) {
      day_cam_glass_heater = ::google::protobuf::internal::GetOwnedMessage(message_arena, day_cam_glass_heater, submessage_arena);
    }
    set_has_day_cam_glass_heater();
    _impl_.payload_.day_cam_glass_heater_ = day_cam_glass_heater;
  }
  // @@protoc_insertion_point(field_set_allocated:cmd.Root.day_cam_glass_heater)
}
void Root::clear_day_cam_glass_heater() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kDayCamGlassHeater) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.day_cam_glass_heater_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.day_cam_glass_heater_);
    }
    clear_has_payload();
  }
}
void Root::set_allocated_lira(::cmd::Lira::Root* lira) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (lira) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(lira)->GetArena();
    if (message_arena != submessage_arena) {
      lira = ::google::protobuf::internal::GetOwnedMessage(message_arena, lira, submessage_arena);
    }
    set_has_lira();
    _impl_.payload_.lira_ = lira;
  }
  // @@protoc_insertion_point(field_set_allocated:cmd.Root.lira)
}
void Root::clear_lira() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kLira) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.lira_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.lira_);
    }
    clear_has_payload();
  }
}
Root::Root(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cmd.Root)
}
inline PROTOBUF_NDEBUG_INLINE Root::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::cmd::Root& from_msg)
      : payload_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

Root::Root(
    ::google::protobuf::Arena* arena,
    const Root& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Root* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, protocol_version_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, protocol_version_),
           offsetof(Impl_, client_type_) -
               offsetof(Impl_, protocol_version_) +
               sizeof(Impl_::client_type_));
  switch (payload_case()) {
    case PAYLOAD_NOT_SET:
      break;
      case kDayCamera:
        _impl_.payload_.day_camera_ = ::google::protobuf::Message::CopyConstruct<::cmd::DayCamera::Root>(arena, *from._impl_.payload_.day_camera_);
        break;
      case kHeatCamera:
        _impl_.payload_.heat_camera_ = ::google::protobuf::Message::CopyConstruct<::cmd::HeatCamera::Root>(arena, *from._impl_.payload_.heat_camera_);
        break;
      case kGps:
        _impl_.payload_.gps_ = ::google::protobuf::Message::CopyConstruct<::cmd::Gps::Root>(arena, *from._impl_.payload_.gps_);
        break;
      case kCompass:
        _impl_.payload_.compass_ = ::google::protobuf::Message::CopyConstruct<::cmd::Compass::Root>(arena, *from._impl_.payload_.compass_);
        break;
      case kLrf:
        _impl_.payload_.lrf_ = ::google::protobuf::Message::CopyConstruct<::cmd::Lrf::Root>(arena, *from._impl_.payload_.lrf_);
        break;
      case kLrfCalib:
        _impl_.payload_.lrf_calib_ = ::google::protobuf::Message::CopyConstruct<::cmd::Lrf_calib::Root>(arena, *from._impl_.payload_.lrf_calib_);
        break;
      case kRotary:
        _impl_.payload_.rotary_ = ::google::protobuf::Message::CopyConstruct<::cmd::RotaryPlatform::Root>(arena, *from._impl_.payload_.rotary_);
        break;
      case kOsd:
        _impl_.payload_.osd_ = ::google::protobuf::Message::CopyConstruct<::cmd::OSD::Root>(arena, *from._impl_.payload_.osd_);
        break;
      case kPing:
        _impl_.payload_.ping_ = ::google::protobuf::Message::CopyConstruct<::cmd::Ping>(arena, *from._impl_.payload_.ping_);
        break;
      case kNoop:
        _impl_.payload_.noop_ = ::google::protobuf::Message::CopyConstruct<::cmd::Noop>(arena, *from._impl_.payload_.noop_);
        break;
      case kFrozen:
        _impl_.payload_.frozen_ = ::google::protobuf::Message::CopyConstruct<::cmd::Frozen>(arena, *from._impl_.payload_.frozen_);
        break;
      case kSystem:
        _impl_.payload_.system_ = ::google::protobuf::Message::CopyConstruct<::cmd::System::Root>(arena, *from._impl_.payload_.system_);
        break;
      case kCv:
        _impl_.payload_.cv_ = ::google::protobuf::Message::CopyConstruct<::cmd::CV::Root>(arena, *from._impl_.payload_.cv_);
        break;
      case kDayCamGlassHeater:
        _impl_.payload_.day_cam_glass_heater_ = ::google::protobuf::Message::CopyConstruct<::cmd::DayCamGlassHeater::Root>(arena, *from._impl_.payload_.day_cam_glass_heater_);
        break;
      case kLira:
        _impl_.payload_.lira_ = ::google::protobuf::Message::CopyConstruct<::cmd::Lira::Root>(arena, *from._impl_.payload_.lira_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:cmd.Root)
}
inline PROTOBUF_NDEBUG_INLINE Root::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : payload_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void Root::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, protocol_version_),
           0,
           offsetof(Impl_, client_type_) -
               offsetof(Impl_, protocol_version_) +
               sizeof(Impl_::client_type_));
}
Root::~Root() {
  // @@protoc_insertion_point(destructor:cmd.Root)
  SharedDtor(*this);
}
inline void Root::SharedDtor(MessageLite& self) {
  Root& this_ = static_cast<Root&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_payload()) {
    this_.clear_payload();
  }
  this_._impl_.~Impl_();
}

void Root::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:cmd.Root)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (payload_case()) {
    case kDayCamera: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.day_camera_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.day_camera_);
      }
      break;
    }
    case kHeatCamera: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.heat_camera_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.heat_camera_);
      }
      break;
    }
    case kGps: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.gps_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.gps_);
      }
      break;
    }
    case kCompass: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.compass_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.compass_);
      }
      break;
    }
    case kLrf: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.lrf_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.lrf_);
      }
      break;
    }
    case kLrfCalib: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.lrf_calib_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.lrf_calib_);
      }
      break;
    }
    case kRotary: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.rotary_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.rotary_);
      }
      break;
    }
    case kOsd: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.osd_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.osd_);
      }
      break;
    }
    case kPing: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.ping_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.ping_);
      }
      break;
    }
    case kNoop: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.noop_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.noop_);
      }
      break;
    }
    case kFrozen: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.frozen_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.frozen_);
      }
      break;
    }
    case kSystem: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.system_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.system_);
      }
      break;
    }
    case kCv: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.cv_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.cv_);
      }
      break;
    }
    case kDayCamGlassHeater: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.day_cam_glass_heater_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.day_cam_glass_heater_);
      }
      break;
    }
    case kLira: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.lira_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.lira_);
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


inline void* Root::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Root(arena);
}
constexpr auto Root::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Root),
                                            alignof(Root));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Root::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Root_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Root::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Root>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Root::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Root>(), &Root::ByteSizeLong,
            &Root::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Root, _impl_._cached_size_),
        false,
    },
    &Root::kDescriptorMethods,
    &descriptor_table_jon_5fshared_5fcmd_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Root::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 20, 15, 0, 7> Root::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    34, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    524256,  // skipmap
    offsetof(decltype(_table_), field_entries),
    20,  // num_field_entries
    15,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cmd::Root>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 protocol_version = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Root, _impl_.protocol_version_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Root, _impl_.protocol_version_)}},
    // uint32 session_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Root, _impl_.session_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Root, _impl_.session_id_)}},
    // bool important = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Root, _impl_.important_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Root, _impl_.important_)}},
    // bool from_cv_subsystem = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Root, _impl_.from_cv_subsystem_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Root, _impl_.from_cv_subsystem_)}},
    // .ser.JonGuiDataClientType client_type = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Root, _impl_.client_type_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Root, _impl_.client_type_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    33, 0, 1,
    65532, 18,
    65535, 65535
  }}, {{
    // uint32 protocol_version = 1;
    {PROTOBUF_FIELD_OFFSET(Root, _impl_.protocol_version_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 session_id = 2;
    {PROTOBUF_FIELD_OFFSET(Root, _impl_.session_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bool important = 3;
    {PROTOBUF_FIELD_OFFSET(Root, _impl_.important_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool from_cv_subsystem = 4;
    {PROTOBUF_FIELD_OFFSET(Root, _impl_.from_cv_subsystem_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .ser.JonGuiDataClientType client_type = 5;
    {PROTOBUF_FIELD_OFFSET(Root, _impl_.client_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .cmd.DayCamera.Root day_camera = 20;
    {PROTOBUF_FIELD_OFFSET(Root, _impl_.payload_.day_camera_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cmd.HeatCamera.Root heat_camera = 21;
    {PROTOBUF_FIELD_OFFSET(Root, _impl_.payload_.heat_camera_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cmd.Gps.Root gps = 22;
    {PROTOBUF_FIELD_OFFSET(Root, _impl_.payload_.gps_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cmd.Compass.Root compass = 23;
    {PROTOBUF_FIELD_OFFSET(Root, _impl_.payload_.compass_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cmd.Lrf.Root lrf = 24;
    {PROTOBUF_FIELD_OFFSET(Root, _impl_.payload_.lrf_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cmd.Lrf_calib.Root lrf_calib = 25;
    {PROTOBUF_FIELD_OFFSET(Root, _impl_.payload_.lrf_calib_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cmd.RotaryPlatform.Root rotary = 26;
    {PROTOBUF_FIELD_OFFSET(Root, _impl_.payload_.rotary_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cmd.OSD.Root osd = 27;
    {PROTOBUF_FIELD_OFFSET(Root, _impl_.payload_.osd_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cmd.Ping ping = 28;
    {PROTOBUF_FIELD_OFFSET(Root, _impl_.payload_.ping_), _Internal::kOneofCaseOffset + 0, 8,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cmd.Noop noop = 29;
    {PROTOBUF_FIELD_OFFSET(Root, _impl_.payload_.noop_), _Internal::kOneofCaseOffset + 0, 9,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cmd.Frozen frozen = 30;
    {PROTOBUF_FIELD_OFFSET(Root, _impl_.payload_.frozen_), _Internal::kOneofCaseOffset + 0, 10,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cmd.System.Root system = 31;
    {PROTOBUF_FIELD_OFFSET(Root, _impl_.payload_.system_), _Internal::kOneofCaseOffset + 0, 11,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cmd.CV.Root cv = 32;
    {PROTOBUF_FIELD_OFFSET(Root, _impl_.payload_.cv_), _Internal::kOneofCaseOffset + 0, 12,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cmd.DayCamGlassHeater.Root day_cam_glass_heater = 33;
    {PROTOBUF_FIELD_OFFSET(Root, _impl_.payload_.day_cam_glass_heater_), _Internal::kOneofCaseOffset + 0, 13,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .cmd.Lira.Root lira = 34;
    {PROTOBUF_FIELD_OFFSET(Root, _impl_.payload_.lira_), _Internal::kOneofCaseOffset + 0, 14,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::cmd::DayCamera::Root>()},
    {::_pbi::TcParser::GetTable<::cmd::HeatCamera::Root>()},
    {::_pbi::TcParser::GetTable<::cmd::Gps::Root>()},
    {::_pbi::TcParser::GetTable<::cmd::Compass::Root>()},
    {::_pbi::TcParser::GetTable<::cmd::Lrf::Root>()},
    {::_pbi::TcParser::GetTable<::cmd::Lrf_calib::Root>()},
    {::_pbi::TcParser::GetTable<::cmd::RotaryPlatform::Root>()},
    {::_pbi::TcParser::GetTable<::cmd::OSD::Root>()},
    {::_pbi::TcParser::GetTable<::cmd::Ping>()},
    {::_pbi::TcParser::GetTable<::cmd::Noop>()},
    {::_pbi::TcParser::GetTable<::cmd::Frozen>()},
    {::_pbi::TcParser::GetTable<::cmd::System::Root>()},
    {::_pbi::TcParser::GetTable<::cmd::CV::Root>()},
    {::_pbi::TcParser::GetTable<::cmd::DayCamGlassHeater::Root>()},
    {::_pbi::TcParser::GetTable<::cmd::Lira::Root>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Root::Clear() {
// @@protoc_insertion_point(message_clear_start:cmd.Root)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.protocol_version_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.client_type_) -
      reinterpret_cast<char*>(&_impl_.protocol_version_)) + sizeof(_impl_.client_type_));
  clear_payload();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Root::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Root& this_ = static_cast<const Root&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Root::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Root& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:cmd.Root)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 protocol_version = 1;
          if (this_._internal_protocol_version() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_protocol_version(), target);
          }

          // uint32 session_id = 2;
          if (this_._internal_session_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_session_id(), target);
          }

          // bool important = 3;
          if (this_._internal_important() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_important(), target);
          }

          // bool from_cv_subsystem = 4;
          if (this_._internal_from_cv_subsystem() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_from_cv_subsystem(), target);
          }

          // .ser.JonGuiDataClientType client_type = 5;
          if (this_._internal_client_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                5, this_._internal_client_type(), target);
          }

          switch (this_.payload_case()) {
            case kDayCamera: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  20, *this_._impl_.payload_.day_camera_, this_._impl_.payload_.day_camera_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kHeatCamera: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  21, *this_._impl_.payload_.heat_camera_, this_._impl_.payload_.heat_camera_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kGps: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  22, *this_._impl_.payload_.gps_, this_._impl_.payload_.gps_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kCompass: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  23, *this_._impl_.payload_.compass_, this_._impl_.payload_.compass_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kLrf: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  24, *this_._impl_.payload_.lrf_, this_._impl_.payload_.lrf_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kLrfCalib: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  25, *this_._impl_.payload_.lrf_calib_, this_._impl_.payload_.lrf_calib_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kRotary: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  26, *this_._impl_.payload_.rotary_, this_._impl_.payload_.rotary_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kOsd: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  27, *this_._impl_.payload_.osd_, this_._impl_.payload_.osd_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kPing: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  28, *this_._impl_.payload_.ping_, this_._impl_.payload_.ping_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kNoop: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  29, *this_._impl_.payload_.noop_, this_._impl_.payload_.noop_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kFrozen: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  30, *this_._impl_.payload_.frozen_, this_._impl_.payload_.frozen_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kSystem: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  31, *this_._impl_.payload_.system_, this_._impl_.payload_.system_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kCv: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  32, *this_._impl_.payload_.cv_, this_._impl_.payload_.cv_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kDayCamGlassHeater: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  33, *this_._impl_.payload_.day_cam_glass_heater_, this_._impl_.payload_.day_cam_glass_heater_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kLira: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  34, *this_._impl_.payload_.lira_, this_._impl_.payload_.lira_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:cmd.Root)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Root::ByteSizeLong(const MessageLite& base) {
          const Root& this_ = static_cast<const Root&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Root::ByteSizeLong() const {
          const Root& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:cmd.Root)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // uint32 protocol_version = 1;
            if (this_._internal_protocol_version() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_protocol_version());
            }
            // uint32 session_id = 2;
            if (this_._internal_session_id() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_session_id());
            }
            // bool important = 3;
            if (this_._internal_important() != 0) {
              total_size += 2;
            }
            // bool from_cv_subsystem = 4;
            if (this_._internal_from_cv_subsystem() != 0) {
              total_size += 2;
            }
            // .ser.JonGuiDataClientType client_type = 5;
            if (this_._internal_client_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_client_type());
            }
          }
          switch (this_.payload_case()) {
            // .cmd.DayCamera.Root day_camera = 20;
            case kDayCamera: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.day_camera_);
              break;
            }
            // .cmd.HeatCamera.Root heat_camera = 21;
            case kHeatCamera: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.heat_camera_);
              break;
            }
            // .cmd.Gps.Root gps = 22;
            case kGps: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.gps_);
              break;
            }
            // .cmd.Compass.Root compass = 23;
            case kCompass: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.compass_);
              break;
            }
            // .cmd.Lrf.Root lrf = 24;
            case kLrf: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.lrf_);
              break;
            }
            // .cmd.Lrf_calib.Root lrf_calib = 25;
            case kLrfCalib: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.lrf_calib_);
              break;
            }
            // .cmd.RotaryPlatform.Root rotary = 26;
            case kRotary: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.rotary_);
              break;
            }
            // .cmd.OSD.Root osd = 27;
            case kOsd: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.osd_);
              break;
            }
            // .cmd.Ping ping = 28;
            case kPing: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.ping_);
              break;
            }
            // .cmd.Noop noop = 29;
            case kNoop: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.noop_);
              break;
            }
            // .cmd.Frozen frozen = 30;
            case kFrozen: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.frozen_);
              break;
            }
            // .cmd.System.Root system = 31;
            case kSystem: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.system_);
              break;
            }
            // .cmd.CV.Root cv = 32;
            case kCv: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.cv_);
              break;
            }
            // .cmd.DayCamGlassHeater.Root day_cam_glass_heater = 33;
            case kDayCamGlassHeater: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.day_cam_glass_heater_);
              break;
            }
            // .cmd.Lira.Root lira = 34;
            case kLira: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.lira_);
              break;
            }
            case PAYLOAD_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Root::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Root*>(&to_msg);
  auto& from = static_cast<const Root&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:cmd.Root)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_protocol_version() != 0) {
    _this->_impl_.protocol_version_ = from._impl_.protocol_version_;
  }
  if (from._internal_session_id() != 0) {
    _this->_impl_.session_id_ = from._impl_.session_id_;
  }
  if (from._internal_important() != 0) {
    _this->_impl_.important_ = from._impl_.important_;
  }
  if (from._internal_from_cv_subsystem() != 0) {
    _this->_impl_.from_cv_subsystem_ = from._impl_.from_cv_subsystem_;
  }
  if (from._internal_client_type() != 0) {
    _this->_impl_.client_type_ = from._impl_.client_type_;
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_payload();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kDayCamera: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.day_camera_ =
              ::google::protobuf::Message::CopyConstruct<::cmd::DayCamera::Root>(arena, *from._impl_.payload_.day_camera_);
        } else {
          _this->_impl_.payload_.day_camera_->MergeFrom(from._internal_day_camera());
        }
        break;
      }
      case kHeatCamera: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.heat_camera_ =
              ::google::protobuf::Message::CopyConstruct<::cmd::HeatCamera::Root>(arena, *from._impl_.payload_.heat_camera_);
        } else {
          _this->_impl_.payload_.heat_camera_->MergeFrom(from._internal_heat_camera());
        }
        break;
      }
      case kGps: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.gps_ =
              ::google::protobuf::Message::CopyConstruct<::cmd::Gps::Root>(arena, *from._impl_.payload_.gps_);
        } else {
          _this->_impl_.payload_.gps_->MergeFrom(from._internal_gps());
        }
        break;
      }
      case kCompass: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.compass_ =
              ::google::protobuf::Message::CopyConstruct<::cmd::Compass::Root>(arena, *from._impl_.payload_.compass_);
        } else {
          _this->_impl_.payload_.compass_->MergeFrom(from._internal_compass());
        }
        break;
      }
      case kLrf: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.lrf_ =
              ::google::protobuf::Message::CopyConstruct<::cmd::Lrf::Root>(arena, *from._impl_.payload_.lrf_);
        } else {
          _this->_impl_.payload_.lrf_->MergeFrom(from._internal_lrf());
        }
        break;
      }
      case kLrfCalib: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.lrf_calib_ =
              ::google::protobuf::Message::CopyConstruct<::cmd::Lrf_calib::Root>(arena, *from._impl_.payload_.lrf_calib_);
        } else {
          _this->_impl_.payload_.lrf_calib_->MergeFrom(from._internal_lrf_calib());
        }
        break;
      }
      case kRotary: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.rotary_ =
              ::google::protobuf::Message::CopyConstruct<::cmd::RotaryPlatform::Root>(arena, *from._impl_.payload_.rotary_);
        } else {
          _this->_impl_.payload_.rotary_->MergeFrom(from._internal_rotary());
        }
        break;
      }
      case kOsd: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.osd_ =
              ::google::protobuf::Message::CopyConstruct<::cmd::OSD::Root>(arena, *from._impl_.payload_.osd_);
        } else {
          _this->_impl_.payload_.osd_->MergeFrom(from._internal_osd());
        }
        break;
      }
      case kPing: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.ping_ =
              ::google::protobuf::Message::CopyConstruct<::cmd::Ping>(arena, *from._impl_.payload_.ping_);
        } else {
          _this->_impl_.payload_.ping_->MergeFrom(from._internal_ping());
        }
        break;
      }
      case kNoop: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.noop_ =
              ::google::protobuf::Message::CopyConstruct<::cmd::Noop>(arena, *from._impl_.payload_.noop_);
        } else {
          _this->_impl_.payload_.noop_->MergeFrom(from._internal_noop());
        }
        break;
      }
      case kFrozen: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.frozen_ =
              ::google::protobuf::Message::CopyConstruct<::cmd::Frozen>(arena, *from._impl_.payload_.frozen_);
        } else {
          _this->_impl_.payload_.frozen_->MergeFrom(from._internal_frozen());
        }
        break;
      }
      case kSystem: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.system_ =
              ::google::protobuf::Message::CopyConstruct<::cmd::System::Root>(arena, *from._impl_.payload_.system_);
        } else {
          _this->_impl_.payload_.system_->MergeFrom(from._internal_system());
        }
        break;
      }
      case kCv: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.cv_ =
              ::google::protobuf::Message::CopyConstruct<::cmd::CV::Root>(arena, *from._impl_.payload_.cv_);
        } else {
          _this->_impl_.payload_.cv_->MergeFrom(from._internal_cv());
        }
        break;
      }
      case kDayCamGlassHeater: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.day_cam_glass_heater_ =
              ::google::protobuf::Message::CopyConstruct<::cmd::DayCamGlassHeater::Root>(arena, *from._impl_.payload_.day_cam_glass_heater_);
        } else {
          _this->_impl_.payload_.day_cam_glass_heater_->MergeFrom(from._internal_day_cam_glass_heater());
        }
        break;
      }
      case kLira: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.lira_ =
              ::google::protobuf::Message::CopyConstruct<::cmd::Lira::Root>(arena, *from._impl_.payload_.lira_);
        } else {
          _this->_impl_.payload_.lira_->MergeFrom(from._internal_lira());
        }
        break;
      }
      case PAYLOAD_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Root::CopyFrom(const Root& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmd.Root)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Root::InternalSwap(Root* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Root, _impl_.client_type_)
      + sizeof(Root::_impl_.client_type_)
      - PROTOBUF_FIELD_OFFSET(Root, _impl_.protocol_version_)>(
          reinterpret_cast<char*>(&_impl_.protocol_version_),
          reinterpret_cast<char*>(&other->_impl_.protocol_version_));
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Root::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Ping::_Internal {
 public:
};

Ping::Ping(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:cmd.Ping)
}
Ping::Ping(
    ::google::protobuf::Arena* arena,
    const Ping& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Ping* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cmd.Ping)
}

inline void* Ping::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Ping(arena);
}
constexpr auto Ping::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Ping),
                                            alignof(Ping));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Ping::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Ping_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Ping::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<Ping>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Ping::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<Ping>(), &Ping::ByteSizeLong,
            &Ping::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Ping, _impl_._cached_size_),
        false,
    },
    &Ping::kDescriptorMethods,
    &descriptor_table_jon_5fshared_5fcmd_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Ping::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> Ping::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cmd::Ping>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata Ping::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Noop::_Internal {
 public:
};

Noop::Noop(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:cmd.Noop)
}
Noop::Noop(
    ::google::protobuf::Arena* arena,
    const Noop& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Noop* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cmd.Noop)
}

inline void* Noop::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Noop(arena);
}
constexpr auto Noop::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Noop),
                                            alignof(Noop));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Noop::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Noop_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Noop::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<Noop>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Noop::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<Noop>(), &Noop::ByteSizeLong,
            &Noop::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Noop, _impl_._cached_size_),
        false,
    },
    &Noop::kDescriptorMethods,
    &descriptor_table_jon_5fshared_5fcmd_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Noop::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> Noop::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cmd::Noop>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata Noop::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Frozen::_Internal {
 public:
};

Frozen::Frozen(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:cmd.Frozen)
}
Frozen::Frozen(
    ::google::protobuf::Arena* arena,
    const Frozen& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Frozen* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:cmd.Frozen)
}

inline void* Frozen::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Frozen(arena);
}
constexpr auto Frozen::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Frozen),
                                            alignof(Frozen));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Frozen::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Frozen_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Frozen::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<Frozen>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Frozen::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<Frozen>(), &Frozen::ByteSizeLong,
            &Frozen::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Frozen, _impl_._cached_size_),
        false,
    },
    &Frozen::kDescriptorMethods,
    &descriptor_table_jon_5fshared_5fcmd_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Frozen::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> Frozen::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::cmd::Frozen>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata Frozen::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace cmd
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_jon_5fshared_5fcmd_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
