// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: jon_shared_cmd_lrf_align.proto
// Protobuf C++ Version: 5.29.2

#ifndef jon_5fshared_5fcmd_5flrf_5falign_2eproto_2epb_2eh
#define jon_5fshared_5fcmd_5flrf_5falign_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_jon_5fshared_5fcmd_5flrf_5falign_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_jon_5fshared_5fcmd_5flrf_5falign_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_jon_5fshared_5fcmd_5flrf_5falign_2eproto;
namespace cmd {
namespace Lrf_calib {
class Offsets;
struct OffsetsDefaultTypeInternal;
extern OffsetsDefaultTypeInternal _Offsets_default_instance_;
class ResetOffsets;
struct ResetOffsetsDefaultTypeInternal;
extern ResetOffsetsDefaultTypeInternal _ResetOffsets_default_instance_;
class Root;
struct RootDefaultTypeInternal;
extern RootDefaultTypeInternal _Root_default_instance_;
class SaveOffsets;
struct SaveOffsetsDefaultTypeInternal;
extern SaveOffsetsDefaultTypeInternal _SaveOffsets_default_instance_;
class SetOffsets;
struct SetOffsetsDefaultTypeInternal;
extern SetOffsetsDefaultTypeInternal _SetOffsets_default_instance_;
class ShiftOffsetsBy;
struct ShiftOffsetsByDefaultTypeInternal;
extern ShiftOffsetsByDefaultTypeInternal _ShiftOffsetsBy_default_instance_;
}  // namespace Lrf_calib
}  // namespace cmd
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cmd {
namespace Lrf_calib {

// ===================================================================


// -------------------------------------------------------------------

class ShiftOffsetsBy final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.Lrf_calib.ShiftOffsetsBy) */ {
 public:
  inline ShiftOffsetsBy() : ShiftOffsetsBy(nullptr) {}
  ~ShiftOffsetsBy() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ShiftOffsetsBy* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ShiftOffsetsBy));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ShiftOffsetsBy(
      ::google::protobuf::internal::ConstantInitialized);

  inline ShiftOffsetsBy(const ShiftOffsetsBy& from) : ShiftOffsetsBy(nullptr, from) {}
  inline ShiftOffsetsBy(ShiftOffsetsBy&& from) noexcept
      : ShiftOffsetsBy(nullptr, std::move(from)) {}
  inline ShiftOffsetsBy& operator=(const ShiftOffsetsBy& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShiftOffsetsBy& operator=(ShiftOffsetsBy&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShiftOffsetsBy& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShiftOffsetsBy* internal_default_instance() {
    return reinterpret_cast<const ShiftOffsetsBy*>(
        &_ShiftOffsetsBy_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ShiftOffsetsBy& a, ShiftOffsetsBy& b) { a.Swap(&b); }
  inline void Swap(ShiftOffsetsBy* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShiftOffsetsBy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShiftOffsetsBy* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ShiftOffsetsBy>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ShiftOffsetsBy& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ShiftOffsetsBy& from) { ShiftOffsetsBy::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ShiftOffsetsBy* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.Lrf_calib.ShiftOffsetsBy"; }

 protected:
  explicit ShiftOffsetsBy(::google::protobuf::Arena* arena);
  ShiftOffsetsBy(::google::protobuf::Arena* arena, const ShiftOffsetsBy& from);
  ShiftOffsetsBy(::google::protobuf::Arena* arena, ShiftOffsetsBy&& from) noexcept
      : ShiftOffsetsBy(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x() ;
  ::int32_t x() const;
  void set_x(::int32_t value);

  private:
  ::int32_t _internal_x() const;
  void _internal_set_x(::int32_t value);

  public:
  // int32 y = 2;
  void clear_y() ;
  ::int32_t y() const;
  void set_y(::int32_t value);

  private:
  ::int32_t _internal_y() const;
  void _internal_set_y(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cmd.Lrf_calib.ShiftOffsetsBy)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ShiftOffsetsBy& from_msg);
    ::int32_t x_;
    ::int32_t y_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5flrf_5falign_2eproto;
};
// -------------------------------------------------------------------

class SetOffsets final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.Lrf_calib.SetOffsets) */ {
 public:
  inline SetOffsets() : SetOffsets(nullptr) {}
  ~SetOffsets() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetOffsets* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetOffsets));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetOffsets(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetOffsets(const SetOffsets& from) : SetOffsets(nullptr, from) {}
  inline SetOffsets(SetOffsets&& from) noexcept
      : SetOffsets(nullptr, std::move(from)) {}
  inline SetOffsets& operator=(const SetOffsets& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetOffsets& operator=(SetOffsets&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetOffsets& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetOffsets* internal_default_instance() {
    return reinterpret_cast<const SetOffsets*>(
        &_SetOffsets_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(SetOffsets& a, SetOffsets& b) { a.Swap(&b); }
  inline void Swap(SetOffsets* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetOffsets* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetOffsets* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetOffsets>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetOffsets& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetOffsets& from) { SetOffsets::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetOffsets* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.Lrf_calib.SetOffsets"; }

 protected:
  explicit SetOffsets(::google::protobuf::Arena* arena);
  SetOffsets(::google::protobuf::Arena* arena, const SetOffsets& from);
  SetOffsets(::google::protobuf::Arena* arena, SetOffsets&& from) noexcept
      : SetOffsets(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x() ;
  ::int32_t x() const;
  void set_x(::int32_t value);

  private:
  ::int32_t _internal_x() const;
  void _internal_set_x(::int32_t value);

  public:
  // int32 y = 2;
  void clear_y() ;
  ::int32_t y() const;
  void set_y(::int32_t value);

  private:
  ::int32_t _internal_y() const;
  void _internal_set_y(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cmd.Lrf_calib.SetOffsets)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetOffsets& from_msg);
    ::int32_t x_;
    ::int32_t y_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5flrf_5falign_2eproto;
};
// -------------------------------------------------------------------

class SaveOffsets final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.Lrf_calib.SaveOffsets) */ {
 public:
  inline SaveOffsets() : SaveOffsets(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SaveOffsets* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SaveOffsets));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SaveOffsets(
      ::google::protobuf::internal::ConstantInitialized);

  inline SaveOffsets(const SaveOffsets& from) : SaveOffsets(nullptr, from) {}
  inline SaveOffsets(SaveOffsets&& from) noexcept
      : SaveOffsets(nullptr, std::move(from)) {}
  inline SaveOffsets& operator=(const SaveOffsets& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveOffsets& operator=(SaveOffsets&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaveOffsets& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaveOffsets* internal_default_instance() {
    return reinterpret_cast<const SaveOffsets*>(
        &_SaveOffsets_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(SaveOffsets& a, SaveOffsets& b) { a.Swap(&b); }
  inline void Swap(SaveOffsets* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveOffsets* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SaveOffsets* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<SaveOffsets>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SaveOffsets& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SaveOffsets& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.Lrf_calib.SaveOffsets"; }

 protected:
  explicit SaveOffsets(::google::protobuf::Arena* arena);
  SaveOffsets(::google::protobuf::Arena* arena, const SaveOffsets& from);
  SaveOffsets(::google::protobuf::Arena* arena, SaveOffsets&& from) noexcept
      : SaveOffsets(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.Lrf_calib.SaveOffsets)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SaveOffsets& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5flrf_5falign_2eproto;
};
// -------------------------------------------------------------------

class ResetOffsets final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.Lrf_calib.ResetOffsets) */ {
 public:
  inline ResetOffsets() : ResetOffsets(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResetOffsets* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResetOffsets));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResetOffsets(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResetOffsets(const ResetOffsets& from) : ResetOffsets(nullptr, from) {}
  inline ResetOffsets(ResetOffsets&& from) noexcept
      : ResetOffsets(nullptr, std::move(from)) {}
  inline ResetOffsets& operator=(const ResetOffsets& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetOffsets& operator=(ResetOffsets&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResetOffsets& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetOffsets* internal_default_instance() {
    return reinterpret_cast<const ResetOffsets*>(
        &_ResetOffsets_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(ResetOffsets& a, ResetOffsets& b) { a.Swap(&b); }
  inline void Swap(ResetOffsets* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetOffsets* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResetOffsets* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<ResetOffsets>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ResetOffsets& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ResetOffsets& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.Lrf_calib.ResetOffsets"; }

 protected:
  explicit ResetOffsets(::google::protobuf::Arena* arena);
  ResetOffsets(::google::protobuf::Arena* arena, const ResetOffsets& from);
  ResetOffsets(::google::protobuf::Arena* arena, ResetOffsets&& from) noexcept
      : ResetOffsets(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.Lrf_calib.ResetOffsets)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResetOffsets& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5flrf_5falign_2eproto;
};
// -------------------------------------------------------------------

class Offsets final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.Lrf_calib.Offsets) */ {
 public:
  inline Offsets() : Offsets(nullptr) {}
  ~Offsets() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Offsets* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Offsets));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Offsets(
      ::google::protobuf::internal::ConstantInitialized);

  inline Offsets(const Offsets& from) : Offsets(nullptr, from) {}
  inline Offsets(Offsets&& from) noexcept
      : Offsets(nullptr, std::move(from)) {}
  inline Offsets& operator=(const Offsets& from) {
    CopyFrom(from);
    return *this;
  }
  inline Offsets& operator=(Offsets&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Offsets& default_instance() {
    return *internal_default_instance();
  }
  enum CmdCase {
    kSet = 1,
    kSave = 2,
    kReset = 3,
    kShift = 4,
    CMD_NOT_SET = 0,
  };
  static inline const Offsets* internal_default_instance() {
    return reinterpret_cast<const Offsets*>(
        &_Offsets_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Offsets& a, Offsets& b) { a.Swap(&b); }
  inline void Swap(Offsets* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Offsets* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Offsets* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Offsets>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Offsets& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Offsets& from) { Offsets::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Offsets* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.Lrf_calib.Offsets"; }

 protected:
  explicit Offsets(::google::protobuf::Arena* arena);
  Offsets(::google::protobuf::Arena* arena, const Offsets& from);
  Offsets(::google::protobuf::Arena* arena, Offsets&& from) noexcept
      : Offsets(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSetFieldNumber = 1,
    kSaveFieldNumber = 2,
    kResetFieldNumber = 3,
    kShiftFieldNumber = 4,
  };
  // .cmd.Lrf_calib.SetOffsets set = 1;
  bool has_set() const;
  private:
  bool _internal_has_set() const;

  public:
  void clear_set() ;
  const ::cmd::Lrf_calib::SetOffsets& set() const;
  PROTOBUF_NODISCARD ::cmd::Lrf_calib::SetOffsets* release_set();
  ::cmd::Lrf_calib::SetOffsets* mutable_set();
  void set_allocated_set(::cmd::Lrf_calib::SetOffsets* value);
  void unsafe_arena_set_allocated_set(::cmd::Lrf_calib::SetOffsets* value);
  ::cmd::Lrf_calib::SetOffsets* unsafe_arena_release_set();

  private:
  const ::cmd::Lrf_calib::SetOffsets& _internal_set() const;
  ::cmd::Lrf_calib::SetOffsets* _internal_mutable_set();

  public:
  // .cmd.Lrf_calib.SaveOffsets save = 2;
  bool has_save() const;
  private:
  bool _internal_has_save() const;

  public:
  void clear_save() ;
  const ::cmd::Lrf_calib::SaveOffsets& save() const;
  PROTOBUF_NODISCARD ::cmd::Lrf_calib::SaveOffsets* release_save();
  ::cmd::Lrf_calib::SaveOffsets* mutable_save();
  void set_allocated_save(::cmd::Lrf_calib::SaveOffsets* value);
  void unsafe_arena_set_allocated_save(::cmd::Lrf_calib::SaveOffsets* value);
  ::cmd::Lrf_calib::SaveOffsets* unsafe_arena_release_save();

  private:
  const ::cmd::Lrf_calib::SaveOffsets& _internal_save() const;
  ::cmd::Lrf_calib::SaveOffsets* _internal_mutable_save();

  public:
  // .cmd.Lrf_calib.ResetOffsets reset = 3;
  bool has_reset() const;
  private:
  bool _internal_has_reset() const;

  public:
  void clear_reset() ;
  const ::cmd::Lrf_calib::ResetOffsets& reset() const;
  PROTOBUF_NODISCARD ::cmd::Lrf_calib::ResetOffsets* release_reset();
  ::cmd::Lrf_calib::ResetOffsets* mutable_reset();
  void set_allocated_reset(::cmd::Lrf_calib::ResetOffsets* value);
  void unsafe_arena_set_allocated_reset(::cmd::Lrf_calib::ResetOffsets* value);
  ::cmd::Lrf_calib::ResetOffsets* unsafe_arena_release_reset();

  private:
  const ::cmd::Lrf_calib::ResetOffsets& _internal_reset() const;
  ::cmd::Lrf_calib::ResetOffsets* _internal_mutable_reset();

  public:
  // .cmd.Lrf_calib.ShiftOffsetsBy shift = 4;
  bool has_shift() const;
  private:
  bool _internal_has_shift() const;

  public:
  void clear_shift() ;
  const ::cmd::Lrf_calib::ShiftOffsetsBy& shift() const;
  PROTOBUF_NODISCARD ::cmd::Lrf_calib::ShiftOffsetsBy* release_shift();
  ::cmd::Lrf_calib::ShiftOffsetsBy* mutable_shift();
  void set_allocated_shift(::cmd::Lrf_calib::ShiftOffsetsBy* value);
  void unsafe_arena_set_allocated_shift(::cmd::Lrf_calib::ShiftOffsetsBy* value);
  ::cmd::Lrf_calib::ShiftOffsetsBy* unsafe_arena_release_shift();

  private:
  const ::cmd::Lrf_calib::ShiftOffsetsBy& _internal_shift() const;
  ::cmd::Lrf_calib::ShiftOffsetsBy* _internal_mutable_shift();

  public:
  void clear_cmd();
  CmdCase cmd_case() const;
  // @@protoc_insertion_point(class_scope:cmd.Lrf_calib.Offsets)
 private:
  class _Internal;
  void set_has_set();
  void set_has_save();
  void set_has_reset();
  void set_has_shift();
  inline bool has_cmd() const;
  inline void clear_has_cmd();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 4, 4,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Offsets& from_msg);
    union CmdUnion {
      constexpr CmdUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::cmd::Lrf_calib::SetOffsets* set_;
      ::cmd::Lrf_calib::SaveOffsets* save_;
      ::cmd::Lrf_calib::ResetOffsets* reset_;
      ::cmd::Lrf_calib::ShiftOffsetsBy* shift_;
    } cmd_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5flrf_5falign_2eproto;
};
// -------------------------------------------------------------------

class Root final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.Lrf_calib.Root) */ {
 public:
  inline Root() : Root(nullptr) {}
  ~Root() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Root* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Root));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Root(
      ::google::protobuf::internal::ConstantInitialized);

  inline Root(const Root& from) : Root(nullptr, from) {}
  inline Root(Root&& from) noexcept
      : Root(nullptr, std::move(from)) {}
  inline Root& operator=(const Root& from) {
    CopyFrom(from);
    return *this;
  }
  inline Root& operator=(Root&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Root& default_instance() {
    return *internal_default_instance();
  }
  enum ChannelCase {
    kDay = 1,
    kHeat = 2,
    CHANNEL_NOT_SET = 0,
  };
  static inline const Root* internal_default_instance() {
    return reinterpret_cast<const Root*>(
        &_Root_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Root& a, Root& b) { a.Swap(&b); }
  inline void Swap(Root* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Root* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Root* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Root>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Root& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Root& from) { Root::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Root* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.Lrf_calib.Root"; }

 protected:
  explicit Root(::google::protobuf::Arena* arena);
  Root(::google::protobuf::Arena* arena, const Root& from);
  Root(::google::protobuf::Arena* arena, Root&& from) noexcept
      : Root(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDayFieldNumber = 1,
    kHeatFieldNumber = 2,
  };
  // .cmd.Lrf_calib.Offsets day = 1;
  bool has_day() const;
  private:
  bool _internal_has_day() const;

  public:
  void clear_day() ;
  const ::cmd::Lrf_calib::Offsets& day() const;
  PROTOBUF_NODISCARD ::cmd::Lrf_calib::Offsets* release_day();
  ::cmd::Lrf_calib::Offsets* mutable_day();
  void set_allocated_day(::cmd::Lrf_calib::Offsets* value);
  void unsafe_arena_set_allocated_day(::cmd::Lrf_calib::Offsets* value);
  ::cmd::Lrf_calib::Offsets* unsafe_arena_release_day();

  private:
  const ::cmd::Lrf_calib::Offsets& _internal_day() const;
  ::cmd::Lrf_calib::Offsets* _internal_mutable_day();

  public:
  // .cmd.Lrf_calib.Offsets heat = 2;
  bool has_heat() const;
  private:
  bool _internal_has_heat() const;

  public:
  void clear_heat() ;
  const ::cmd::Lrf_calib::Offsets& heat() const;
  PROTOBUF_NODISCARD ::cmd::Lrf_calib::Offsets* release_heat();
  ::cmd::Lrf_calib::Offsets* mutable_heat();
  void set_allocated_heat(::cmd::Lrf_calib::Offsets* value);
  void unsafe_arena_set_allocated_heat(::cmd::Lrf_calib::Offsets* value);
  ::cmd::Lrf_calib::Offsets* unsafe_arena_release_heat();

  private:
  const ::cmd::Lrf_calib::Offsets& _internal_heat() const;
  ::cmd::Lrf_calib::Offsets* _internal_mutable_heat();

  public:
  void clear_channel();
  ChannelCase channel_case() const;
  // @@protoc_insertion_point(class_scope:cmd.Lrf_calib.Root)
 private:
  class _Internal;
  void set_has_day();
  void set_has_heat();
  inline bool has_channel() const;
  inline void clear_has_channel();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Root& from_msg);
    union ChannelUnion {
      constexpr ChannelUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::cmd::Lrf_calib::Offsets* day_;
      ::cmd::Lrf_calib::Offsets* heat_;
    } channel_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5flrf_5falign_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Root

// .cmd.Lrf_calib.Offsets day = 1;
inline bool Root::has_day() const {
  return channel_case() == kDay;
}
inline bool Root::_internal_has_day() const {
  return channel_case() == kDay;
}
inline void Root::set_has_day() {
  _impl_._oneof_case_[0] = kDay;
}
inline void Root::clear_day() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (channel_case() == kDay) {
    if (GetArena() == nullptr) {
      delete _impl_.channel_.day_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.channel_.day_);
    }
    clear_has_channel();
  }
}
inline ::cmd::Lrf_calib::Offsets* Root::release_day() {
  // @@protoc_insertion_point(field_release:cmd.Lrf_calib.Root.day)
  if (channel_case() == kDay) {
    clear_has_channel();
    auto* temp = _impl_.channel_.day_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.channel_.day_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::Lrf_calib::Offsets& Root::_internal_day() const {
  return channel_case() == kDay ? *_impl_.channel_.day_ : reinterpret_cast<::cmd::Lrf_calib::Offsets&>(::cmd::Lrf_calib::_Offsets_default_instance_);
}
inline const ::cmd::Lrf_calib::Offsets& Root::day() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Lrf_calib.Root.day)
  return _internal_day();
}
inline ::cmd::Lrf_calib::Offsets* Root::unsafe_arena_release_day() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Lrf_calib.Root.day)
  if (channel_case() == kDay) {
    clear_has_channel();
    auto* temp = _impl_.channel_.day_;
    _impl_.channel_.day_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_day(::cmd::Lrf_calib::Offsets* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_channel();
  if (value) {
    set_has_day();
    _impl_.channel_.day_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Lrf_calib.Root.day)
}
inline ::cmd::Lrf_calib::Offsets* Root::_internal_mutable_day() {
  if (channel_case() != kDay) {
    clear_channel();
    set_has_day();
    _impl_.channel_.day_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::Lrf_calib::Offsets>(GetArena());
  }
  return _impl_.channel_.day_;
}
inline ::cmd::Lrf_calib::Offsets* Root::mutable_day() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::Lrf_calib::Offsets* _msg = _internal_mutable_day();
  // @@protoc_insertion_point(field_mutable:cmd.Lrf_calib.Root.day)
  return _msg;
}

// .cmd.Lrf_calib.Offsets heat = 2;
inline bool Root::has_heat() const {
  return channel_case() == kHeat;
}
inline bool Root::_internal_has_heat() const {
  return channel_case() == kHeat;
}
inline void Root::set_has_heat() {
  _impl_._oneof_case_[0] = kHeat;
}
inline void Root::clear_heat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (channel_case() == kHeat) {
    if (GetArena() == nullptr) {
      delete _impl_.channel_.heat_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.channel_.heat_);
    }
    clear_has_channel();
  }
}
inline ::cmd::Lrf_calib::Offsets* Root::release_heat() {
  // @@protoc_insertion_point(field_release:cmd.Lrf_calib.Root.heat)
  if (channel_case() == kHeat) {
    clear_has_channel();
    auto* temp = _impl_.channel_.heat_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.channel_.heat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::Lrf_calib::Offsets& Root::_internal_heat() const {
  return channel_case() == kHeat ? *_impl_.channel_.heat_ : reinterpret_cast<::cmd::Lrf_calib::Offsets&>(::cmd::Lrf_calib::_Offsets_default_instance_);
}
inline const ::cmd::Lrf_calib::Offsets& Root::heat() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Lrf_calib.Root.heat)
  return _internal_heat();
}
inline ::cmd::Lrf_calib::Offsets* Root::unsafe_arena_release_heat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Lrf_calib.Root.heat)
  if (channel_case() == kHeat) {
    clear_has_channel();
    auto* temp = _impl_.channel_.heat_;
    _impl_.channel_.heat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_heat(::cmd::Lrf_calib::Offsets* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_channel();
  if (value) {
    set_has_heat();
    _impl_.channel_.heat_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Lrf_calib.Root.heat)
}
inline ::cmd::Lrf_calib::Offsets* Root::_internal_mutable_heat() {
  if (channel_case() != kHeat) {
    clear_channel();
    set_has_heat();
    _impl_.channel_.heat_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::Lrf_calib::Offsets>(GetArena());
  }
  return _impl_.channel_.heat_;
}
inline ::cmd::Lrf_calib::Offsets* Root::mutable_heat() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::Lrf_calib::Offsets* _msg = _internal_mutable_heat();
  // @@protoc_insertion_point(field_mutable:cmd.Lrf_calib.Root.heat)
  return _msg;
}

inline bool Root::has_channel() const {
  return channel_case() != CHANNEL_NOT_SET;
}
inline void Root::clear_has_channel() {
  _impl_._oneof_case_[0] = CHANNEL_NOT_SET;
}
inline Root::ChannelCase Root::channel_case() const {
  return Root::ChannelCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Offsets

// .cmd.Lrf_calib.SetOffsets set = 1;
inline bool Offsets::has_set() const {
  return cmd_case() == kSet;
}
inline bool Offsets::_internal_has_set() const {
  return cmd_case() == kSet;
}
inline void Offsets::set_has_set() {
  _impl_._oneof_case_[0] = kSet;
}
inline void Offsets::clear_set() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kSet) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.set_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.set_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::Lrf_calib::SetOffsets* Offsets::release_set() {
  // @@protoc_insertion_point(field_release:cmd.Lrf_calib.Offsets.set)
  if (cmd_case() == kSet) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::Lrf_calib::SetOffsets& Offsets::_internal_set() const {
  return cmd_case() == kSet ? *_impl_.cmd_.set_ : reinterpret_cast<::cmd::Lrf_calib::SetOffsets&>(::cmd::Lrf_calib::_SetOffsets_default_instance_);
}
inline const ::cmd::Lrf_calib::SetOffsets& Offsets::set() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Lrf_calib.Offsets.set)
  return _internal_set();
}
inline ::cmd::Lrf_calib::SetOffsets* Offsets::unsafe_arena_release_set() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Lrf_calib.Offsets.set)
  if (cmd_case() == kSet) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_;
    _impl_.cmd_.set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Offsets::unsafe_arena_set_allocated_set(::cmd::Lrf_calib::SetOffsets* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_set();
    _impl_.cmd_.set_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Lrf_calib.Offsets.set)
}
inline ::cmd::Lrf_calib::SetOffsets* Offsets::_internal_mutable_set() {
  if (cmd_case() != kSet) {
    clear_cmd();
    set_has_set();
    _impl_.cmd_.set_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::Lrf_calib::SetOffsets>(GetArena());
  }
  return _impl_.cmd_.set_;
}
inline ::cmd::Lrf_calib::SetOffsets* Offsets::mutable_set() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::Lrf_calib::SetOffsets* _msg = _internal_mutable_set();
  // @@protoc_insertion_point(field_mutable:cmd.Lrf_calib.Offsets.set)
  return _msg;
}

// .cmd.Lrf_calib.SaveOffsets save = 2;
inline bool Offsets::has_save() const {
  return cmd_case() == kSave;
}
inline bool Offsets::_internal_has_save() const {
  return cmd_case() == kSave;
}
inline void Offsets::set_has_save() {
  _impl_._oneof_case_[0] = kSave;
}
inline void Offsets::clear_save() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kSave) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.save_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.save_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::Lrf_calib::SaveOffsets* Offsets::release_save() {
  // @@protoc_insertion_point(field_release:cmd.Lrf_calib.Offsets.save)
  if (cmd_case() == kSave) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.save_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.save_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::Lrf_calib::SaveOffsets& Offsets::_internal_save() const {
  return cmd_case() == kSave ? *_impl_.cmd_.save_ : reinterpret_cast<::cmd::Lrf_calib::SaveOffsets&>(::cmd::Lrf_calib::_SaveOffsets_default_instance_);
}
inline const ::cmd::Lrf_calib::SaveOffsets& Offsets::save() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Lrf_calib.Offsets.save)
  return _internal_save();
}
inline ::cmd::Lrf_calib::SaveOffsets* Offsets::unsafe_arena_release_save() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Lrf_calib.Offsets.save)
  if (cmd_case() == kSave) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.save_;
    _impl_.cmd_.save_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Offsets::unsafe_arena_set_allocated_save(::cmd::Lrf_calib::SaveOffsets* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_save();
    _impl_.cmd_.save_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Lrf_calib.Offsets.save)
}
inline ::cmd::Lrf_calib::SaveOffsets* Offsets::_internal_mutable_save() {
  if (cmd_case() != kSave) {
    clear_cmd();
    set_has_save();
    _impl_.cmd_.save_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::Lrf_calib::SaveOffsets>(GetArena());
  }
  return _impl_.cmd_.save_;
}
inline ::cmd::Lrf_calib::SaveOffsets* Offsets::mutable_save() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::Lrf_calib::SaveOffsets* _msg = _internal_mutable_save();
  // @@protoc_insertion_point(field_mutable:cmd.Lrf_calib.Offsets.save)
  return _msg;
}

// .cmd.Lrf_calib.ResetOffsets reset = 3;
inline bool Offsets::has_reset() const {
  return cmd_case() == kReset;
}
inline bool Offsets::_internal_has_reset() const {
  return cmd_case() == kReset;
}
inline void Offsets::set_has_reset() {
  _impl_._oneof_case_[0] = kReset;
}
inline void Offsets::clear_reset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kReset) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.reset_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.reset_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::Lrf_calib::ResetOffsets* Offsets::release_reset() {
  // @@protoc_insertion_point(field_release:cmd.Lrf_calib.Offsets.reset)
  if (cmd_case() == kReset) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.reset_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.reset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::Lrf_calib::ResetOffsets& Offsets::_internal_reset() const {
  return cmd_case() == kReset ? *_impl_.cmd_.reset_ : reinterpret_cast<::cmd::Lrf_calib::ResetOffsets&>(::cmd::Lrf_calib::_ResetOffsets_default_instance_);
}
inline const ::cmd::Lrf_calib::ResetOffsets& Offsets::reset() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Lrf_calib.Offsets.reset)
  return _internal_reset();
}
inline ::cmd::Lrf_calib::ResetOffsets* Offsets::unsafe_arena_release_reset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Lrf_calib.Offsets.reset)
  if (cmd_case() == kReset) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.reset_;
    _impl_.cmd_.reset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Offsets::unsafe_arena_set_allocated_reset(::cmd::Lrf_calib::ResetOffsets* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_reset();
    _impl_.cmd_.reset_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Lrf_calib.Offsets.reset)
}
inline ::cmd::Lrf_calib::ResetOffsets* Offsets::_internal_mutable_reset() {
  if (cmd_case() != kReset) {
    clear_cmd();
    set_has_reset();
    _impl_.cmd_.reset_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::Lrf_calib::ResetOffsets>(GetArena());
  }
  return _impl_.cmd_.reset_;
}
inline ::cmd::Lrf_calib::ResetOffsets* Offsets::mutable_reset() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::Lrf_calib::ResetOffsets* _msg = _internal_mutable_reset();
  // @@protoc_insertion_point(field_mutable:cmd.Lrf_calib.Offsets.reset)
  return _msg;
}

// .cmd.Lrf_calib.ShiftOffsetsBy shift = 4;
inline bool Offsets::has_shift() const {
  return cmd_case() == kShift;
}
inline bool Offsets::_internal_has_shift() const {
  return cmd_case() == kShift;
}
inline void Offsets::set_has_shift() {
  _impl_._oneof_case_[0] = kShift;
}
inline void Offsets::clear_shift() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kShift) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.shift_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.shift_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::Lrf_calib::ShiftOffsetsBy* Offsets::release_shift() {
  // @@protoc_insertion_point(field_release:cmd.Lrf_calib.Offsets.shift)
  if (cmd_case() == kShift) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.shift_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.shift_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::Lrf_calib::ShiftOffsetsBy& Offsets::_internal_shift() const {
  return cmd_case() == kShift ? *_impl_.cmd_.shift_ : reinterpret_cast<::cmd::Lrf_calib::ShiftOffsetsBy&>(::cmd::Lrf_calib::_ShiftOffsetsBy_default_instance_);
}
inline const ::cmd::Lrf_calib::ShiftOffsetsBy& Offsets::shift() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Lrf_calib.Offsets.shift)
  return _internal_shift();
}
inline ::cmd::Lrf_calib::ShiftOffsetsBy* Offsets::unsafe_arena_release_shift() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Lrf_calib.Offsets.shift)
  if (cmd_case() == kShift) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.shift_;
    _impl_.cmd_.shift_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Offsets::unsafe_arena_set_allocated_shift(::cmd::Lrf_calib::ShiftOffsetsBy* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_shift();
    _impl_.cmd_.shift_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Lrf_calib.Offsets.shift)
}
inline ::cmd::Lrf_calib::ShiftOffsetsBy* Offsets::_internal_mutable_shift() {
  if (cmd_case() != kShift) {
    clear_cmd();
    set_has_shift();
    _impl_.cmd_.shift_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::Lrf_calib::ShiftOffsetsBy>(GetArena());
  }
  return _impl_.cmd_.shift_;
}
inline ::cmd::Lrf_calib::ShiftOffsetsBy* Offsets::mutable_shift() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::Lrf_calib::ShiftOffsetsBy* _msg = _internal_mutable_shift();
  // @@protoc_insertion_point(field_mutable:cmd.Lrf_calib.Offsets.shift)
  return _msg;
}

inline bool Offsets::has_cmd() const {
  return cmd_case() != CMD_NOT_SET;
}
inline void Offsets::clear_has_cmd() {
  _impl_._oneof_case_[0] = CMD_NOT_SET;
}
inline Offsets::CmdCase Offsets::cmd_case() const {
  return Offsets::CmdCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// SetOffsets

// int32 x = 1;
inline void SetOffsets::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0;
}
inline ::int32_t SetOffsets::x() const {
  // @@protoc_insertion_point(field_get:cmd.Lrf_calib.SetOffsets.x)
  return _internal_x();
}
inline void SetOffsets::set_x(::int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:cmd.Lrf_calib.SetOffsets.x)
}
inline ::int32_t SetOffsets::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void SetOffsets::_internal_set_x(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// int32 y = 2;
inline void SetOffsets::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0;
}
inline ::int32_t SetOffsets::y() const {
  // @@protoc_insertion_point(field_get:cmd.Lrf_calib.SetOffsets.y)
  return _internal_y();
}
inline void SetOffsets::set_y(::int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:cmd.Lrf_calib.SetOffsets.y)
}
inline ::int32_t SetOffsets::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void SetOffsets::_internal_set_y(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// -------------------------------------------------------------------

// ShiftOffsetsBy

// int32 x = 1;
inline void ShiftOffsetsBy::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0;
}
inline ::int32_t ShiftOffsetsBy::x() const {
  // @@protoc_insertion_point(field_get:cmd.Lrf_calib.ShiftOffsetsBy.x)
  return _internal_x();
}
inline void ShiftOffsetsBy::set_x(::int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:cmd.Lrf_calib.ShiftOffsetsBy.x)
}
inline ::int32_t ShiftOffsetsBy::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void ShiftOffsetsBy::_internal_set_x(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// int32 y = 2;
inline void ShiftOffsetsBy::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0;
}
inline ::int32_t ShiftOffsetsBy::y() const {
  // @@protoc_insertion_point(field_get:cmd.Lrf_calib.ShiftOffsetsBy.y)
  return _internal_y();
}
inline void ShiftOffsetsBy::set_y(::int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:cmd.Lrf_calib.ShiftOffsetsBy.y)
}
inline ::int32_t ShiftOffsetsBy::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void ShiftOffsetsBy::_internal_set_y(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// -------------------------------------------------------------------

// ResetOffsets

// -------------------------------------------------------------------

// SaveOffsets

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Lrf_calib
}  // namespace cmd


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // jon_5fshared_5fcmd_5flrf_5falign_2eproto_2epb_2eh
