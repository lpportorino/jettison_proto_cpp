// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: jon_shared_cmd_compass.proto
// Protobuf C++ Version: 5.29.2

#ifndef jon_5fshared_5fcmd_5fcompass_2eproto_2epb_2eh
#define jon_5fshared_5fcmd_5fcompass_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_jon_5fshared_5fcmd_5fcompass_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_jon_5fshared_5fcmd_5fcompass_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_jon_5fshared_5fcmd_5fcompass_2eproto;
namespace cmd {
namespace Compass {
class CalibrateCencel;
struct CalibrateCencelDefaultTypeInternal;
extern CalibrateCencelDefaultTypeInternal _CalibrateCencel_default_instance_;
class CalibrateNext;
struct CalibrateNextDefaultTypeInternal;
extern CalibrateNextDefaultTypeInternal _CalibrateNext_default_instance_;
class CalibrateStartLong;
struct CalibrateStartLongDefaultTypeInternal;
extern CalibrateStartLongDefaultTypeInternal _CalibrateStartLong_default_instance_;
class CalibrateStartShort;
struct CalibrateStartShortDefaultTypeInternal;
extern CalibrateStartShortDefaultTypeInternal _CalibrateStartShort_default_instance_;
class GetMeteo;
struct GetMeteoDefaultTypeInternal;
extern GetMeteoDefaultTypeInternal _GetMeteo_default_instance_;
class Next;
struct NextDefaultTypeInternal;
extern NextDefaultTypeInternal _Next_default_instance_;
class Root;
struct RootDefaultTypeInternal;
extern RootDefaultTypeInternal _Root_default_instance_;
class SetMagneticDeclination;
struct SetMagneticDeclinationDefaultTypeInternal;
extern SetMagneticDeclinationDefaultTypeInternal _SetMagneticDeclination_default_instance_;
class SetOffsetAngleAzimuth;
struct SetOffsetAngleAzimuthDefaultTypeInternal;
extern SetOffsetAngleAzimuthDefaultTypeInternal _SetOffsetAngleAzimuth_default_instance_;
class SetOffsetAngleElevation;
struct SetOffsetAngleElevationDefaultTypeInternal;
extern SetOffsetAngleElevationDefaultTypeInternal _SetOffsetAngleElevation_default_instance_;
class SetUseRotaryPosition;
struct SetUseRotaryPositionDefaultTypeInternal;
extern SetUseRotaryPositionDefaultTypeInternal _SetUseRotaryPosition_default_instance_;
class Start;
struct StartDefaultTypeInternal;
extern StartDefaultTypeInternal _Start_default_instance_;
class Stop;
struct StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
}  // namespace Compass
}  // namespace cmd
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cmd {
namespace Compass {

// ===================================================================


// -------------------------------------------------------------------

class Stop final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.Compass.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Stop* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Stop));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Stop(
      ::google::protobuf::internal::ConstantInitialized);

  inline Stop(const Stop& from) : Stop(nullptr, from) {}
  inline Stop(Stop&& from) noexcept
      : Stop(nullptr, std::move(from)) {}
  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
        &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Stop& a, Stop& b) { a.Swap(&b); }
  inline void Swap(Stop* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stop* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Stop>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Stop& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Stop& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.Compass.Stop"; }

 protected:
  explicit Stop(::google::protobuf::Arena* arena);
  Stop(::google::protobuf::Arena* arena, const Stop& from);
  Stop(::google::protobuf::Arena* arena, Stop&& from) noexcept
      : Stop(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.Compass.Stop)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Stop& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fcompass_2eproto;
};
// -------------------------------------------------------------------

class Start final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.Compass.Start) */ {
 public:
  inline Start() : Start(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Start* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Start));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Start(
      ::google::protobuf::internal::ConstantInitialized);

  inline Start(const Start& from) : Start(nullptr, from) {}
  inline Start(Start&& from) noexcept
      : Start(nullptr, std::move(from)) {}
  inline Start& operator=(const Start& from) {
    CopyFrom(from);
    return *this;
  }
  inline Start& operator=(Start&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Start& default_instance() {
    return *internal_default_instance();
  }
  static inline const Start* internal_default_instance() {
    return reinterpret_cast<const Start*>(
        &_Start_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Start& a, Start& b) { a.Swap(&b); }
  inline void Swap(Start* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Start* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Start* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Start>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Start& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Start& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.Compass.Start"; }

 protected:
  explicit Start(::google::protobuf::Arena* arena);
  Start(::google::protobuf::Arena* arena, const Start& from);
  Start(::google::protobuf::Arena* arena, Start&& from) noexcept
      : Start(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.Compass.Start)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Start& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fcompass_2eproto;
};
// -------------------------------------------------------------------

class SetUseRotaryPosition final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.Compass.SetUseRotaryPosition) */ {
 public:
  inline SetUseRotaryPosition() : SetUseRotaryPosition(nullptr) {}
  ~SetUseRotaryPosition() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetUseRotaryPosition* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetUseRotaryPosition));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetUseRotaryPosition(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetUseRotaryPosition(const SetUseRotaryPosition& from) : SetUseRotaryPosition(nullptr, from) {}
  inline SetUseRotaryPosition(SetUseRotaryPosition&& from) noexcept
      : SetUseRotaryPosition(nullptr, std::move(from)) {}
  inline SetUseRotaryPosition& operator=(const SetUseRotaryPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetUseRotaryPosition& operator=(SetUseRotaryPosition&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetUseRotaryPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetUseRotaryPosition* internal_default_instance() {
    return reinterpret_cast<const SetUseRotaryPosition*>(
        &_SetUseRotaryPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(SetUseRotaryPosition& a, SetUseRotaryPosition& b) { a.Swap(&b); }
  inline void Swap(SetUseRotaryPosition* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetUseRotaryPosition* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetUseRotaryPosition* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetUseRotaryPosition>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetUseRotaryPosition& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetUseRotaryPosition& from) { SetUseRotaryPosition::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetUseRotaryPosition* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.Compass.SetUseRotaryPosition"; }

 protected:
  explicit SetUseRotaryPosition(::google::protobuf::Arena* arena);
  SetUseRotaryPosition(::google::protobuf::Arena* arena, const SetUseRotaryPosition& from);
  SetUseRotaryPosition(::google::protobuf::Arena* arena, SetUseRotaryPosition&& from) noexcept
      : SetUseRotaryPosition(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFlagFieldNumber = 1,
  };
  // bool flag = 1;
  void clear_flag() ;
  bool flag() const;
  void set_flag(bool value);

  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cmd.Compass.SetUseRotaryPosition)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetUseRotaryPosition& from_msg);
    bool flag_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fcompass_2eproto;
};
// -------------------------------------------------------------------

class SetOffsetAngleElevation final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.Compass.SetOffsetAngleElevation) */ {
 public:
  inline SetOffsetAngleElevation() : SetOffsetAngleElevation(nullptr) {}
  ~SetOffsetAngleElevation() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetOffsetAngleElevation* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetOffsetAngleElevation));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetOffsetAngleElevation(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetOffsetAngleElevation(const SetOffsetAngleElevation& from) : SetOffsetAngleElevation(nullptr, from) {}
  inline SetOffsetAngleElevation(SetOffsetAngleElevation&& from) noexcept
      : SetOffsetAngleElevation(nullptr, std::move(from)) {}
  inline SetOffsetAngleElevation& operator=(const SetOffsetAngleElevation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetOffsetAngleElevation& operator=(SetOffsetAngleElevation&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetOffsetAngleElevation& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetOffsetAngleElevation* internal_default_instance() {
    return reinterpret_cast<const SetOffsetAngleElevation*>(
        &_SetOffsetAngleElevation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(SetOffsetAngleElevation& a, SetOffsetAngleElevation& b) { a.Swap(&b); }
  inline void Swap(SetOffsetAngleElevation* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetOffsetAngleElevation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetOffsetAngleElevation* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetOffsetAngleElevation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetOffsetAngleElevation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetOffsetAngleElevation& from) { SetOffsetAngleElevation::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetOffsetAngleElevation* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.Compass.SetOffsetAngleElevation"; }

 protected:
  explicit SetOffsetAngleElevation(::google::protobuf::Arena* arena);
  SetOffsetAngleElevation(::google::protobuf::Arena* arena, const SetOffsetAngleElevation& from);
  SetOffsetAngleElevation(::google::protobuf::Arena* arena, SetOffsetAngleElevation&& from) noexcept
      : SetOffsetAngleElevation(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
  };
  // double value = 1;
  void clear_value() ;
  double value() const;
  void set_value(double value);

  private:
  double _internal_value() const;
  void _internal_set_value(double value);

  public:
  // @@protoc_insertion_point(class_scope:cmd.Compass.SetOffsetAngleElevation)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetOffsetAngleElevation& from_msg);
    double value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fcompass_2eproto;
};
// -------------------------------------------------------------------

class SetOffsetAngleAzimuth final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.Compass.SetOffsetAngleAzimuth) */ {
 public:
  inline SetOffsetAngleAzimuth() : SetOffsetAngleAzimuth(nullptr) {}
  ~SetOffsetAngleAzimuth() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetOffsetAngleAzimuth* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetOffsetAngleAzimuth));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetOffsetAngleAzimuth(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetOffsetAngleAzimuth(const SetOffsetAngleAzimuth& from) : SetOffsetAngleAzimuth(nullptr, from) {}
  inline SetOffsetAngleAzimuth(SetOffsetAngleAzimuth&& from) noexcept
      : SetOffsetAngleAzimuth(nullptr, std::move(from)) {}
  inline SetOffsetAngleAzimuth& operator=(const SetOffsetAngleAzimuth& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetOffsetAngleAzimuth& operator=(SetOffsetAngleAzimuth&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetOffsetAngleAzimuth& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetOffsetAngleAzimuth* internal_default_instance() {
    return reinterpret_cast<const SetOffsetAngleAzimuth*>(
        &_SetOffsetAngleAzimuth_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(SetOffsetAngleAzimuth& a, SetOffsetAngleAzimuth& b) { a.Swap(&b); }
  inline void Swap(SetOffsetAngleAzimuth* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetOffsetAngleAzimuth* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetOffsetAngleAzimuth* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetOffsetAngleAzimuth>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetOffsetAngleAzimuth& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetOffsetAngleAzimuth& from) { SetOffsetAngleAzimuth::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetOffsetAngleAzimuth* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.Compass.SetOffsetAngleAzimuth"; }

 protected:
  explicit SetOffsetAngleAzimuth(::google::protobuf::Arena* arena);
  SetOffsetAngleAzimuth(::google::protobuf::Arena* arena, const SetOffsetAngleAzimuth& from);
  SetOffsetAngleAzimuth(::google::protobuf::Arena* arena, SetOffsetAngleAzimuth&& from) noexcept
      : SetOffsetAngleAzimuth(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
  };
  // double value = 1;
  void clear_value() ;
  double value() const;
  void set_value(double value);

  private:
  double _internal_value() const;
  void _internal_set_value(double value);

  public:
  // @@protoc_insertion_point(class_scope:cmd.Compass.SetOffsetAngleAzimuth)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetOffsetAngleAzimuth& from_msg);
    double value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fcompass_2eproto;
};
// -------------------------------------------------------------------

class SetMagneticDeclination final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.Compass.SetMagneticDeclination) */ {
 public:
  inline SetMagneticDeclination() : SetMagneticDeclination(nullptr) {}
  ~SetMagneticDeclination() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SetMagneticDeclination* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SetMagneticDeclination));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SetMagneticDeclination(
      ::google::protobuf::internal::ConstantInitialized);

  inline SetMagneticDeclination(const SetMagneticDeclination& from) : SetMagneticDeclination(nullptr, from) {}
  inline SetMagneticDeclination(SetMagneticDeclination&& from) noexcept
      : SetMagneticDeclination(nullptr, std::move(from)) {}
  inline SetMagneticDeclination& operator=(const SetMagneticDeclination& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMagneticDeclination& operator=(SetMagneticDeclination&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetMagneticDeclination& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetMagneticDeclination* internal_default_instance() {
    return reinterpret_cast<const SetMagneticDeclination*>(
        &_SetMagneticDeclination_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(SetMagneticDeclination& a, SetMagneticDeclination& b) { a.Swap(&b); }
  inline void Swap(SetMagneticDeclination* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetMagneticDeclination* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetMagneticDeclination* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SetMagneticDeclination>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetMagneticDeclination& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SetMagneticDeclination& from) { SetMagneticDeclination::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SetMagneticDeclination* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.Compass.SetMagneticDeclination"; }

 protected:
  explicit SetMagneticDeclination(::google::protobuf::Arena* arena);
  SetMagneticDeclination(::google::protobuf::Arena* arena, const SetMagneticDeclination& from);
  SetMagneticDeclination(::google::protobuf::Arena* arena, SetMagneticDeclination&& from) noexcept
      : SetMagneticDeclination(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
  };
  // double value = 1;
  void clear_value() ;
  double value() const;
  void set_value(double value);

  private:
  double _internal_value() const;
  void _internal_set_value(double value);

  public:
  // @@protoc_insertion_point(class_scope:cmd.Compass.SetMagneticDeclination)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SetMagneticDeclination& from_msg);
    double value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fcompass_2eproto;
};
// -------------------------------------------------------------------

class Next final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.Compass.Next) */ {
 public:
  inline Next() : Next(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Next* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Next));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Next(
      ::google::protobuf::internal::ConstantInitialized);

  inline Next(const Next& from) : Next(nullptr, from) {}
  inline Next(Next&& from) noexcept
      : Next(nullptr, std::move(from)) {}
  inline Next& operator=(const Next& from) {
    CopyFrom(from);
    return *this;
  }
  inline Next& operator=(Next&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Next& default_instance() {
    return *internal_default_instance();
  }
  static inline const Next* internal_default_instance() {
    return reinterpret_cast<const Next*>(
        &_Next_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Next& a, Next& b) { a.Swap(&b); }
  inline void Swap(Next* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Next* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Next* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Next>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Next& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Next& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.Compass.Next"; }

 protected:
  explicit Next(::google::protobuf::Arena* arena);
  Next(::google::protobuf::Arena* arena, const Next& from);
  Next(::google::protobuf::Arena* arena, Next&& from) noexcept
      : Next(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.Compass.Next)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Next& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fcompass_2eproto;
};
// -------------------------------------------------------------------

class GetMeteo final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.Compass.GetMeteo) */ {
 public:
  inline GetMeteo() : GetMeteo(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetMeteo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetMeteo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetMeteo(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetMeteo(const GetMeteo& from) : GetMeteo(nullptr, from) {}
  inline GetMeteo(GetMeteo&& from) noexcept
      : GetMeteo(nullptr, std::move(from)) {}
  inline GetMeteo& operator=(const GetMeteo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMeteo& operator=(GetMeteo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMeteo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMeteo* internal_default_instance() {
    return reinterpret_cast<const GetMeteo*>(
        &_GetMeteo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(GetMeteo& a, GetMeteo& b) { a.Swap(&b); }
  inline void Swap(GetMeteo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMeteo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMeteo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<GetMeteo>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetMeteo& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetMeteo& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.Compass.GetMeteo"; }

 protected:
  explicit GetMeteo(::google::protobuf::Arena* arena);
  GetMeteo(::google::protobuf::Arena* arena, const GetMeteo& from);
  GetMeteo(::google::protobuf::Arena* arena, GetMeteo&& from) noexcept
      : GetMeteo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.Compass.GetMeteo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetMeteo& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fcompass_2eproto;
};
// -------------------------------------------------------------------

class CalibrateStartShort final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.Compass.CalibrateStartShort) */ {
 public:
  inline CalibrateStartShort() : CalibrateStartShort(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CalibrateStartShort* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CalibrateStartShort));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CalibrateStartShort(
      ::google::protobuf::internal::ConstantInitialized);

  inline CalibrateStartShort(const CalibrateStartShort& from) : CalibrateStartShort(nullptr, from) {}
  inline CalibrateStartShort(CalibrateStartShort&& from) noexcept
      : CalibrateStartShort(nullptr, std::move(from)) {}
  inline CalibrateStartShort& operator=(const CalibrateStartShort& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrateStartShort& operator=(CalibrateStartShort&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalibrateStartShort& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalibrateStartShort* internal_default_instance() {
    return reinterpret_cast<const CalibrateStartShort*>(
        &_CalibrateStartShort_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(CalibrateStartShort& a, CalibrateStartShort& b) { a.Swap(&b); }
  inline void Swap(CalibrateStartShort* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibrateStartShort* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalibrateStartShort* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<CalibrateStartShort>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CalibrateStartShort& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CalibrateStartShort& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.Compass.CalibrateStartShort"; }

 protected:
  explicit CalibrateStartShort(::google::protobuf::Arena* arena);
  CalibrateStartShort(::google::protobuf::Arena* arena, const CalibrateStartShort& from);
  CalibrateStartShort(::google::protobuf::Arena* arena, CalibrateStartShort&& from) noexcept
      : CalibrateStartShort(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.Compass.CalibrateStartShort)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CalibrateStartShort& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fcompass_2eproto;
};
// -------------------------------------------------------------------

class CalibrateStartLong final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.Compass.CalibrateStartLong) */ {
 public:
  inline CalibrateStartLong() : CalibrateStartLong(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CalibrateStartLong* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CalibrateStartLong));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CalibrateStartLong(
      ::google::protobuf::internal::ConstantInitialized);

  inline CalibrateStartLong(const CalibrateStartLong& from) : CalibrateStartLong(nullptr, from) {}
  inline CalibrateStartLong(CalibrateStartLong&& from) noexcept
      : CalibrateStartLong(nullptr, std::move(from)) {}
  inline CalibrateStartLong& operator=(const CalibrateStartLong& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrateStartLong& operator=(CalibrateStartLong&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalibrateStartLong& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalibrateStartLong* internal_default_instance() {
    return reinterpret_cast<const CalibrateStartLong*>(
        &_CalibrateStartLong_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(CalibrateStartLong& a, CalibrateStartLong& b) { a.Swap(&b); }
  inline void Swap(CalibrateStartLong* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibrateStartLong* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalibrateStartLong* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<CalibrateStartLong>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CalibrateStartLong& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CalibrateStartLong& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.Compass.CalibrateStartLong"; }

 protected:
  explicit CalibrateStartLong(::google::protobuf::Arena* arena);
  CalibrateStartLong(::google::protobuf::Arena* arena, const CalibrateStartLong& from);
  CalibrateStartLong(::google::protobuf::Arena* arena, CalibrateStartLong&& from) noexcept
      : CalibrateStartLong(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.Compass.CalibrateStartLong)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CalibrateStartLong& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fcompass_2eproto;
};
// -------------------------------------------------------------------

class CalibrateNext final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.Compass.CalibrateNext) */ {
 public:
  inline CalibrateNext() : CalibrateNext(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CalibrateNext* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CalibrateNext));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CalibrateNext(
      ::google::protobuf::internal::ConstantInitialized);

  inline CalibrateNext(const CalibrateNext& from) : CalibrateNext(nullptr, from) {}
  inline CalibrateNext(CalibrateNext&& from) noexcept
      : CalibrateNext(nullptr, std::move(from)) {}
  inline CalibrateNext& operator=(const CalibrateNext& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrateNext& operator=(CalibrateNext&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalibrateNext& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalibrateNext* internal_default_instance() {
    return reinterpret_cast<const CalibrateNext*>(
        &_CalibrateNext_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(CalibrateNext& a, CalibrateNext& b) { a.Swap(&b); }
  inline void Swap(CalibrateNext* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibrateNext* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalibrateNext* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<CalibrateNext>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CalibrateNext& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CalibrateNext& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.Compass.CalibrateNext"; }

 protected:
  explicit CalibrateNext(::google::protobuf::Arena* arena);
  CalibrateNext(::google::protobuf::Arena* arena, const CalibrateNext& from);
  CalibrateNext(::google::protobuf::Arena* arena, CalibrateNext&& from) noexcept
      : CalibrateNext(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.Compass.CalibrateNext)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CalibrateNext& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fcompass_2eproto;
};
// -------------------------------------------------------------------

class CalibrateCencel final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.Compass.CalibrateCencel) */ {
 public:
  inline CalibrateCencel() : CalibrateCencel(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CalibrateCencel* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CalibrateCencel));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CalibrateCencel(
      ::google::protobuf::internal::ConstantInitialized);

  inline CalibrateCencel(const CalibrateCencel& from) : CalibrateCencel(nullptr, from) {}
  inline CalibrateCencel(CalibrateCencel&& from) noexcept
      : CalibrateCencel(nullptr, std::move(from)) {}
  inline CalibrateCencel& operator=(const CalibrateCencel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrateCencel& operator=(CalibrateCencel&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalibrateCencel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalibrateCencel* internal_default_instance() {
    return reinterpret_cast<const CalibrateCencel*>(
        &_CalibrateCencel_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(CalibrateCencel& a, CalibrateCencel& b) { a.Swap(&b); }
  inline void Swap(CalibrateCencel* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibrateCencel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalibrateCencel* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<CalibrateCencel>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CalibrateCencel& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CalibrateCencel& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.Compass.CalibrateCencel"; }

 protected:
  explicit CalibrateCencel(::google::protobuf::Arena* arena);
  CalibrateCencel(::google::protobuf::Arena* arena, const CalibrateCencel& from);
  CalibrateCencel(::google::protobuf::Arena* arena, CalibrateCencel&& from) noexcept
      : CalibrateCencel(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.Compass.CalibrateCencel)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CalibrateCencel& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fcompass_2eproto;
};
// -------------------------------------------------------------------

class Root final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.Compass.Root) */ {
 public:
  inline Root() : Root(nullptr) {}
  ~Root() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Root* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Root));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Root(
      ::google::protobuf::internal::ConstantInitialized);

  inline Root(const Root& from) : Root(nullptr, from) {}
  inline Root(Root&& from) noexcept
      : Root(nullptr, std::move(from)) {}
  inline Root& operator=(const Root& from) {
    CopyFrom(from);
    return *this;
  }
  inline Root& operator=(Root&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Root& default_instance() {
    return *internal_default_instance();
  }
  enum CmdCase {
    kStart = 1,
    kStop = 2,
    kSetMagneticDeclination = 3,
    kSetOffsetAngleAzimuth = 4,
    kSetOffsetAngleElevation = 5,
    kSetUseRotaryPosition = 6,
    kStartCalibrateLong = 7,
    kStartCalibrateShort = 8,
    kCalibrateNext = 9,
    kCalibrateCencel = 10,
    kGetMeteo = 11,
    CMD_NOT_SET = 0,
  };
  static inline const Root* internal_default_instance() {
    return reinterpret_cast<const Root*>(
        &_Root_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Root& a, Root& b) { a.Swap(&b); }
  inline void Swap(Root* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Root* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Root* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Root>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Root& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Root& from) { Root::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Root* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.Compass.Root"; }

 protected:
  explicit Root(::google::protobuf::Arena* arena);
  Root(::google::protobuf::Arena* arena, const Root& from);
  Root(::google::protobuf::Arena* arena, Root&& from) noexcept
      : Root(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStartFieldNumber = 1,
    kStopFieldNumber = 2,
    kSetMagneticDeclinationFieldNumber = 3,
    kSetOffsetAngleAzimuthFieldNumber = 4,
    kSetOffsetAngleElevationFieldNumber = 5,
    kSetUseRotaryPositionFieldNumber = 6,
    kStartCalibrateLongFieldNumber = 7,
    kStartCalibrateShortFieldNumber = 8,
    kCalibrateNextFieldNumber = 9,
    kCalibrateCencelFieldNumber = 10,
    kGetMeteoFieldNumber = 11,
  };
  // .cmd.Compass.Start start = 1;
  bool has_start() const;
  private:
  bool _internal_has_start() const;

  public:
  void clear_start() ;
  const ::cmd::Compass::Start& start() const;
  PROTOBUF_NODISCARD ::cmd::Compass::Start* release_start();
  ::cmd::Compass::Start* mutable_start();
  void set_allocated_start(::cmd::Compass::Start* value);
  void unsafe_arena_set_allocated_start(::cmd::Compass::Start* value);
  ::cmd::Compass::Start* unsafe_arena_release_start();

  private:
  const ::cmd::Compass::Start& _internal_start() const;
  ::cmd::Compass::Start* _internal_mutable_start();

  public:
  // .cmd.Compass.Stop stop = 2;
  bool has_stop() const;
  private:
  bool _internal_has_stop() const;

  public:
  void clear_stop() ;
  const ::cmd::Compass::Stop& stop() const;
  PROTOBUF_NODISCARD ::cmd::Compass::Stop* release_stop();
  ::cmd::Compass::Stop* mutable_stop();
  void set_allocated_stop(::cmd::Compass::Stop* value);
  void unsafe_arena_set_allocated_stop(::cmd::Compass::Stop* value);
  ::cmd::Compass::Stop* unsafe_arena_release_stop();

  private:
  const ::cmd::Compass::Stop& _internal_stop() const;
  ::cmd::Compass::Stop* _internal_mutable_stop();

  public:
  // .cmd.Compass.SetMagneticDeclination set_magnetic_declination = 3;
  bool has_set_magnetic_declination() const;
  private:
  bool _internal_has_set_magnetic_declination() const;

  public:
  void clear_set_magnetic_declination() ;
  const ::cmd::Compass::SetMagneticDeclination& set_magnetic_declination() const;
  PROTOBUF_NODISCARD ::cmd::Compass::SetMagneticDeclination* release_set_magnetic_declination();
  ::cmd::Compass::SetMagneticDeclination* mutable_set_magnetic_declination();
  void set_allocated_set_magnetic_declination(::cmd::Compass::SetMagneticDeclination* value);
  void unsafe_arena_set_allocated_set_magnetic_declination(::cmd::Compass::SetMagneticDeclination* value);
  ::cmd::Compass::SetMagneticDeclination* unsafe_arena_release_set_magnetic_declination();

  private:
  const ::cmd::Compass::SetMagneticDeclination& _internal_set_magnetic_declination() const;
  ::cmd::Compass::SetMagneticDeclination* _internal_mutable_set_magnetic_declination();

  public:
  // .cmd.Compass.SetOffsetAngleAzimuth set_offset_angle_azimuth = 4;
  bool has_set_offset_angle_azimuth() const;
  private:
  bool _internal_has_set_offset_angle_azimuth() const;

  public:
  void clear_set_offset_angle_azimuth() ;
  const ::cmd::Compass::SetOffsetAngleAzimuth& set_offset_angle_azimuth() const;
  PROTOBUF_NODISCARD ::cmd::Compass::SetOffsetAngleAzimuth* release_set_offset_angle_azimuth();
  ::cmd::Compass::SetOffsetAngleAzimuth* mutable_set_offset_angle_azimuth();
  void set_allocated_set_offset_angle_azimuth(::cmd::Compass::SetOffsetAngleAzimuth* value);
  void unsafe_arena_set_allocated_set_offset_angle_azimuth(::cmd::Compass::SetOffsetAngleAzimuth* value);
  ::cmd::Compass::SetOffsetAngleAzimuth* unsafe_arena_release_set_offset_angle_azimuth();

  private:
  const ::cmd::Compass::SetOffsetAngleAzimuth& _internal_set_offset_angle_azimuth() const;
  ::cmd::Compass::SetOffsetAngleAzimuth* _internal_mutable_set_offset_angle_azimuth();

  public:
  // .cmd.Compass.SetOffsetAngleElevation set_offset_angle_elevation = 5;
  bool has_set_offset_angle_elevation() const;
  private:
  bool _internal_has_set_offset_angle_elevation() const;

  public:
  void clear_set_offset_angle_elevation() ;
  const ::cmd::Compass::SetOffsetAngleElevation& set_offset_angle_elevation() const;
  PROTOBUF_NODISCARD ::cmd::Compass::SetOffsetAngleElevation* release_set_offset_angle_elevation();
  ::cmd::Compass::SetOffsetAngleElevation* mutable_set_offset_angle_elevation();
  void set_allocated_set_offset_angle_elevation(::cmd::Compass::SetOffsetAngleElevation* value);
  void unsafe_arena_set_allocated_set_offset_angle_elevation(::cmd::Compass::SetOffsetAngleElevation* value);
  ::cmd::Compass::SetOffsetAngleElevation* unsafe_arena_release_set_offset_angle_elevation();

  private:
  const ::cmd::Compass::SetOffsetAngleElevation& _internal_set_offset_angle_elevation() const;
  ::cmd::Compass::SetOffsetAngleElevation* _internal_mutable_set_offset_angle_elevation();

  public:
  // .cmd.Compass.SetUseRotaryPosition set_use_rotary_position = 6;
  bool has_set_use_rotary_position() const;
  private:
  bool _internal_has_set_use_rotary_position() const;

  public:
  void clear_set_use_rotary_position() ;
  const ::cmd::Compass::SetUseRotaryPosition& set_use_rotary_position() const;
  PROTOBUF_NODISCARD ::cmd::Compass::SetUseRotaryPosition* release_set_use_rotary_position();
  ::cmd::Compass::SetUseRotaryPosition* mutable_set_use_rotary_position();
  void set_allocated_set_use_rotary_position(::cmd::Compass::SetUseRotaryPosition* value);
  void unsafe_arena_set_allocated_set_use_rotary_position(::cmd::Compass::SetUseRotaryPosition* value);
  ::cmd::Compass::SetUseRotaryPosition* unsafe_arena_release_set_use_rotary_position();

  private:
  const ::cmd::Compass::SetUseRotaryPosition& _internal_set_use_rotary_position() const;
  ::cmd::Compass::SetUseRotaryPosition* _internal_mutable_set_use_rotary_position();

  public:
  // .cmd.Compass.CalibrateStartLong start_calibrate_long = 7;
  bool has_start_calibrate_long() const;
  private:
  bool _internal_has_start_calibrate_long() const;

  public:
  void clear_start_calibrate_long() ;
  const ::cmd::Compass::CalibrateStartLong& start_calibrate_long() const;
  PROTOBUF_NODISCARD ::cmd::Compass::CalibrateStartLong* release_start_calibrate_long();
  ::cmd::Compass::CalibrateStartLong* mutable_start_calibrate_long();
  void set_allocated_start_calibrate_long(::cmd::Compass::CalibrateStartLong* value);
  void unsafe_arena_set_allocated_start_calibrate_long(::cmd::Compass::CalibrateStartLong* value);
  ::cmd::Compass::CalibrateStartLong* unsafe_arena_release_start_calibrate_long();

  private:
  const ::cmd::Compass::CalibrateStartLong& _internal_start_calibrate_long() const;
  ::cmd::Compass::CalibrateStartLong* _internal_mutable_start_calibrate_long();

  public:
  // .cmd.Compass.CalibrateStartShort start_calibrate_short = 8;
  bool has_start_calibrate_short() const;
  private:
  bool _internal_has_start_calibrate_short() const;

  public:
  void clear_start_calibrate_short() ;
  const ::cmd::Compass::CalibrateStartShort& start_calibrate_short() const;
  PROTOBUF_NODISCARD ::cmd::Compass::CalibrateStartShort* release_start_calibrate_short();
  ::cmd::Compass::CalibrateStartShort* mutable_start_calibrate_short();
  void set_allocated_start_calibrate_short(::cmd::Compass::CalibrateStartShort* value);
  void unsafe_arena_set_allocated_start_calibrate_short(::cmd::Compass::CalibrateStartShort* value);
  ::cmd::Compass::CalibrateStartShort* unsafe_arena_release_start_calibrate_short();

  private:
  const ::cmd::Compass::CalibrateStartShort& _internal_start_calibrate_short() const;
  ::cmd::Compass::CalibrateStartShort* _internal_mutable_start_calibrate_short();

  public:
  // .cmd.Compass.CalibrateNext calibrate_next = 9;
  bool has_calibrate_next() const;
  private:
  bool _internal_has_calibrate_next() const;

  public:
  void clear_calibrate_next() ;
  const ::cmd::Compass::CalibrateNext& calibrate_next() const;
  PROTOBUF_NODISCARD ::cmd::Compass::CalibrateNext* release_calibrate_next();
  ::cmd::Compass::CalibrateNext* mutable_calibrate_next();
  void set_allocated_calibrate_next(::cmd::Compass::CalibrateNext* value);
  void unsafe_arena_set_allocated_calibrate_next(::cmd::Compass::CalibrateNext* value);
  ::cmd::Compass::CalibrateNext* unsafe_arena_release_calibrate_next();

  private:
  const ::cmd::Compass::CalibrateNext& _internal_calibrate_next() const;
  ::cmd::Compass::CalibrateNext* _internal_mutable_calibrate_next();

  public:
  // .cmd.Compass.CalibrateCencel calibrate_cencel = 10;
  bool has_calibrate_cencel() const;
  private:
  bool _internal_has_calibrate_cencel() const;

  public:
  void clear_calibrate_cencel() ;
  const ::cmd::Compass::CalibrateCencel& calibrate_cencel() const;
  PROTOBUF_NODISCARD ::cmd::Compass::CalibrateCencel* release_calibrate_cencel();
  ::cmd::Compass::CalibrateCencel* mutable_calibrate_cencel();
  void set_allocated_calibrate_cencel(::cmd::Compass::CalibrateCencel* value);
  void unsafe_arena_set_allocated_calibrate_cencel(::cmd::Compass::CalibrateCencel* value);
  ::cmd::Compass::CalibrateCencel* unsafe_arena_release_calibrate_cencel();

  private:
  const ::cmd::Compass::CalibrateCencel& _internal_calibrate_cencel() const;
  ::cmd::Compass::CalibrateCencel* _internal_mutable_calibrate_cencel();

  public:
  // .cmd.Compass.GetMeteo get_meteo = 11;
  bool has_get_meteo() const;
  private:
  bool _internal_has_get_meteo() const;

  public:
  void clear_get_meteo() ;
  const ::cmd::Compass::GetMeteo& get_meteo() const;
  PROTOBUF_NODISCARD ::cmd::Compass::GetMeteo* release_get_meteo();
  ::cmd::Compass::GetMeteo* mutable_get_meteo();
  void set_allocated_get_meteo(::cmd::Compass::GetMeteo* value);
  void unsafe_arena_set_allocated_get_meteo(::cmd::Compass::GetMeteo* value);
  ::cmd::Compass::GetMeteo* unsafe_arena_release_get_meteo();

  private:
  const ::cmd::Compass::GetMeteo& _internal_get_meteo() const;
  ::cmd::Compass::GetMeteo* _internal_mutable_get_meteo();

  public:
  void clear_cmd();
  CmdCase cmd_case() const;
  // @@protoc_insertion_point(class_scope:cmd.Compass.Root)
 private:
  class _Internal;
  void set_has_start();
  void set_has_stop();
  void set_has_set_magnetic_declination();
  void set_has_set_offset_angle_azimuth();
  void set_has_set_offset_angle_elevation();
  void set_has_set_use_rotary_position();
  void set_has_start_calibrate_long();
  void set_has_start_calibrate_short();
  void set_has_calibrate_next();
  void set_has_calibrate_cencel();
  void set_has_get_meteo();
  inline bool has_cmd() const;
  inline void clear_has_cmd();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 11, 11,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Root& from_msg);
    union CmdUnion {
      constexpr CmdUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::cmd::Compass::Start* start_;
      ::cmd::Compass::Stop* stop_;
      ::cmd::Compass::SetMagneticDeclination* set_magnetic_declination_;
      ::cmd::Compass::SetOffsetAngleAzimuth* set_offset_angle_azimuth_;
      ::cmd::Compass::SetOffsetAngleElevation* set_offset_angle_elevation_;
      ::cmd::Compass::SetUseRotaryPosition* set_use_rotary_position_;
      ::cmd::Compass::CalibrateStartLong* start_calibrate_long_;
      ::cmd::Compass::CalibrateStartShort* start_calibrate_short_;
      ::cmd::Compass::CalibrateNext* calibrate_next_;
      ::cmd::Compass::CalibrateCencel* calibrate_cencel_;
      ::cmd::Compass::GetMeteo* get_meteo_;
    } cmd_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fcompass_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Root

// .cmd.Compass.Start start = 1;
inline bool Root::has_start() const {
  return cmd_case() == kStart;
}
inline bool Root::_internal_has_start() const {
  return cmd_case() == kStart;
}
inline void Root::set_has_start() {
  _impl_._oneof_case_[0] = kStart;
}
inline void Root::clear_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kStart) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.start_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.start_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::Compass::Start* Root::release_start() {
  // @@protoc_insertion_point(field_release:cmd.Compass.Root.start)
  if (cmd_case() == kStart) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.start_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::Compass::Start& Root::_internal_start() const {
  return cmd_case() == kStart ? *_impl_.cmd_.start_ : reinterpret_cast<::cmd::Compass::Start&>(::cmd::Compass::_Start_default_instance_);
}
inline const ::cmd::Compass::Start& Root::start() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Compass.Root.start)
  return _internal_start();
}
inline ::cmd::Compass::Start* Root::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Compass.Root.start)
  if (cmd_case() == kStart) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.start_;
    _impl_.cmd_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_start(::cmd::Compass::Start* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_start();
    _impl_.cmd_.start_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Compass.Root.start)
}
inline ::cmd::Compass::Start* Root::_internal_mutable_start() {
  if (cmd_case() != kStart) {
    clear_cmd();
    set_has_start();
    _impl_.cmd_.start_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::Compass::Start>(GetArena());
  }
  return _impl_.cmd_.start_;
}
inline ::cmd::Compass::Start* Root::mutable_start() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::Compass::Start* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:cmd.Compass.Root.start)
  return _msg;
}

// .cmd.Compass.Stop stop = 2;
inline bool Root::has_stop() const {
  return cmd_case() == kStop;
}
inline bool Root::_internal_has_stop() const {
  return cmd_case() == kStop;
}
inline void Root::set_has_stop() {
  _impl_._oneof_case_[0] = kStop;
}
inline void Root::clear_stop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kStop) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.stop_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.stop_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::Compass::Stop* Root::release_stop() {
  // @@protoc_insertion_point(field_release:cmd.Compass.Root.stop)
  if (cmd_case() == kStop) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.stop_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.stop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::Compass::Stop& Root::_internal_stop() const {
  return cmd_case() == kStop ? *_impl_.cmd_.stop_ : reinterpret_cast<::cmd::Compass::Stop&>(::cmd::Compass::_Stop_default_instance_);
}
inline const ::cmd::Compass::Stop& Root::stop() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Compass.Root.stop)
  return _internal_stop();
}
inline ::cmd::Compass::Stop* Root::unsafe_arena_release_stop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Compass.Root.stop)
  if (cmd_case() == kStop) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.stop_;
    _impl_.cmd_.stop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_stop(::cmd::Compass::Stop* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_stop();
    _impl_.cmd_.stop_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Compass.Root.stop)
}
inline ::cmd::Compass::Stop* Root::_internal_mutable_stop() {
  if (cmd_case() != kStop) {
    clear_cmd();
    set_has_stop();
    _impl_.cmd_.stop_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::Compass::Stop>(GetArena());
  }
  return _impl_.cmd_.stop_;
}
inline ::cmd::Compass::Stop* Root::mutable_stop() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::Compass::Stop* _msg = _internal_mutable_stop();
  // @@protoc_insertion_point(field_mutable:cmd.Compass.Root.stop)
  return _msg;
}

// .cmd.Compass.SetMagneticDeclination set_magnetic_declination = 3;
inline bool Root::has_set_magnetic_declination() const {
  return cmd_case() == kSetMagneticDeclination;
}
inline bool Root::_internal_has_set_magnetic_declination() const {
  return cmd_case() == kSetMagneticDeclination;
}
inline void Root::set_has_set_magnetic_declination() {
  _impl_._oneof_case_[0] = kSetMagneticDeclination;
}
inline void Root::clear_set_magnetic_declination() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kSetMagneticDeclination) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.set_magnetic_declination_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.set_magnetic_declination_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::Compass::SetMagneticDeclination* Root::release_set_magnetic_declination() {
  // @@protoc_insertion_point(field_release:cmd.Compass.Root.set_magnetic_declination)
  if (cmd_case() == kSetMagneticDeclination) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_magnetic_declination_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.set_magnetic_declination_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::Compass::SetMagneticDeclination& Root::_internal_set_magnetic_declination() const {
  return cmd_case() == kSetMagneticDeclination ? *_impl_.cmd_.set_magnetic_declination_ : reinterpret_cast<::cmd::Compass::SetMagneticDeclination&>(::cmd::Compass::_SetMagneticDeclination_default_instance_);
}
inline const ::cmd::Compass::SetMagneticDeclination& Root::set_magnetic_declination() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Compass.Root.set_magnetic_declination)
  return _internal_set_magnetic_declination();
}
inline ::cmd::Compass::SetMagneticDeclination* Root::unsafe_arena_release_set_magnetic_declination() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Compass.Root.set_magnetic_declination)
  if (cmd_case() == kSetMagneticDeclination) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_magnetic_declination_;
    _impl_.cmd_.set_magnetic_declination_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_set_magnetic_declination(::cmd::Compass::SetMagneticDeclination* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_set_magnetic_declination();
    _impl_.cmd_.set_magnetic_declination_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Compass.Root.set_magnetic_declination)
}
inline ::cmd::Compass::SetMagneticDeclination* Root::_internal_mutable_set_magnetic_declination() {
  if (cmd_case() != kSetMagneticDeclination) {
    clear_cmd();
    set_has_set_magnetic_declination();
    _impl_.cmd_.set_magnetic_declination_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::Compass::SetMagneticDeclination>(GetArena());
  }
  return _impl_.cmd_.set_magnetic_declination_;
}
inline ::cmd::Compass::SetMagneticDeclination* Root::mutable_set_magnetic_declination() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::Compass::SetMagneticDeclination* _msg = _internal_mutable_set_magnetic_declination();
  // @@protoc_insertion_point(field_mutable:cmd.Compass.Root.set_magnetic_declination)
  return _msg;
}

// .cmd.Compass.SetOffsetAngleAzimuth set_offset_angle_azimuth = 4;
inline bool Root::has_set_offset_angle_azimuth() const {
  return cmd_case() == kSetOffsetAngleAzimuth;
}
inline bool Root::_internal_has_set_offset_angle_azimuth() const {
  return cmd_case() == kSetOffsetAngleAzimuth;
}
inline void Root::set_has_set_offset_angle_azimuth() {
  _impl_._oneof_case_[0] = kSetOffsetAngleAzimuth;
}
inline void Root::clear_set_offset_angle_azimuth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kSetOffsetAngleAzimuth) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.set_offset_angle_azimuth_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.set_offset_angle_azimuth_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::Compass::SetOffsetAngleAzimuth* Root::release_set_offset_angle_azimuth() {
  // @@protoc_insertion_point(field_release:cmd.Compass.Root.set_offset_angle_azimuth)
  if (cmd_case() == kSetOffsetAngleAzimuth) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_offset_angle_azimuth_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.set_offset_angle_azimuth_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::Compass::SetOffsetAngleAzimuth& Root::_internal_set_offset_angle_azimuth() const {
  return cmd_case() == kSetOffsetAngleAzimuth ? *_impl_.cmd_.set_offset_angle_azimuth_ : reinterpret_cast<::cmd::Compass::SetOffsetAngleAzimuth&>(::cmd::Compass::_SetOffsetAngleAzimuth_default_instance_);
}
inline const ::cmd::Compass::SetOffsetAngleAzimuth& Root::set_offset_angle_azimuth() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Compass.Root.set_offset_angle_azimuth)
  return _internal_set_offset_angle_azimuth();
}
inline ::cmd::Compass::SetOffsetAngleAzimuth* Root::unsafe_arena_release_set_offset_angle_azimuth() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Compass.Root.set_offset_angle_azimuth)
  if (cmd_case() == kSetOffsetAngleAzimuth) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_offset_angle_azimuth_;
    _impl_.cmd_.set_offset_angle_azimuth_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_set_offset_angle_azimuth(::cmd::Compass::SetOffsetAngleAzimuth* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_set_offset_angle_azimuth();
    _impl_.cmd_.set_offset_angle_azimuth_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Compass.Root.set_offset_angle_azimuth)
}
inline ::cmd::Compass::SetOffsetAngleAzimuth* Root::_internal_mutable_set_offset_angle_azimuth() {
  if (cmd_case() != kSetOffsetAngleAzimuth) {
    clear_cmd();
    set_has_set_offset_angle_azimuth();
    _impl_.cmd_.set_offset_angle_azimuth_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::Compass::SetOffsetAngleAzimuth>(GetArena());
  }
  return _impl_.cmd_.set_offset_angle_azimuth_;
}
inline ::cmd::Compass::SetOffsetAngleAzimuth* Root::mutable_set_offset_angle_azimuth() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::Compass::SetOffsetAngleAzimuth* _msg = _internal_mutable_set_offset_angle_azimuth();
  // @@protoc_insertion_point(field_mutable:cmd.Compass.Root.set_offset_angle_azimuth)
  return _msg;
}

// .cmd.Compass.SetOffsetAngleElevation set_offset_angle_elevation = 5;
inline bool Root::has_set_offset_angle_elevation() const {
  return cmd_case() == kSetOffsetAngleElevation;
}
inline bool Root::_internal_has_set_offset_angle_elevation() const {
  return cmd_case() == kSetOffsetAngleElevation;
}
inline void Root::set_has_set_offset_angle_elevation() {
  _impl_._oneof_case_[0] = kSetOffsetAngleElevation;
}
inline void Root::clear_set_offset_angle_elevation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kSetOffsetAngleElevation) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.set_offset_angle_elevation_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.set_offset_angle_elevation_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::Compass::SetOffsetAngleElevation* Root::release_set_offset_angle_elevation() {
  // @@protoc_insertion_point(field_release:cmd.Compass.Root.set_offset_angle_elevation)
  if (cmd_case() == kSetOffsetAngleElevation) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_offset_angle_elevation_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.set_offset_angle_elevation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::Compass::SetOffsetAngleElevation& Root::_internal_set_offset_angle_elevation() const {
  return cmd_case() == kSetOffsetAngleElevation ? *_impl_.cmd_.set_offset_angle_elevation_ : reinterpret_cast<::cmd::Compass::SetOffsetAngleElevation&>(::cmd::Compass::_SetOffsetAngleElevation_default_instance_);
}
inline const ::cmd::Compass::SetOffsetAngleElevation& Root::set_offset_angle_elevation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Compass.Root.set_offset_angle_elevation)
  return _internal_set_offset_angle_elevation();
}
inline ::cmd::Compass::SetOffsetAngleElevation* Root::unsafe_arena_release_set_offset_angle_elevation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Compass.Root.set_offset_angle_elevation)
  if (cmd_case() == kSetOffsetAngleElevation) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_offset_angle_elevation_;
    _impl_.cmd_.set_offset_angle_elevation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_set_offset_angle_elevation(::cmd::Compass::SetOffsetAngleElevation* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_set_offset_angle_elevation();
    _impl_.cmd_.set_offset_angle_elevation_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Compass.Root.set_offset_angle_elevation)
}
inline ::cmd::Compass::SetOffsetAngleElevation* Root::_internal_mutable_set_offset_angle_elevation() {
  if (cmd_case() != kSetOffsetAngleElevation) {
    clear_cmd();
    set_has_set_offset_angle_elevation();
    _impl_.cmd_.set_offset_angle_elevation_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::Compass::SetOffsetAngleElevation>(GetArena());
  }
  return _impl_.cmd_.set_offset_angle_elevation_;
}
inline ::cmd::Compass::SetOffsetAngleElevation* Root::mutable_set_offset_angle_elevation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::Compass::SetOffsetAngleElevation* _msg = _internal_mutable_set_offset_angle_elevation();
  // @@protoc_insertion_point(field_mutable:cmd.Compass.Root.set_offset_angle_elevation)
  return _msg;
}

// .cmd.Compass.SetUseRotaryPosition set_use_rotary_position = 6;
inline bool Root::has_set_use_rotary_position() const {
  return cmd_case() == kSetUseRotaryPosition;
}
inline bool Root::_internal_has_set_use_rotary_position() const {
  return cmd_case() == kSetUseRotaryPosition;
}
inline void Root::set_has_set_use_rotary_position() {
  _impl_._oneof_case_[0] = kSetUseRotaryPosition;
}
inline void Root::clear_set_use_rotary_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kSetUseRotaryPosition) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.set_use_rotary_position_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.set_use_rotary_position_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::Compass::SetUseRotaryPosition* Root::release_set_use_rotary_position() {
  // @@protoc_insertion_point(field_release:cmd.Compass.Root.set_use_rotary_position)
  if (cmd_case() == kSetUseRotaryPosition) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_use_rotary_position_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.set_use_rotary_position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::Compass::SetUseRotaryPosition& Root::_internal_set_use_rotary_position() const {
  return cmd_case() == kSetUseRotaryPosition ? *_impl_.cmd_.set_use_rotary_position_ : reinterpret_cast<::cmd::Compass::SetUseRotaryPosition&>(::cmd::Compass::_SetUseRotaryPosition_default_instance_);
}
inline const ::cmd::Compass::SetUseRotaryPosition& Root::set_use_rotary_position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Compass.Root.set_use_rotary_position)
  return _internal_set_use_rotary_position();
}
inline ::cmd::Compass::SetUseRotaryPosition* Root::unsafe_arena_release_set_use_rotary_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Compass.Root.set_use_rotary_position)
  if (cmd_case() == kSetUseRotaryPosition) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.set_use_rotary_position_;
    _impl_.cmd_.set_use_rotary_position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_set_use_rotary_position(::cmd::Compass::SetUseRotaryPosition* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_set_use_rotary_position();
    _impl_.cmd_.set_use_rotary_position_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Compass.Root.set_use_rotary_position)
}
inline ::cmd::Compass::SetUseRotaryPosition* Root::_internal_mutable_set_use_rotary_position() {
  if (cmd_case() != kSetUseRotaryPosition) {
    clear_cmd();
    set_has_set_use_rotary_position();
    _impl_.cmd_.set_use_rotary_position_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::Compass::SetUseRotaryPosition>(GetArena());
  }
  return _impl_.cmd_.set_use_rotary_position_;
}
inline ::cmd::Compass::SetUseRotaryPosition* Root::mutable_set_use_rotary_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::Compass::SetUseRotaryPosition* _msg = _internal_mutable_set_use_rotary_position();
  // @@protoc_insertion_point(field_mutable:cmd.Compass.Root.set_use_rotary_position)
  return _msg;
}

// .cmd.Compass.CalibrateStartLong start_calibrate_long = 7;
inline bool Root::has_start_calibrate_long() const {
  return cmd_case() == kStartCalibrateLong;
}
inline bool Root::_internal_has_start_calibrate_long() const {
  return cmd_case() == kStartCalibrateLong;
}
inline void Root::set_has_start_calibrate_long() {
  _impl_._oneof_case_[0] = kStartCalibrateLong;
}
inline void Root::clear_start_calibrate_long() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kStartCalibrateLong) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.start_calibrate_long_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.start_calibrate_long_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::Compass::CalibrateStartLong* Root::release_start_calibrate_long() {
  // @@protoc_insertion_point(field_release:cmd.Compass.Root.start_calibrate_long)
  if (cmd_case() == kStartCalibrateLong) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.start_calibrate_long_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.start_calibrate_long_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::Compass::CalibrateStartLong& Root::_internal_start_calibrate_long() const {
  return cmd_case() == kStartCalibrateLong ? *_impl_.cmd_.start_calibrate_long_ : reinterpret_cast<::cmd::Compass::CalibrateStartLong&>(::cmd::Compass::_CalibrateStartLong_default_instance_);
}
inline const ::cmd::Compass::CalibrateStartLong& Root::start_calibrate_long() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Compass.Root.start_calibrate_long)
  return _internal_start_calibrate_long();
}
inline ::cmd::Compass::CalibrateStartLong* Root::unsafe_arena_release_start_calibrate_long() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Compass.Root.start_calibrate_long)
  if (cmd_case() == kStartCalibrateLong) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.start_calibrate_long_;
    _impl_.cmd_.start_calibrate_long_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_start_calibrate_long(::cmd::Compass::CalibrateStartLong* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_start_calibrate_long();
    _impl_.cmd_.start_calibrate_long_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Compass.Root.start_calibrate_long)
}
inline ::cmd::Compass::CalibrateStartLong* Root::_internal_mutable_start_calibrate_long() {
  if (cmd_case() != kStartCalibrateLong) {
    clear_cmd();
    set_has_start_calibrate_long();
    _impl_.cmd_.start_calibrate_long_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::Compass::CalibrateStartLong>(GetArena());
  }
  return _impl_.cmd_.start_calibrate_long_;
}
inline ::cmd::Compass::CalibrateStartLong* Root::mutable_start_calibrate_long() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::Compass::CalibrateStartLong* _msg = _internal_mutable_start_calibrate_long();
  // @@protoc_insertion_point(field_mutable:cmd.Compass.Root.start_calibrate_long)
  return _msg;
}

// .cmd.Compass.CalibrateStartShort start_calibrate_short = 8;
inline bool Root::has_start_calibrate_short() const {
  return cmd_case() == kStartCalibrateShort;
}
inline bool Root::_internal_has_start_calibrate_short() const {
  return cmd_case() == kStartCalibrateShort;
}
inline void Root::set_has_start_calibrate_short() {
  _impl_._oneof_case_[0] = kStartCalibrateShort;
}
inline void Root::clear_start_calibrate_short() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kStartCalibrateShort) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.start_calibrate_short_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.start_calibrate_short_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::Compass::CalibrateStartShort* Root::release_start_calibrate_short() {
  // @@protoc_insertion_point(field_release:cmd.Compass.Root.start_calibrate_short)
  if (cmd_case() == kStartCalibrateShort) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.start_calibrate_short_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.start_calibrate_short_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::Compass::CalibrateStartShort& Root::_internal_start_calibrate_short() const {
  return cmd_case() == kStartCalibrateShort ? *_impl_.cmd_.start_calibrate_short_ : reinterpret_cast<::cmd::Compass::CalibrateStartShort&>(::cmd::Compass::_CalibrateStartShort_default_instance_);
}
inline const ::cmd::Compass::CalibrateStartShort& Root::start_calibrate_short() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Compass.Root.start_calibrate_short)
  return _internal_start_calibrate_short();
}
inline ::cmd::Compass::CalibrateStartShort* Root::unsafe_arena_release_start_calibrate_short() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Compass.Root.start_calibrate_short)
  if (cmd_case() == kStartCalibrateShort) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.start_calibrate_short_;
    _impl_.cmd_.start_calibrate_short_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_start_calibrate_short(::cmd::Compass::CalibrateStartShort* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_start_calibrate_short();
    _impl_.cmd_.start_calibrate_short_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Compass.Root.start_calibrate_short)
}
inline ::cmd::Compass::CalibrateStartShort* Root::_internal_mutable_start_calibrate_short() {
  if (cmd_case() != kStartCalibrateShort) {
    clear_cmd();
    set_has_start_calibrate_short();
    _impl_.cmd_.start_calibrate_short_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::Compass::CalibrateStartShort>(GetArena());
  }
  return _impl_.cmd_.start_calibrate_short_;
}
inline ::cmd::Compass::CalibrateStartShort* Root::mutable_start_calibrate_short() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::Compass::CalibrateStartShort* _msg = _internal_mutable_start_calibrate_short();
  // @@protoc_insertion_point(field_mutable:cmd.Compass.Root.start_calibrate_short)
  return _msg;
}

// .cmd.Compass.CalibrateNext calibrate_next = 9;
inline bool Root::has_calibrate_next() const {
  return cmd_case() == kCalibrateNext;
}
inline bool Root::_internal_has_calibrate_next() const {
  return cmd_case() == kCalibrateNext;
}
inline void Root::set_has_calibrate_next() {
  _impl_._oneof_case_[0] = kCalibrateNext;
}
inline void Root::clear_calibrate_next() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kCalibrateNext) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.calibrate_next_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.calibrate_next_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::Compass::CalibrateNext* Root::release_calibrate_next() {
  // @@protoc_insertion_point(field_release:cmd.Compass.Root.calibrate_next)
  if (cmd_case() == kCalibrateNext) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.calibrate_next_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.calibrate_next_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::Compass::CalibrateNext& Root::_internal_calibrate_next() const {
  return cmd_case() == kCalibrateNext ? *_impl_.cmd_.calibrate_next_ : reinterpret_cast<::cmd::Compass::CalibrateNext&>(::cmd::Compass::_CalibrateNext_default_instance_);
}
inline const ::cmd::Compass::CalibrateNext& Root::calibrate_next() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Compass.Root.calibrate_next)
  return _internal_calibrate_next();
}
inline ::cmd::Compass::CalibrateNext* Root::unsafe_arena_release_calibrate_next() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Compass.Root.calibrate_next)
  if (cmd_case() == kCalibrateNext) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.calibrate_next_;
    _impl_.cmd_.calibrate_next_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_calibrate_next(::cmd::Compass::CalibrateNext* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_calibrate_next();
    _impl_.cmd_.calibrate_next_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Compass.Root.calibrate_next)
}
inline ::cmd::Compass::CalibrateNext* Root::_internal_mutable_calibrate_next() {
  if (cmd_case() != kCalibrateNext) {
    clear_cmd();
    set_has_calibrate_next();
    _impl_.cmd_.calibrate_next_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::Compass::CalibrateNext>(GetArena());
  }
  return _impl_.cmd_.calibrate_next_;
}
inline ::cmd::Compass::CalibrateNext* Root::mutable_calibrate_next() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::Compass::CalibrateNext* _msg = _internal_mutable_calibrate_next();
  // @@protoc_insertion_point(field_mutable:cmd.Compass.Root.calibrate_next)
  return _msg;
}

// .cmd.Compass.CalibrateCencel calibrate_cencel = 10;
inline bool Root::has_calibrate_cencel() const {
  return cmd_case() == kCalibrateCencel;
}
inline bool Root::_internal_has_calibrate_cencel() const {
  return cmd_case() == kCalibrateCencel;
}
inline void Root::set_has_calibrate_cencel() {
  _impl_._oneof_case_[0] = kCalibrateCencel;
}
inline void Root::clear_calibrate_cencel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kCalibrateCencel) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.calibrate_cencel_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.calibrate_cencel_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::Compass::CalibrateCencel* Root::release_calibrate_cencel() {
  // @@protoc_insertion_point(field_release:cmd.Compass.Root.calibrate_cencel)
  if (cmd_case() == kCalibrateCencel) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.calibrate_cencel_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.calibrate_cencel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::Compass::CalibrateCencel& Root::_internal_calibrate_cencel() const {
  return cmd_case() == kCalibrateCencel ? *_impl_.cmd_.calibrate_cencel_ : reinterpret_cast<::cmd::Compass::CalibrateCencel&>(::cmd::Compass::_CalibrateCencel_default_instance_);
}
inline const ::cmd::Compass::CalibrateCencel& Root::calibrate_cencel() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Compass.Root.calibrate_cencel)
  return _internal_calibrate_cencel();
}
inline ::cmd::Compass::CalibrateCencel* Root::unsafe_arena_release_calibrate_cencel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Compass.Root.calibrate_cencel)
  if (cmd_case() == kCalibrateCencel) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.calibrate_cencel_;
    _impl_.cmd_.calibrate_cencel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_calibrate_cencel(::cmd::Compass::CalibrateCencel* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_calibrate_cencel();
    _impl_.cmd_.calibrate_cencel_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Compass.Root.calibrate_cencel)
}
inline ::cmd::Compass::CalibrateCencel* Root::_internal_mutable_calibrate_cencel() {
  if (cmd_case() != kCalibrateCencel) {
    clear_cmd();
    set_has_calibrate_cencel();
    _impl_.cmd_.calibrate_cencel_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::Compass::CalibrateCencel>(GetArena());
  }
  return _impl_.cmd_.calibrate_cencel_;
}
inline ::cmd::Compass::CalibrateCencel* Root::mutable_calibrate_cencel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::Compass::CalibrateCencel* _msg = _internal_mutable_calibrate_cencel();
  // @@protoc_insertion_point(field_mutable:cmd.Compass.Root.calibrate_cencel)
  return _msg;
}

// .cmd.Compass.GetMeteo get_meteo = 11;
inline bool Root::has_get_meteo() const {
  return cmd_case() == kGetMeteo;
}
inline bool Root::_internal_has_get_meteo() const {
  return cmd_case() == kGetMeteo;
}
inline void Root::set_has_get_meteo() {
  _impl_._oneof_case_[0] = kGetMeteo;
}
inline void Root::clear_get_meteo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kGetMeteo) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.get_meteo_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.get_meteo_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::Compass::GetMeteo* Root::release_get_meteo() {
  // @@protoc_insertion_point(field_release:cmd.Compass.Root.get_meteo)
  if (cmd_case() == kGetMeteo) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.get_meteo_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.get_meteo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::Compass::GetMeteo& Root::_internal_get_meteo() const {
  return cmd_case() == kGetMeteo ? *_impl_.cmd_.get_meteo_ : reinterpret_cast<::cmd::Compass::GetMeteo&>(::cmd::Compass::_GetMeteo_default_instance_);
}
inline const ::cmd::Compass::GetMeteo& Root::get_meteo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.Compass.Root.get_meteo)
  return _internal_get_meteo();
}
inline ::cmd::Compass::GetMeteo* Root::unsafe_arena_release_get_meteo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.Compass.Root.get_meteo)
  if (cmd_case() == kGetMeteo) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.get_meteo_;
    _impl_.cmd_.get_meteo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_get_meteo(::cmd::Compass::GetMeteo* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_get_meteo();
    _impl_.cmd_.get_meteo_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.Compass.Root.get_meteo)
}
inline ::cmd::Compass::GetMeteo* Root::_internal_mutable_get_meteo() {
  if (cmd_case() != kGetMeteo) {
    clear_cmd();
    set_has_get_meteo();
    _impl_.cmd_.get_meteo_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::Compass::GetMeteo>(GetArena());
  }
  return _impl_.cmd_.get_meteo_;
}
inline ::cmd::Compass::GetMeteo* Root::mutable_get_meteo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::Compass::GetMeteo* _msg = _internal_mutable_get_meteo();
  // @@protoc_insertion_point(field_mutable:cmd.Compass.Root.get_meteo)
  return _msg;
}

inline bool Root::has_cmd() const {
  return cmd_case() != CMD_NOT_SET;
}
inline void Root::clear_has_cmd() {
  _impl_._oneof_case_[0] = CMD_NOT_SET;
}
inline Root::CmdCase Root::cmd_case() const {
  return Root::CmdCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Start

// -------------------------------------------------------------------

// Stop

// -------------------------------------------------------------------

// Next

// -------------------------------------------------------------------

// CalibrateStartLong

// -------------------------------------------------------------------

// CalibrateStartShort

// -------------------------------------------------------------------

// CalibrateNext

// -------------------------------------------------------------------

// CalibrateCencel

// -------------------------------------------------------------------

// GetMeteo

// -------------------------------------------------------------------

// SetMagneticDeclination

// double value = 1;
inline void SetMagneticDeclination::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
}
inline double SetMagneticDeclination::value() const {
  // @@protoc_insertion_point(field_get:cmd.Compass.SetMagneticDeclination.value)
  return _internal_value();
}
inline void SetMagneticDeclination::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:cmd.Compass.SetMagneticDeclination.value)
}
inline double SetMagneticDeclination::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void SetMagneticDeclination::_internal_set_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// SetOffsetAngleAzimuth

// double value = 1;
inline void SetOffsetAngleAzimuth::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
}
inline double SetOffsetAngleAzimuth::value() const {
  // @@protoc_insertion_point(field_get:cmd.Compass.SetOffsetAngleAzimuth.value)
  return _internal_value();
}
inline void SetOffsetAngleAzimuth::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:cmd.Compass.SetOffsetAngleAzimuth.value)
}
inline double SetOffsetAngleAzimuth::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void SetOffsetAngleAzimuth::_internal_set_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// SetOffsetAngleElevation

// double value = 1;
inline void SetOffsetAngleElevation::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
}
inline double SetOffsetAngleElevation::value() const {
  // @@protoc_insertion_point(field_get:cmd.Compass.SetOffsetAngleElevation.value)
  return _internal_value();
}
inline void SetOffsetAngleElevation::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:cmd.Compass.SetOffsetAngleElevation.value)
}
inline double SetOffsetAngleElevation::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void SetOffsetAngleElevation::_internal_set_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// SetUseRotaryPosition

// bool flag = 1;
inline void SetUseRotaryPosition::clear_flag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.flag_ = false;
}
inline bool SetUseRotaryPosition::flag() const {
  // @@protoc_insertion_point(field_get:cmd.Compass.SetUseRotaryPosition.flag)
  return _internal_flag();
}
inline void SetUseRotaryPosition::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:cmd.Compass.SetUseRotaryPosition.flag)
}
inline bool SetUseRotaryPosition::_internal_flag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.flag_;
}
inline void SetUseRotaryPosition::_internal_set_flag(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.flag_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Compass
}  // namespace cmd


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // jon_5fshared_5fcmd_5fcompass_2eproto_2epb_2eh
