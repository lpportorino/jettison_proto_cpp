// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: jon_shared_cmd_osd.proto
// Protobuf C++ Version: 5.29.2

#ifndef jon_5fshared_5fcmd_5fosd_2eproto_2epb_2eh
#define jon_5fshared_5fcmd_5fosd_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_jon_5fshared_5fcmd_5fosd_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_jon_5fshared_5fcmd_5fosd_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_jon_5fshared_5fcmd_5fosd_2eproto;
namespace cmd {
namespace OSD {
class DisableDayOSD;
struct DisableDayOSDDefaultTypeInternal;
extern DisableDayOSDDefaultTypeInternal _DisableDayOSD_default_instance_;
class DisableHeatOSD;
struct DisableHeatOSDDefaultTypeInternal;
extern DisableHeatOSDDefaultTypeInternal _DisableHeatOSD_default_instance_;
class EnableDayOSD;
struct EnableDayOSDDefaultTypeInternal;
extern EnableDayOSDDefaultTypeInternal _EnableDayOSD_default_instance_;
class EnableHeatOSD;
struct EnableHeatOSDDefaultTypeInternal;
extern EnableHeatOSDDefaultTypeInternal _EnableHeatOSD_default_instance_;
class Root;
struct RootDefaultTypeInternal;
extern RootDefaultTypeInternal _Root_default_instance_;
class ShowDefaultScreen;
struct ShowDefaultScreenDefaultTypeInternal;
extern ShowDefaultScreenDefaultTypeInternal _ShowDefaultScreen_default_instance_;
class ShowLRFMeasureScreen;
struct ShowLRFMeasureScreenDefaultTypeInternal;
extern ShowLRFMeasureScreenDefaultTypeInternal _ShowLRFMeasureScreen_default_instance_;
class ShowLRFResultScreen;
struct ShowLRFResultScreenDefaultTypeInternal;
extern ShowLRFResultScreenDefaultTypeInternal _ShowLRFResultScreen_default_instance_;
class ShowLRFResultSimplifiedScreen;
struct ShowLRFResultSimplifiedScreenDefaultTypeInternal;
extern ShowLRFResultSimplifiedScreenDefaultTypeInternal _ShowLRFResultSimplifiedScreen_default_instance_;
}  // namespace OSD
}  // namespace cmd
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cmd {
namespace OSD {

// ===================================================================


// -------------------------------------------------------------------

class ShowLRFResultSimplifiedScreen final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.OSD.ShowLRFResultSimplifiedScreen) */ {
 public:
  inline ShowLRFResultSimplifiedScreen() : ShowLRFResultSimplifiedScreen(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ShowLRFResultSimplifiedScreen* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ShowLRFResultSimplifiedScreen));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ShowLRFResultSimplifiedScreen(
      ::google::protobuf::internal::ConstantInitialized);

  inline ShowLRFResultSimplifiedScreen(const ShowLRFResultSimplifiedScreen& from) : ShowLRFResultSimplifiedScreen(nullptr, from) {}
  inline ShowLRFResultSimplifiedScreen(ShowLRFResultSimplifiedScreen&& from) noexcept
      : ShowLRFResultSimplifiedScreen(nullptr, std::move(from)) {}
  inline ShowLRFResultSimplifiedScreen& operator=(const ShowLRFResultSimplifiedScreen& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowLRFResultSimplifiedScreen& operator=(ShowLRFResultSimplifiedScreen&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShowLRFResultSimplifiedScreen& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShowLRFResultSimplifiedScreen* internal_default_instance() {
    return reinterpret_cast<const ShowLRFResultSimplifiedScreen*>(
        &_ShowLRFResultSimplifiedScreen_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(ShowLRFResultSimplifiedScreen& a, ShowLRFResultSimplifiedScreen& b) { a.Swap(&b); }
  inline void Swap(ShowLRFResultSimplifiedScreen* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowLRFResultSimplifiedScreen* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShowLRFResultSimplifiedScreen* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<ShowLRFResultSimplifiedScreen>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ShowLRFResultSimplifiedScreen& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ShowLRFResultSimplifiedScreen& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.OSD.ShowLRFResultSimplifiedScreen"; }

 protected:
  explicit ShowLRFResultSimplifiedScreen(::google::protobuf::Arena* arena);
  ShowLRFResultSimplifiedScreen(::google::protobuf::Arena* arena, const ShowLRFResultSimplifiedScreen& from);
  ShowLRFResultSimplifiedScreen(::google::protobuf::Arena* arena, ShowLRFResultSimplifiedScreen&& from) noexcept
      : ShowLRFResultSimplifiedScreen(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.OSD.ShowLRFResultSimplifiedScreen)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ShowLRFResultSimplifiedScreen& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fosd_2eproto;
};
// -------------------------------------------------------------------

class ShowLRFResultScreen final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.OSD.ShowLRFResultScreen) */ {
 public:
  inline ShowLRFResultScreen() : ShowLRFResultScreen(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ShowLRFResultScreen* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ShowLRFResultScreen));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ShowLRFResultScreen(
      ::google::protobuf::internal::ConstantInitialized);

  inline ShowLRFResultScreen(const ShowLRFResultScreen& from) : ShowLRFResultScreen(nullptr, from) {}
  inline ShowLRFResultScreen(ShowLRFResultScreen&& from) noexcept
      : ShowLRFResultScreen(nullptr, std::move(from)) {}
  inline ShowLRFResultScreen& operator=(const ShowLRFResultScreen& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowLRFResultScreen& operator=(ShowLRFResultScreen&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShowLRFResultScreen& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShowLRFResultScreen* internal_default_instance() {
    return reinterpret_cast<const ShowLRFResultScreen*>(
        &_ShowLRFResultScreen_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ShowLRFResultScreen& a, ShowLRFResultScreen& b) { a.Swap(&b); }
  inline void Swap(ShowLRFResultScreen* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowLRFResultScreen* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShowLRFResultScreen* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<ShowLRFResultScreen>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ShowLRFResultScreen& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ShowLRFResultScreen& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.OSD.ShowLRFResultScreen"; }

 protected:
  explicit ShowLRFResultScreen(::google::protobuf::Arena* arena);
  ShowLRFResultScreen(::google::protobuf::Arena* arena, const ShowLRFResultScreen& from);
  ShowLRFResultScreen(::google::protobuf::Arena* arena, ShowLRFResultScreen&& from) noexcept
      : ShowLRFResultScreen(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.OSD.ShowLRFResultScreen)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ShowLRFResultScreen& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fosd_2eproto;
};
// -------------------------------------------------------------------

class ShowLRFMeasureScreen final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.OSD.ShowLRFMeasureScreen) */ {
 public:
  inline ShowLRFMeasureScreen() : ShowLRFMeasureScreen(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ShowLRFMeasureScreen* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ShowLRFMeasureScreen));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ShowLRFMeasureScreen(
      ::google::protobuf::internal::ConstantInitialized);

  inline ShowLRFMeasureScreen(const ShowLRFMeasureScreen& from) : ShowLRFMeasureScreen(nullptr, from) {}
  inline ShowLRFMeasureScreen(ShowLRFMeasureScreen&& from) noexcept
      : ShowLRFMeasureScreen(nullptr, std::move(from)) {}
  inline ShowLRFMeasureScreen& operator=(const ShowLRFMeasureScreen& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowLRFMeasureScreen& operator=(ShowLRFMeasureScreen&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShowLRFMeasureScreen& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShowLRFMeasureScreen* internal_default_instance() {
    return reinterpret_cast<const ShowLRFMeasureScreen*>(
        &_ShowLRFMeasureScreen_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ShowLRFMeasureScreen& a, ShowLRFMeasureScreen& b) { a.Swap(&b); }
  inline void Swap(ShowLRFMeasureScreen* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowLRFMeasureScreen* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShowLRFMeasureScreen* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<ShowLRFMeasureScreen>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ShowLRFMeasureScreen& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ShowLRFMeasureScreen& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.OSD.ShowLRFMeasureScreen"; }

 protected:
  explicit ShowLRFMeasureScreen(::google::protobuf::Arena* arena);
  ShowLRFMeasureScreen(::google::protobuf::Arena* arena, const ShowLRFMeasureScreen& from);
  ShowLRFMeasureScreen(::google::protobuf::Arena* arena, ShowLRFMeasureScreen&& from) noexcept
      : ShowLRFMeasureScreen(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.OSD.ShowLRFMeasureScreen)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ShowLRFMeasureScreen& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fosd_2eproto;
};
// -------------------------------------------------------------------

class ShowDefaultScreen final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.OSD.ShowDefaultScreen) */ {
 public:
  inline ShowDefaultScreen() : ShowDefaultScreen(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ShowDefaultScreen* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ShowDefaultScreen));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ShowDefaultScreen(
      ::google::protobuf::internal::ConstantInitialized);

  inline ShowDefaultScreen(const ShowDefaultScreen& from) : ShowDefaultScreen(nullptr, from) {}
  inline ShowDefaultScreen(ShowDefaultScreen&& from) noexcept
      : ShowDefaultScreen(nullptr, std::move(from)) {}
  inline ShowDefaultScreen& operator=(const ShowDefaultScreen& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowDefaultScreen& operator=(ShowDefaultScreen&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShowDefaultScreen& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShowDefaultScreen* internal_default_instance() {
    return reinterpret_cast<const ShowDefaultScreen*>(
        &_ShowDefaultScreen_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ShowDefaultScreen& a, ShowDefaultScreen& b) { a.Swap(&b); }
  inline void Swap(ShowDefaultScreen* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowDefaultScreen* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShowDefaultScreen* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<ShowDefaultScreen>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ShowDefaultScreen& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ShowDefaultScreen& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.OSD.ShowDefaultScreen"; }

 protected:
  explicit ShowDefaultScreen(::google::protobuf::Arena* arena);
  ShowDefaultScreen(::google::protobuf::Arena* arena, const ShowDefaultScreen& from);
  ShowDefaultScreen(::google::protobuf::Arena* arena, ShowDefaultScreen&& from) noexcept
      : ShowDefaultScreen(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.OSD.ShowDefaultScreen)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ShowDefaultScreen& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fosd_2eproto;
};
// -------------------------------------------------------------------

class EnableHeatOSD final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.OSD.EnableHeatOSD) */ {
 public:
  inline EnableHeatOSD() : EnableHeatOSD(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EnableHeatOSD* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EnableHeatOSD));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EnableHeatOSD(
      ::google::protobuf::internal::ConstantInitialized);

  inline EnableHeatOSD(const EnableHeatOSD& from) : EnableHeatOSD(nullptr, from) {}
  inline EnableHeatOSD(EnableHeatOSD&& from) noexcept
      : EnableHeatOSD(nullptr, std::move(from)) {}
  inline EnableHeatOSD& operator=(const EnableHeatOSD& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableHeatOSD& operator=(EnableHeatOSD&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnableHeatOSD& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableHeatOSD* internal_default_instance() {
    return reinterpret_cast<const EnableHeatOSD*>(
        &_EnableHeatOSD_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(EnableHeatOSD& a, EnableHeatOSD& b) { a.Swap(&b); }
  inline void Swap(EnableHeatOSD* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableHeatOSD* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableHeatOSD* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<EnableHeatOSD>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const EnableHeatOSD& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const EnableHeatOSD& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.OSD.EnableHeatOSD"; }

 protected:
  explicit EnableHeatOSD(::google::protobuf::Arena* arena);
  EnableHeatOSD(::google::protobuf::Arena* arena, const EnableHeatOSD& from);
  EnableHeatOSD(::google::protobuf::Arena* arena, EnableHeatOSD&& from) noexcept
      : EnableHeatOSD(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.OSD.EnableHeatOSD)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EnableHeatOSD& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fosd_2eproto;
};
// -------------------------------------------------------------------

class EnableDayOSD final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.OSD.EnableDayOSD) */ {
 public:
  inline EnableDayOSD() : EnableDayOSD(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EnableDayOSD* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EnableDayOSD));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EnableDayOSD(
      ::google::protobuf::internal::ConstantInitialized);

  inline EnableDayOSD(const EnableDayOSD& from) : EnableDayOSD(nullptr, from) {}
  inline EnableDayOSD(EnableDayOSD&& from) noexcept
      : EnableDayOSD(nullptr, std::move(from)) {}
  inline EnableDayOSD& operator=(const EnableDayOSD& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableDayOSD& operator=(EnableDayOSD&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnableDayOSD& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableDayOSD* internal_default_instance() {
    return reinterpret_cast<const EnableDayOSD*>(
        &_EnableDayOSD_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(EnableDayOSD& a, EnableDayOSD& b) { a.Swap(&b); }
  inline void Swap(EnableDayOSD* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableDayOSD* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableDayOSD* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<EnableDayOSD>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const EnableDayOSD& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const EnableDayOSD& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.OSD.EnableDayOSD"; }

 protected:
  explicit EnableDayOSD(::google::protobuf::Arena* arena);
  EnableDayOSD(::google::protobuf::Arena* arena, const EnableDayOSD& from);
  EnableDayOSD(::google::protobuf::Arena* arena, EnableDayOSD&& from) noexcept
      : EnableDayOSD(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.OSD.EnableDayOSD)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EnableDayOSD& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fosd_2eproto;
};
// -------------------------------------------------------------------

class DisableHeatOSD final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.OSD.DisableHeatOSD) */ {
 public:
  inline DisableHeatOSD() : DisableHeatOSD(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DisableHeatOSD* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DisableHeatOSD));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DisableHeatOSD(
      ::google::protobuf::internal::ConstantInitialized);

  inline DisableHeatOSD(const DisableHeatOSD& from) : DisableHeatOSD(nullptr, from) {}
  inline DisableHeatOSD(DisableHeatOSD&& from) noexcept
      : DisableHeatOSD(nullptr, std::move(from)) {}
  inline DisableHeatOSD& operator=(const DisableHeatOSD& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableHeatOSD& operator=(DisableHeatOSD&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisableHeatOSD& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisableHeatOSD* internal_default_instance() {
    return reinterpret_cast<const DisableHeatOSD*>(
        &_DisableHeatOSD_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(DisableHeatOSD& a, DisableHeatOSD& b) { a.Swap(&b); }
  inline void Swap(DisableHeatOSD* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableHeatOSD* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisableHeatOSD* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<DisableHeatOSD>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DisableHeatOSD& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DisableHeatOSD& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.OSD.DisableHeatOSD"; }

 protected:
  explicit DisableHeatOSD(::google::protobuf::Arena* arena);
  DisableHeatOSD(::google::protobuf::Arena* arena, const DisableHeatOSD& from);
  DisableHeatOSD(::google::protobuf::Arena* arena, DisableHeatOSD&& from) noexcept
      : DisableHeatOSD(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.OSD.DisableHeatOSD)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DisableHeatOSD& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fosd_2eproto;
};
// -------------------------------------------------------------------

class DisableDayOSD final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.OSD.DisableDayOSD) */ {
 public:
  inline DisableDayOSD() : DisableDayOSD(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DisableDayOSD* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DisableDayOSD));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DisableDayOSD(
      ::google::protobuf::internal::ConstantInitialized);

  inline DisableDayOSD(const DisableDayOSD& from) : DisableDayOSD(nullptr, from) {}
  inline DisableDayOSD(DisableDayOSD&& from) noexcept
      : DisableDayOSD(nullptr, std::move(from)) {}
  inline DisableDayOSD& operator=(const DisableDayOSD& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableDayOSD& operator=(DisableDayOSD&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisableDayOSD& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisableDayOSD* internal_default_instance() {
    return reinterpret_cast<const DisableDayOSD*>(
        &_DisableDayOSD_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(DisableDayOSD& a, DisableDayOSD& b) { a.Swap(&b); }
  inline void Swap(DisableDayOSD* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableDayOSD* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisableDayOSD* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<DisableDayOSD>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DisableDayOSD& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DisableDayOSD& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.OSD.DisableDayOSD"; }

 protected:
  explicit DisableDayOSD(::google::protobuf::Arena* arena);
  DisableDayOSD(::google::protobuf::Arena* arena, const DisableDayOSD& from);
  DisableDayOSD(::google::protobuf::Arena* arena, DisableDayOSD&& from) noexcept
      : DisableDayOSD(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.OSD.DisableDayOSD)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DisableDayOSD& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fosd_2eproto;
};
// -------------------------------------------------------------------

class Root final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.OSD.Root) */ {
 public:
  inline Root() : Root(nullptr) {}
  ~Root() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Root* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Root));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Root(
      ::google::protobuf::internal::ConstantInitialized);

  inline Root(const Root& from) : Root(nullptr, from) {}
  inline Root(Root&& from) noexcept
      : Root(nullptr, std::move(from)) {}
  inline Root& operator=(const Root& from) {
    CopyFrom(from);
    return *this;
  }
  inline Root& operator=(Root&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Root& default_instance() {
    return *internal_default_instance();
  }
  enum CmdCase {
    kShowDefaultScreen = 1,
    kShowLrfMeasureScreen = 2,
    kShowLrfResultScreen = 3,
    kShowLrfResultSimplifiedScreen = 4,
    kEnableHeatOsd = 5,
    kDisableHeatOsd = 6,
    kEnableDayOsd = 7,
    kDisableDayOsd = 8,
    CMD_NOT_SET = 0,
  };
  static inline const Root* internal_default_instance() {
    return reinterpret_cast<const Root*>(
        &_Root_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Root& a, Root& b) { a.Swap(&b); }
  inline void Swap(Root* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Root* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Root* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Root>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Root& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Root& from) { Root::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Root* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.OSD.Root"; }

 protected:
  explicit Root(::google::protobuf::Arena* arena);
  Root(::google::protobuf::Arena* arena, const Root& from);
  Root(::google::protobuf::Arena* arena, Root&& from) noexcept
      : Root(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kShowDefaultScreenFieldNumber = 1,
    kShowLrfMeasureScreenFieldNumber = 2,
    kShowLrfResultScreenFieldNumber = 3,
    kShowLrfResultSimplifiedScreenFieldNumber = 4,
    kEnableHeatOsdFieldNumber = 5,
    kDisableHeatOsdFieldNumber = 6,
    kEnableDayOsdFieldNumber = 7,
    kDisableDayOsdFieldNumber = 8,
  };
  // .cmd.OSD.ShowDefaultScreen show_default_screen = 1;
  bool has_show_default_screen() const;
  private:
  bool _internal_has_show_default_screen() const;

  public:
  void clear_show_default_screen() ;
  const ::cmd::OSD::ShowDefaultScreen& show_default_screen() const;
  PROTOBUF_NODISCARD ::cmd::OSD::ShowDefaultScreen* release_show_default_screen();
  ::cmd::OSD::ShowDefaultScreen* mutable_show_default_screen();
  void set_allocated_show_default_screen(::cmd::OSD::ShowDefaultScreen* value);
  void unsafe_arena_set_allocated_show_default_screen(::cmd::OSD::ShowDefaultScreen* value);
  ::cmd::OSD::ShowDefaultScreen* unsafe_arena_release_show_default_screen();

  private:
  const ::cmd::OSD::ShowDefaultScreen& _internal_show_default_screen() const;
  ::cmd::OSD::ShowDefaultScreen* _internal_mutable_show_default_screen();

  public:
  // .cmd.OSD.ShowLRFMeasureScreen show_lrf_measure_screen = 2;
  bool has_show_lrf_measure_screen() const;
  private:
  bool _internal_has_show_lrf_measure_screen() const;

  public:
  void clear_show_lrf_measure_screen() ;
  const ::cmd::OSD::ShowLRFMeasureScreen& show_lrf_measure_screen() const;
  PROTOBUF_NODISCARD ::cmd::OSD::ShowLRFMeasureScreen* release_show_lrf_measure_screen();
  ::cmd::OSD::ShowLRFMeasureScreen* mutable_show_lrf_measure_screen();
  void set_allocated_show_lrf_measure_screen(::cmd::OSD::ShowLRFMeasureScreen* value);
  void unsafe_arena_set_allocated_show_lrf_measure_screen(::cmd::OSD::ShowLRFMeasureScreen* value);
  ::cmd::OSD::ShowLRFMeasureScreen* unsafe_arena_release_show_lrf_measure_screen();

  private:
  const ::cmd::OSD::ShowLRFMeasureScreen& _internal_show_lrf_measure_screen() const;
  ::cmd::OSD::ShowLRFMeasureScreen* _internal_mutable_show_lrf_measure_screen();

  public:
  // .cmd.OSD.ShowLRFResultScreen show_lrf_result_screen = 3;
  bool has_show_lrf_result_screen() const;
  private:
  bool _internal_has_show_lrf_result_screen() const;

  public:
  void clear_show_lrf_result_screen() ;
  const ::cmd::OSD::ShowLRFResultScreen& show_lrf_result_screen() const;
  PROTOBUF_NODISCARD ::cmd::OSD::ShowLRFResultScreen* release_show_lrf_result_screen();
  ::cmd::OSD::ShowLRFResultScreen* mutable_show_lrf_result_screen();
  void set_allocated_show_lrf_result_screen(::cmd::OSD::ShowLRFResultScreen* value);
  void unsafe_arena_set_allocated_show_lrf_result_screen(::cmd::OSD::ShowLRFResultScreen* value);
  ::cmd::OSD::ShowLRFResultScreen* unsafe_arena_release_show_lrf_result_screen();

  private:
  const ::cmd::OSD::ShowLRFResultScreen& _internal_show_lrf_result_screen() const;
  ::cmd::OSD::ShowLRFResultScreen* _internal_mutable_show_lrf_result_screen();

  public:
  // .cmd.OSD.ShowLRFResultSimplifiedScreen show_lrf_result_simplified_screen = 4;
  bool has_show_lrf_result_simplified_screen() const;
  private:
  bool _internal_has_show_lrf_result_simplified_screen() const;

  public:
  void clear_show_lrf_result_simplified_screen() ;
  const ::cmd::OSD::ShowLRFResultSimplifiedScreen& show_lrf_result_simplified_screen() const;
  PROTOBUF_NODISCARD ::cmd::OSD::ShowLRFResultSimplifiedScreen* release_show_lrf_result_simplified_screen();
  ::cmd::OSD::ShowLRFResultSimplifiedScreen* mutable_show_lrf_result_simplified_screen();
  void set_allocated_show_lrf_result_simplified_screen(::cmd::OSD::ShowLRFResultSimplifiedScreen* value);
  void unsafe_arena_set_allocated_show_lrf_result_simplified_screen(::cmd::OSD::ShowLRFResultSimplifiedScreen* value);
  ::cmd::OSD::ShowLRFResultSimplifiedScreen* unsafe_arena_release_show_lrf_result_simplified_screen();

  private:
  const ::cmd::OSD::ShowLRFResultSimplifiedScreen& _internal_show_lrf_result_simplified_screen() const;
  ::cmd::OSD::ShowLRFResultSimplifiedScreen* _internal_mutable_show_lrf_result_simplified_screen();

  public:
  // .cmd.OSD.EnableHeatOSD enable_heat_osd = 5;
  bool has_enable_heat_osd() const;
  private:
  bool _internal_has_enable_heat_osd() const;

  public:
  void clear_enable_heat_osd() ;
  const ::cmd::OSD::EnableHeatOSD& enable_heat_osd() const;
  PROTOBUF_NODISCARD ::cmd::OSD::EnableHeatOSD* release_enable_heat_osd();
  ::cmd::OSD::EnableHeatOSD* mutable_enable_heat_osd();
  void set_allocated_enable_heat_osd(::cmd::OSD::EnableHeatOSD* value);
  void unsafe_arena_set_allocated_enable_heat_osd(::cmd::OSD::EnableHeatOSD* value);
  ::cmd::OSD::EnableHeatOSD* unsafe_arena_release_enable_heat_osd();

  private:
  const ::cmd::OSD::EnableHeatOSD& _internal_enable_heat_osd() const;
  ::cmd::OSD::EnableHeatOSD* _internal_mutable_enable_heat_osd();

  public:
  // .cmd.OSD.DisableHeatOSD disable_heat_osd = 6;
  bool has_disable_heat_osd() const;
  private:
  bool _internal_has_disable_heat_osd() const;

  public:
  void clear_disable_heat_osd() ;
  const ::cmd::OSD::DisableHeatOSD& disable_heat_osd() const;
  PROTOBUF_NODISCARD ::cmd::OSD::DisableHeatOSD* release_disable_heat_osd();
  ::cmd::OSD::DisableHeatOSD* mutable_disable_heat_osd();
  void set_allocated_disable_heat_osd(::cmd::OSD::DisableHeatOSD* value);
  void unsafe_arena_set_allocated_disable_heat_osd(::cmd::OSD::DisableHeatOSD* value);
  ::cmd::OSD::DisableHeatOSD* unsafe_arena_release_disable_heat_osd();

  private:
  const ::cmd::OSD::DisableHeatOSD& _internal_disable_heat_osd() const;
  ::cmd::OSD::DisableHeatOSD* _internal_mutable_disable_heat_osd();

  public:
  // .cmd.OSD.EnableDayOSD enable_day_osd = 7;
  bool has_enable_day_osd() const;
  private:
  bool _internal_has_enable_day_osd() const;

  public:
  void clear_enable_day_osd() ;
  const ::cmd::OSD::EnableDayOSD& enable_day_osd() const;
  PROTOBUF_NODISCARD ::cmd::OSD::EnableDayOSD* release_enable_day_osd();
  ::cmd::OSD::EnableDayOSD* mutable_enable_day_osd();
  void set_allocated_enable_day_osd(::cmd::OSD::EnableDayOSD* value);
  void unsafe_arena_set_allocated_enable_day_osd(::cmd::OSD::EnableDayOSD* value);
  ::cmd::OSD::EnableDayOSD* unsafe_arena_release_enable_day_osd();

  private:
  const ::cmd::OSD::EnableDayOSD& _internal_enable_day_osd() const;
  ::cmd::OSD::EnableDayOSD* _internal_mutable_enable_day_osd();

  public:
  // .cmd.OSD.DisableDayOSD disable_day_osd = 8;
  bool has_disable_day_osd() const;
  private:
  bool _internal_has_disable_day_osd() const;

  public:
  void clear_disable_day_osd() ;
  const ::cmd::OSD::DisableDayOSD& disable_day_osd() const;
  PROTOBUF_NODISCARD ::cmd::OSD::DisableDayOSD* release_disable_day_osd();
  ::cmd::OSD::DisableDayOSD* mutable_disable_day_osd();
  void set_allocated_disable_day_osd(::cmd::OSD::DisableDayOSD* value);
  void unsafe_arena_set_allocated_disable_day_osd(::cmd::OSD::DisableDayOSD* value);
  ::cmd::OSD::DisableDayOSD* unsafe_arena_release_disable_day_osd();

  private:
  const ::cmd::OSD::DisableDayOSD& _internal_disable_day_osd() const;
  ::cmd::OSD::DisableDayOSD* _internal_mutable_disable_day_osd();

  public:
  void clear_cmd();
  CmdCase cmd_case() const;
  // @@protoc_insertion_point(class_scope:cmd.OSD.Root)
 private:
  class _Internal;
  void set_has_show_default_screen();
  void set_has_show_lrf_measure_screen();
  void set_has_show_lrf_result_screen();
  void set_has_show_lrf_result_simplified_screen();
  void set_has_enable_heat_osd();
  void set_has_disable_heat_osd();
  void set_has_enable_day_osd();
  void set_has_disable_day_osd();
  inline bool has_cmd() const;
  inline void clear_has_cmd();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 8, 8,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Root& from_msg);
    union CmdUnion {
      constexpr CmdUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::cmd::OSD::ShowDefaultScreen* show_default_screen_;
      ::cmd::OSD::ShowLRFMeasureScreen* show_lrf_measure_screen_;
      ::cmd::OSD::ShowLRFResultScreen* show_lrf_result_screen_;
      ::cmd::OSD::ShowLRFResultSimplifiedScreen* show_lrf_result_simplified_screen_;
      ::cmd::OSD::EnableHeatOSD* enable_heat_osd_;
      ::cmd::OSD::DisableHeatOSD* disable_heat_osd_;
      ::cmd::OSD::EnableDayOSD* enable_day_osd_;
      ::cmd::OSD::DisableDayOSD* disable_day_osd_;
    } cmd_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fosd_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Root

// .cmd.OSD.ShowDefaultScreen show_default_screen = 1;
inline bool Root::has_show_default_screen() const {
  return cmd_case() == kShowDefaultScreen;
}
inline bool Root::_internal_has_show_default_screen() const {
  return cmd_case() == kShowDefaultScreen;
}
inline void Root::set_has_show_default_screen() {
  _impl_._oneof_case_[0] = kShowDefaultScreen;
}
inline void Root::clear_show_default_screen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kShowDefaultScreen) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.show_default_screen_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.show_default_screen_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::OSD::ShowDefaultScreen* Root::release_show_default_screen() {
  // @@protoc_insertion_point(field_release:cmd.OSD.Root.show_default_screen)
  if (cmd_case() == kShowDefaultScreen) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.show_default_screen_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.show_default_screen_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::OSD::ShowDefaultScreen& Root::_internal_show_default_screen() const {
  return cmd_case() == kShowDefaultScreen ? *_impl_.cmd_.show_default_screen_ : reinterpret_cast<::cmd::OSD::ShowDefaultScreen&>(::cmd::OSD::_ShowDefaultScreen_default_instance_);
}
inline const ::cmd::OSD::ShowDefaultScreen& Root::show_default_screen() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.OSD.Root.show_default_screen)
  return _internal_show_default_screen();
}
inline ::cmd::OSD::ShowDefaultScreen* Root::unsafe_arena_release_show_default_screen() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.OSD.Root.show_default_screen)
  if (cmd_case() == kShowDefaultScreen) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.show_default_screen_;
    _impl_.cmd_.show_default_screen_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_show_default_screen(::cmd::OSD::ShowDefaultScreen* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_show_default_screen();
    _impl_.cmd_.show_default_screen_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.OSD.Root.show_default_screen)
}
inline ::cmd::OSD::ShowDefaultScreen* Root::_internal_mutable_show_default_screen() {
  if (cmd_case() != kShowDefaultScreen) {
    clear_cmd();
    set_has_show_default_screen();
    _impl_.cmd_.show_default_screen_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::OSD::ShowDefaultScreen>(GetArena());
  }
  return _impl_.cmd_.show_default_screen_;
}
inline ::cmd::OSD::ShowDefaultScreen* Root::mutable_show_default_screen() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::OSD::ShowDefaultScreen* _msg = _internal_mutable_show_default_screen();
  // @@protoc_insertion_point(field_mutable:cmd.OSD.Root.show_default_screen)
  return _msg;
}

// .cmd.OSD.ShowLRFMeasureScreen show_lrf_measure_screen = 2;
inline bool Root::has_show_lrf_measure_screen() const {
  return cmd_case() == kShowLrfMeasureScreen;
}
inline bool Root::_internal_has_show_lrf_measure_screen() const {
  return cmd_case() == kShowLrfMeasureScreen;
}
inline void Root::set_has_show_lrf_measure_screen() {
  _impl_._oneof_case_[0] = kShowLrfMeasureScreen;
}
inline void Root::clear_show_lrf_measure_screen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kShowLrfMeasureScreen) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.show_lrf_measure_screen_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.show_lrf_measure_screen_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::OSD::ShowLRFMeasureScreen* Root::release_show_lrf_measure_screen() {
  // @@protoc_insertion_point(field_release:cmd.OSD.Root.show_lrf_measure_screen)
  if (cmd_case() == kShowLrfMeasureScreen) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.show_lrf_measure_screen_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.show_lrf_measure_screen_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::OSD::ShowLRFMeasureScreen& Root::_internal_show_lrf_measure_screen() const {
  return cmd_case() == kShowLrfMeasureScreen ? *_impl_.cmd_.show_lrf_measure_screen_ : reinterpret_cast<::cmd::OSD::ShowLRFMeasureScreen&>(::cmd::OSD::_ShowLRFMeasureScreen_default_instance_);
}
inline const ::cmd::OSD::ShowLRFMeasureScreen& Root::show_lrf_measure_screen() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.OSD.Root.show_lrf_measure_screen)
  return _internal_show_lrf_measure_screen();
}
inline ::cmd::OSD::ShowLRFMeasureScreen* Root::unsafe_arena_release_show_lrf_measure_screen() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.OSD.Root.show_lrf_measure_screen)
  if (cmd_case() == kShowLrfMeasureScreen) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.show_lrf_measure_screen_;
    _impl_.cmd_.show_lrf_measure_screen_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_show_lrf_measure_screen(::cmd::OSD::ShowLRFMeasureScreen* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_show_lrf_measure_screen();
    _impl_.cmd_.show_lrf_measure_screen_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.OSD.Root.show_lrf_measure_screen)
}
inline ::cmd::OSD::ShowLRFMeasureScreen* Root::_internal_mutable_show_lrf_measure_screen() {
  if (cmd_case() != kShowLrfMeasureScreen) {
    clear_cmd();
    set_has_show_lrf_measure_screen();
    _impl_.cmd_.show_lrf_measure_screen_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::OSD::ShowLRFMeasureScreen>(GetArena());
  }
  return _impl_.cmd_.show_lrf_measure_screen_;
}
inline ::cmd::OSD::ShowLRFMeasureScreen* Root::mutable_show_lrf_measure_screen() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::OSD::ShowLRFMeasureScreen* _msg = _internal_mutable_show_lrf_measure_screen();
  // @@protoc_insertion_point(field_mutable:cmd.OSD.Root.show_lrf_measure_screen)
  return _msg;
}

// .cmd.OSD.ShowLRFResultScreen show_lrf_result_screen = 3;
inline bool Root::has_show_lrf_result_screen() const {
  return cmd_case() == kShowLrfResultScreen;
}
inline bool Root::_internal_has_show_lrf_result_screen() const {
  return cmd_case() == kShowLrfResultScreen;
}
inline void Root::set_has_show_lrf_result_screen() {
  _impl_._oneof_case_[0] = kShowLrfResultScreen;
}
inline void Root::clear_show_lrf_result_screen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kShowLrfResultScreen) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.show_lrf_result_screen_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.show_lrf_result_screen_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::OSD::ShowLRFResultScreen* Root::release_show_lrf_result_screen() {
  // @@protoc_insertion_point(field_release:cmd.OSD.Root.show_lrf_result_screen)
  if (cmd_case() == kShowLrfResultScreen) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.show_lrf_result_screen_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.show_lrf_result_screen_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::OSD::ShowLRFResultScreen& Root::_internal_show_lrf_result_screen() const {
  return cmd_case() == kShowLrfResultScreen ? *_impl_.cmd_.show_lrf_result_screen_ : reinterpret_cast<::cmd::OSD::ShowLRFResultScreen&>(::cmd::OSD::_ShowLRFResultScreen_default_instance_);
}
inline const ::cmd::OSD::ShowLRFResultScreen& Root::show_lrf_result_screen() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.OSD.Root.show_lrf_result_screen)
  return _internal_show_lrf_result_screen();
}
inline ::cmd::OSD::ShowLRFResultScreen* Root::unsafe_arena_release_show_lrf_result_screen() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.OSD.Root.show_lrf_result_screen)
  if (cmd_case() == kShowLrfResultScreen) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.show_lrf_result_screen_;
    _impl_.cmd_.show_lrf_result_screen_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_show_lrf_result_screen(::cmd::OSD::ShowLRFResultScreen* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_show_lrf_result_screen();
    _impl_.cmd_.show_lrf_result_screen_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.OSD.Root.show_lrf_result_screen)
}
inline ::cmd::OSD::ShowLRFResultScreen* Root::_internal_mutable_show_lrf_result_screen() {
  if (cmd_case() != kShowLrfResultScreen) {
    clear_cmd();
    set_has_show_lrf_result_screen();
    _impl_.cmd_.show_lrf_result_screen_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::OSD::ShowLRFResultScreen>(GetArena());
  }
  return _impl_.cmd_.show_lrf_result_screen_;
}
inline ::cmd::OSD::ShowLRFResultScreen* Root::mutable_show_lrf_result_screen() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::OSD::ShowLRFResultScreen* _msg = _internal_mutable_show_lrf_result_screen();
  // @@protoc_insertion_point(field_mutable:cmd.OSD.Root.show_lrf_result_screen)
  return _msg;
}

// .cmd.OSD.ShowLRFResultSimplifiedScreen show_lrf_result_simplified_screen = 4;
inline bool Root::has_show_lrf_result_simplified_screen() const {
  return cmd_case() == kShowLrfResultSimplifiedScreen;
}
inline bool Root::_internal_has_show_lrf_result_simplified_screen() const {
  return cmd_case() == kShowLrfResultSimplifiedScreen;
}
inline void Root::set_has_show_lrf_result_simplified_screen() {
  _impl_._oneof_case_[0] = kShowLrfResultSimplifiedScreen;
}
inline void Root::clear_show_lrf_result_simplified_screen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kShowLrfResultSimplifiedScreen) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.show_lrf_result_simplified_screen_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.show_lrf_result_simplified_screen_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::OSD::ShowLRFResultSimplifiedScreen* Root::release_show_lrf_result_simplified_screen() {
  // @@protoc_insertion_point(field_release:cmd.OSD.Root.show_lrf_result_simplified_screen)
  if (cmd_case() == kShowLrfResultSimplifiedScreen) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.show_lrf_result_simplified_screen_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.show_lrf_result_simplified_screen_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::OSD::ShowLRFResultSimplifiedScreen& Root::_internal_show_lrf_result_simplified_screen() const {
  return cmd_case() == kShowLrfResultSimplifiedScreen ? *_impl_.cmd_.show_lrf_result_simplified_screen_ : reinterpret_cast<::cmd::OSD::ShowLRFResultSimplifiedScreen&>(::cmd::OSD::_ShowLRFResultSimplifiedScreen_default_instance_);
}
inline const ::cmd::OSD::ShowLRFResultSimplifiedScreen& Root::show_lrf_result_simplified_screen() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.OSD.Root.show_lrf_result_simplified_screen)
  return _internal_show_lrf_result_simplified_screen();
}
inline ::cmd::OSD::ShowLRFResultSimplifiedScreen* Root::unsafe_arena_release_show_lrf_result_simplified_screen() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.OSD.Root.show_lrf_result_simplified_screen)
  if (cmd_case() == kShowLrfResultSimplifiedScreen) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.show_lrf_result_simplified_screen_;
    _impl_.cmd_.show_lrf_result_simplified_screen_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_show_lrf_result_simplified_screen(::cmd::OSD::ShowLRFResultSimplifiedScreen* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_show_lrf_result_simplified_screen();
    _impl_.cmd_.show_lrf_result_simplified_screen_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.OSD.Root.show_lrf_result_simplified_screen)
}
inline ::cmd::OSD::ShowLRFResultSimplifiedScreen* Root::_internal_mutable_show_lrf_result_simplified_screen() {
  if (cmd_case() != kShowLrfResultSimplifiedScreen) {
    clear_cmd();
    set_has_show_lrf_result_simplified_screen();
    _impl_.cmd_.show_lrf_result_simplified_screen_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::OSD::ShowLRFResultSimplifiedScreen>(GetArena());
  }
  return _impl_.cmd_.show_lrf_result_simplified_screen_;
}
inline ::cmd::OSD::ShowLRFResultSimplifiedScreen* Root::mutable_show_lrf_result_simplified_screen() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::OSD::ShowLRFResultSimplifiedScreen* _msg = _internal_mutable_show_lrf_result_simplified_screen();
  // @@protoc_insertion_point(field_mutable:cmd.OSD.Root.show_lrf_result_simplified_screen)
  return _msg;
}

// .cmd.OSD.EnableHeatOSD enable_heat_osd = 5;
inline bool Root::has_enable_heat_osd() const {
  return cmd_case() == kEnableHeatOsd;
}
inline bool Root::_internal_has_enable_heat_osd() const {
  return cmd_case() == kEnableHeatOsd;
}
inline void Root::set_has_enable_heat_osd() {
  _impl_._oneof_case_[0] = kEnableHeatOsd;
}
inline void Root::clear_enable_heat_osd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kEnableHeatOsd) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.enable_heat_osd_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.enable_heat_osd_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::OSD::EnableHeatOSD* Root::release_enable_heat_osd() {
  // @@protoc_insertion_point(field_release:cmd.OSD.Root.enable_heat_osd)
  if (cmd_case() == kEnableHeatOsd) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.enable_heat_osd_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.enable_heat_osd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::OSD::EnableHeatOSD& Root::_internal_enable_heat_osd() const {
  return cmd_case() == kEnableHeatOsd ? *_impl_.cmd_.enable_heat_osd_ : reinterpret_cast<::cmd::OSD::EnableHeatOSD&>(::cmd::OSD::_EnableHeatOSD_default_instance_);
}
inline const ::cmd::OSD::EnableHeatOSD& Root::enable_heat_osd() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.OSD.Root.enable_heat_osd)
  return _internal_enable_heat_osd();
}
inline ::cmd::OSD::EnableHeatOSD* Root::unsafe_arena_release_enable_heat_osd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.OSD.Root.enable_heat_osd)
  if (cmd_case() == kEnableHeatOsd) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.enable_heat_osd_;
    _impl_.cmd_.enable_heat_osd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_enable_heat_osd(::cmd::OSD::EnableHeatOSD* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_enable_heat_osd();
    _impl_.cmd_.enable_heat_osd_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.OSD.Root.enable_heat_osd)
}
inline ::cmd::OSD::EnableHeatOSD* Root::_internal_mutable_enable_heat_osd() {
  if (cmd_case() != kEnableHeatOsd) {
    clear_cmd();
    set_has_enable_heat_osd();
    _impl_.cmd_.enable_heat_osd_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::OSD::EnableHeatOSD>(GetArena());
  }
  return _impl_.cmd_.enable_heat_osd_;
}
inline ::cmd::OSD::EnableHeatOSD* Root::mutable_enable_heat_osd() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::OSD::EnableHeatOSD* _msg = _internal_mutable_enable_heat_osd();
  // @@protoc_insertion_point(field_mutable:cmd.OSD.Root.enable_heat_osd)
  return _msg;
}

// .cmd.OSD.DisableHeatOSD disable_heat_osd = 6;
inline bool Root::has_disable_heat_osd() const {
  return cmd_case() == kDisableHeatOsd;
}
inline bool Root::_internal_has_disable_heat_osd() const {
  return cmd_case() == kDisableHeatOsd;
}
inline void Root::set_has_disable_heat_osd() {
  _impl_._oneof_case_[0] = kDisableHeatOsd;
}
inline void Root::clear_disable_heat_osd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kDisableHeatOsd) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.disable_heat_osd_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.disable_heat_osd_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::OSD::DisableHeatOSD* Root::release_disable_heat_osd() {
  // @@protoc_insertion_point(field_release:cmd.OSD.Root.disable_heat_osd)
  if (cmd_case() == kDisableHeatOsd) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.disable_heat_osd_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.disable_heat_osd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::OSD::DisableHeatOSD& Root::_internal_disable_heat_osd() const {
  return cmd_case() == kDisableHeatOsd ? *_impl_.cmd_.disable_heat_osd_ : reinterpret_cast<::cmd::OSD::DisableHeatOSD&>(::cmd::OSD::_DisableHeatOSD_default_instance_);
}
inline const ::cmd::OSD::DisableHeatOSD& Root::disable_heat_osd() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.OSD.Root.disable_heat_osd)
  return _internal_disable_heat_osd();
}
inline ::cmd::OSD::DisableHeatOSD* Root::unsafe_arena_release_disable_heat_osd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.OSD.Root.disable_heat_osd)
  if (cmd_case() == kDisableHeatOsd) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.disable_heat_osd_;
    _impl_.cmd_.disable_heat_osd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_disable_heat_osd(::cmd::OSD::DisableHeatOSD* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_disable_heat_osd();
    _impl_.cmd_.disable_heat_osd_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.OSD.Root.disable_heat_osd)
}
inline ::cmd::OSD::DisableHeatOSD* Root::_internal_mutable_disable_heat_osd() {
  if (cmd_case() != kDisableHeatOsd) {
    clear_cmd();
    set_has_disable_heat_osd();
    _impl_.cmd_.disable_heat_osd_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::OSD::DisableHeatOSD>(GetArena());
  }
  return _impl_.cmd_.disable_heat_osd_;
}
inline ::cmd::OSD::DisableHeatOSD* Root::mutable_disable_heat_osd() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::OSD::DisableHeatOSD* _msg = _internal_mutable_disable_heat_osd();
  // @@protoc_insertion_point(field_mutable:cmd.OSD.Root.disable_heat_osd)
  return _msg;
}

// .cmd.OSD.EnableDayOSD enable_day_osd = 7;
inline bool Root::has_enable_day_osd() const {
  return cmd_case() == kEnableDayOsd;
}
inline bool Root::_internal_has_enable_day_osd() const {
  return cmd_case() == kEnableDayOsd;
}
inline void Root::set_has_enable_day_osd() {
  _impl_._oneof_case_[0] = kEnableDayOsd;
}
inline void Root::clear_enable_day_osd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kEnableDayOsd) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.enable_day_osd_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.enable_day_osd_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::OSD::EnableDayOSD* Root::release_enable_day_osd() {
  // @@protoc_insertion_point(field_release:cmd.OSD.Root.enable_day_osd)
  if (cmd_case() == kEnableDayOsd) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.enable_day_osd_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.enable_day_osd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::OSD::EnableDayOSD& Root::_internal_enable_day_osd() const {
  return cmd_case() == kEnableDayOsd ? *_impl_.cmd_.enable_day_osd_ : reinterpret_cast<::cmd::OSD::EnableDayOSD&>(::cmd::OSD::_EnableDayOSD_default_instance_);
}
inline const ::cmd::OSD::EnableDayOSD& Root::enable_day_osd() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.OSD.Root.enable_day_osd)
  return _internal_enable_day_osd();
}
inline ::cmd::OSD::EnableDayOSD* Root::unsafe_arena_release_enable_day_osd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.OSD.Root.enable_day_osd)
  if (cmd_case() == kEnableDayOsd) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.enable_day_osd_;
    _impl_.cmd_.enable_day_osd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_enable_day_osd(::cmd::OSD::EnableDayOSD* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_enable_day_osd();
    _impl_.cmd_.enable_day_osd_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.OSD.Root.enable_day_osd)
}
inline ::cmd::OSD::EnableDayOSD* Root::_internal_mutable_enable_day_osd() {
  if (cmd_case() != kEnableDayOsd) {
    clear_cmd();
    set_has_enable_day_osd();
    _impl_.cmd_.enable_day_osd_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::OSD::EnableDayOSD>(GetArena());
  }
  return _impl_.cmd_.enable_day_osd_;
}
inline ::cmd::OSD::EnableDayOSD* Root::mutable_enable_day_osd() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::OSD::EnableDayOSD* _msg = _internal_mutable_enable_day_osd();
  // @@protoc_insertion_point(field_mutable:cmd.OSD.Root.enable_day_osd)
  return _msg;
}

// .cmd.OSD.DisableDayOSD disable_day_osd = 8;
inline bool Root::has_disable_day_osd() const {
  return cmd_case() == kDisableDayOsd;
}
inline bool Root::_internal_has_disable_day_osd() const {
  return cmd_case() == kDisableDayOsd;
}
inline void Root::set_has_disable_day_osd() {
  _impl_._oneof_case_[0] = kDisableDayOsd;
}
inline void Root::clear_disable_day_osd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kDisableDayOsd) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.disable_day_osd_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.disable_day_osd_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::OSD::DisableDayOSD* Root::release_disable_day_osd() {
  // @@protoc_insertion_point(field_release:cmd.OSD.Root.disable_day_osd)
  if (cmd_case() == kDisableDayOsd) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.disable_day_osd_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.disable_day_osd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::OSD::DisableDayOSD& Root::_internal_disable_day_osd() const {
  return cmd_case() == kDisableDayOsd ? *_impl_.cmd_.disable_day_osd_ : reinterpret_cast<::cmd::OSD::DisableDayOSD&>(::cmd::OSD::_DisableDayOSD_default_instance_);
}
inline const ::cmd::OSD::DisableDayOSD& Root::disable_day_osd() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.OSD.Root.disable_day_osd)
  return _internal_disable_day_osd();
}
inline ::cmd::OSD::DisableDayOSD* Root::unsafe_arena_release_disable_day_osd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.OSD.Root.disable_day_osd)
  if (cmd_case() == kDisableDayOsd) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.disable_day_osd_;
    _impl_.cmd_.disable_day_osd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_disable_day_osd(::cmd::OSD::DisableDayOSD* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_disable_day_osd();
    _impl_.cmd_.disable_day_osd_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.OSD.Root.disable_day_osd)
}
inline ::cmd::OSD::DisableDayOSD* Root::_internal_mutable_disable_day_osd() {
  if (cmd_case() != kDisableDayOsd) {
    clear_cmd();
    set_has_disable_day_osd();
    _impl_.cmd_.disable_day_osd_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::OSD::DisableDayOSD>(GetArena());
  }
  return _impl_.cmd_.disable_day_osd_;
}
inline ::cmd::OSD::DisableDayOSD* Root::mutable_disable_day_osd() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::OSD::DisableDayOSD* _msg = _internal_mutable_disable_day_osd();
  // @@protoc_insertion_point(field_mutable:cmd.OSD.Root.disable_day_osd)
  return _msg;
}

inline bool Root::has_cmd() const {
  return cmd_case() != CMD_NOT_SET;
}
inline void Root::clear_has_cmd() {
  _impl_._oneof_case_[0] = CMD_NOT_SET;
}
inline Root::CmdCase Root::cmd_case() const {
  return Root::CmdCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ShowDefaultScreen

// -------------------------------------------------------------------

// ShowLRFMeasureScreen

// -------------------------------------------------------------------

// ShowLRFResultScreen

// -------------------------------------------------------------------

// ShowLRFResultSimplifiedScreen

// -------------------------------------------------------------------

// EnableHeatOSD

// -------------------------------------------------------------------

// DisableHeatOSD

// -------------------------------------------------------------------

// EnableDayOSD

// -------------------------------------------------------------------

// DisableDayOSD

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace OSD
}  // namespace cmd


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // jon_5fshared_5fcmd_5fosd_2eproto_2epb_2eh
