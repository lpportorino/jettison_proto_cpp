// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: jon_shared_data_types.proto
// Protobuf C++ Version: 5.29.2

#ifndef jon_5fshared_5fdata_5ftypes_2eproto_2epb_2eh
#define jon_5fshared_5fdata_5ftypes_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_jon_5fshared_5fdata_5ftypes_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_jon_5fshared_5fdata_5ftypes_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_jon_5fshared_5fdata_5ftypes_2eproto;
namespace ser {
class JonGuiDataMeteo;
struct JonGuiDataMeteoDefaultTypeInternal;
extern JonGuiDataMeteoDefaultTypeInternal _JonGuiDataMeteo_default_instance_;
}  // namespace ser
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ser {
enum JonGuiDataVideoChannelHeatFilters : int {
  JON_GUI_DATA_VIDEO_CHANNEL_HEAT_FILTER_UNSPECIFIED = 0,
  JON_GUI_DATA_VIDEO_CHANNEL_HEAT_FILTER_HOT_WHITE = 1,
  JON_GUI_DATA_VIDEO_CHANNEL_HEAT_FILTER_HOT_BLACK = 2,
  JON_GUI_DATA_VIDEO_CHANNEL_HEAT_FILTER_SEPIA = 3,
  JON_GUI_DATA_VIDEO_CHANNEL_HEAT_FILTER_SEPIA_INVERSE = 4,
  JonGuiDataVideoChannelHeatFilters_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  JonGuiDataVideoChannelHeatFilters_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool JonGuiDataVideoChannelHeatFilters_IsValid(int value);
extern const uint32_t JonGuiDataVideoChannelHeatFilters_internal_data_[];
constexpr JonGuiDataVideoChannelHeatFilters JonGuiDataVideoChannelHeatFilters_MIN = static_cast<JonGuiDataVideoChannelHeatFilters>(0);
constexpr JonGuiDataVideoChannelHeatFilters JonGuiDataVideoChannelHeatFilters_MAX = static_cast<JonGuiDataVideoChannelHeatFilters>(4);
constexpr int JonGuiDataVideoChannelHeatFilters_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
JonGuiDataVideoChannelHeatFilters_descriptor();
template <typename T>
const std::string& JonGuiDataVideoChannelHeatFilters_Name(T value) {
  static_assert(std::is_same<T, JonGuiDataVideoChannelHeatFilters>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JonGuiDataVideoChannelHeatFilters_Name().");
  return JonGuiDataVideoChannelHeatFilters_Name(static_cast<JonGuiDataVideoChannelHeatFilters>(value));
}
template <>
inline const std::string& JonGuiDataVideoChannelHeatFilters_Name(JonGuiDataVideoChannelHeatFilters value) {
  return ::google::protobuf::internal::NameOfDenseEnum<JonGuiDataVideoChannelHeatFilters_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool JonGuiDataVideoChannelHeatFilters_Parse(absl::string_view name, JonGuiDataVideoChannelHeatFilters* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JonGuiDataVideoChannelHeatFilters>(
      JonGuiDataVideoChannelHeatFilters_descriptor(), name, value);
}
enum JonGuiDataVideoChannelHeatAGCModes : int {
  JON_GUI_DATA_VIDEO_CHANNEL_HEAT_AGC_MODE_UNSPECIFIED = 0,
  JON_GUI_DATA_VIDEO_CHANNEL_HEAT_AGC_MODE_1 = 1,
  JON_GUI_DATA_VIDEO_CHANNEL_HEAT_AGC_MODE_2 = 2,
  JON_GUI_DATA_VIDEO_CHANNEL_HEAT_AGC_MODE_3 = 3,
  JonGuiDataVideoChannelHeatAGCModes_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  JonGuiDataVideoChannelHeatAGCModes_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool JonGuiDataVideoChannelHeatAGCModes_IsValid(int value);
extern const uint32_t JonGuiDataVideoChannelHeatAGCModes_internal_data_[];
constexpr JonGuiDataVideoChannelHeatAGCModes JonGuiDataVideoChannelHeatAGCModes_MIN = static_cast<JonGuiDataVideoChannelHeatAGCModes>(0);
constexpr JonGuiDataVideoChannelHeatAGCModes JonGuiDataVideoChannelHeatAGCModes_MAX = static_cast<JonGuiDataVideoChannelHeatAGCModes>(3);
constexpr int JonGuiDataVideoChannelHeatAGCModes_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
JonGuiDataVideoChannelHeatAGCModes_descriptor();
template <typename T>
const std::string& JonGuiDataVideoChannelHeatAGCModes_Name(T value) {
  static_assert(std::is_same<T, JonGuiDataVideoChannelHeatAGCModes>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JonGuiDataVideoChannelHeatAGCModes_Name().");
  return JonGuiDataVideoChannelHeatAGCModes_Name(static_cast<JonGuiDataVideoChannelHeatAGCModes>(value));
}
template <>
inline const std::string& JonGuiDataVideoChannelHeatAGCModes_Name(JonGuiDataVideoChannelHeatAGCModes value) {
  return ::google::protobuf::internal::NameOfDenseEnum<JonGuiDataVideoChannelHeatAGCModes_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool JonGuiDataVideoChannelHeatAGCModes_Parse(absl::string_view name, JonGuiDataVideoChannelHeatAGCModes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JonGuiDataVideoChannelHeatAGCModes>(
      JonGuiDataVideoChannelHeatAGCModes_descriptor(), name, value);
}
enum JonGuiDataGpsUnits : int {
  JON_GUI_DATA_GPS_UNITS_UNSPECIFIED = 0,
  JON_GUI_DATA_GPS_UNITS_DECIMAL_DEGREES = 1,
  JON_GUI_DATA_GPS_UNITS_DEGREES_MINUTES_SECONDS = 2,
  JON_GUI_DATA_GPS_UNITS_DEGREES_DECIMAL_MINUTES = 3,
  JonGuiDataGpsUnits_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  JonGuiDataGpsUnits_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool JonGuiDataGpsUnits_IsValid(int value);
extern const uint32_t JonGuiDataGpsUnits_internal_data_[];
constexpr JonGuiDataGpsUnits JonGuiDataGpsUnits_MIN = static_cast<JonGuiDataGpsUnits>(0);
constexpr JonGuiDataGpsUnits JonGuiDataGpsUnits_MAX = static_cast<JonGuiDataGpsUnits>(3);
constexpr int JonGuiDataGpsUnits_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
JonGuiDataGpsUnits_descriptor();
template <typename T>
const std::string& JonGuiDataGpsUnits_Name(T value) {
  static_assert(std::is_same<T, JonGuiDataGpsUnits>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JonGuiDataGpsUnits_Name().");
  return JonGuiDataGpsUnits_Name(static_cast<JonGuiDataGpsUnits>(value));
}
template <>
inline const std::string& JonGuiDataGpsUnits_Name(JonGuiDataGpsUnits value) {
  return ::google::protobuf::internal::NameOfDenseEnum<JonGuiDataGpsUnits_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool JonGuiDataGpsUnits_Parse(absl::string_view name, JonGuiDataGpsUnits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JonGuiDataGpsUnits>(
      JonGuiDataGpsUnits_descriptor(), name, value);
}
enum JonGuiDataGpsFixType : int {
  JON_GUI_DATA_GPS_FIX_TYPE_UNSPECIFIED = 0,
  JON_GUI_DATA_GPS_FIX_TYPE_NONE = 1,
  JON_GUI_DATA_GPS_FIX_TYPE_1D = 2,
  JON_GUI_DATA_GPS_FIX_TYPE_2D = 3,
  JON_GUI_DATA_GPS_FIX_TYPE_3D = 4,
  JON_GUI_DATA_GPS_FIX_TYPE_MANUAL = 5,
  JonGuiDataGpsFixType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  JonGuiDataGpsFixType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool JonGuiDataGpsFixType_IsValid(int value);
extern const uint32_t JonGuiDataGpsFixType_internal_data_[];
constexpr JonGuiDataGpsFixType JonGuiDataGpsFixType_MIN = static_cast<JonGuiDataGpsFixType>(0);
constexpr JonGuiDataGpsFixType JonGuiDataGpsFixType_MAX = static_cast<JonGuiDataGpsFixType>(5);
constexpr int JonGuiDataGpsFixType_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
JonGuiDataGpsFixType_descriptor();
template <typename T>
const std::string& JonGuiDataGpsFixType_Name(T value) {
  static_assert(std::is_same<T, JonGuiDataGpsFixType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JonGuiDataGpsFixType_Name().");
  return JonGuiDataGpsFixType_Name(static_cast<JonGuiDataGpsFixType>(value));
}
template <>
inline const std::string& JonGuiDataGpsFixType_Name(JonGuiDataGpsFixType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<JonGuiDataGpsFixType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool JonGuiDataGpsFixType_Parse(absl::string_view name, JonGuiDataGpsFixType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JonGuiDataGpsFixType>(
      JonGuiDataGpsFixType_descriptor(), name, value);
}
enum JonGuiDataCompassUnits : int {
  JON_GUI_DATA_COMPASS_UNITS_UNSPECIFIED = 0,
  JON_GUI_DATA_COMPASS_UNITS_DEGREES = 1,
  JON_GUI_DATA_COMPASS_UNITS_MILS = 2,
  JON_GUI_DATA_COMPASS_UNITS_GRAD = 3,
  JON_GUI_DATA_COMPASS_UNITS_MRAD = 4,
  JonGuiDataCompassUnits_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  JonGuiDataCompassUnits_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool JonGuiDataCompassUnits_IsValid(int value);
extern const uint32_t JonGuiDataCompassUnits_internal_data_[];
constexpr JonGuiDataCompassUnits JonGuiDataCompassUnits_MIN = static_cast<JonGuiDataCompassUnits>(0);
constexpr JonGuiDataCompassUnits JonGuiDataCompassUnits_MAX = static_cast<JonGuiDataCompassUnits>(4);
constexpr int JonGuiDataCompassUnits_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
JonGuiDataCompassUnits_descriptor();
template <typename T>
const std::string& JonGuiDataCompassUnits_Name(T value) {
  static_assert(std::is_same<T, JonGuiDataCompassUnits>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JonGuiDataCompassUnits_Name().");
  return JonGuiDataCompassUnits_Name(static_cast<JonGuiDataCompassUnits>(value));
}
template <>
inline const std::string& JonGuiDataCompassUnits_Name(JonGuiDataCompassUnits value) {
  return ::google::protobuf::internal::NameOfDenseEnum<JonGuiDataCompassUnits_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool JonGuiDataCompassUnits_Parse(absl::string_view name, JonGuiDataCompassUnits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JonGuiDataCompassUnits>(
      JonGuiDataCompassUnits_descriptor(), name, value);
}
enum JonGuiDataAccumulatorStateIdx : int {
  JON_GUI_DATA_ACCUMULATOR_STATE_UNSPECIFIED = 0,
  JON_GUI_DATA_ACCUMULATOR_STATE_UNKNOWN = 1,
  JON_GUI_DATA_ACCUMULATOR_STATE_EMPTY = 2,
  JON_GUI_DATA_ACCUMULATOR_STATE_1 = 3,
  JON_GUI_DATA_ACCUMULATOR_STATE_2 = 4,
  JON_GUI_DATA_ACCUMULATOR_STATE_3 = 5,
  JON_GUI_DATA_ACCUMULATOR_STATE_4 = 6,
  JON_GUI_DATA_ACCUMULATOR_STATE_5 = 7,
  JON_GUI_DATA_ACCUMULATOR_STATE_6 = 8,
  JON_GUI_DATA_ACCUMULATOR_STATE_FULL = 9,
  JON_GUI_DATA_ACCUMULATOR_STATE_CHARGING = 10,
  JonGuiDataAccumulatorStateIdx_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  JonGuiDataAccumulatorStateIdx_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool JonGuiDataAccumulatorStateIdx_IsValid(int value);
extern const uint32_t JonGuiDataAccumulatorStateIdx_internal_data_[];
constexpr JonGuiDataAccumulatorStateIdx JonGuiDataAccumulatorStateIdx_MIN = static_cast<JonGuiDataAccumulatorStateIdx>(0);
constexpr JonGuiDataAccumulatorStateIdx JonGuiDataAccumulatorStateIdx_MAX = static_cast<JonGuiDataAccumulatorStateIdx>(10);
constexpr int JonGuiDataAccumulatorStateIdx_ARRAYSIZE = 10 + 1;
const ::google::protobuf::EnumDescriptor*
JonGuiDataAccumulatorStateIdx_descriptor();
template <typename T>
const std::string& JonGuiDataAccumulatorStateIdx_Name(T value) {
  static_assert(std::is_same<T, JonGuiDataAccumulatorStateIdx>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JonGuiDataAccumulatorStateIdx_Name().");
  return JonGuiDataAccumulatorStateIdx_Name(static_cast<JonGuiDataAccumulatorStateIdx>(value));
}
template <>
inline const std::string& JonGuiDataAccumulatorStateIdx_Name(JonGuiDataAccumulatorStateIdx value) {
  return ::google::protobuf::internal::NameOfDenseEnum<JonGuiDataAccumulatorStateIdx_descriptor,
                                                 0, 10>(
      static_cast<int>(value));
}
inline bool JonGuiDataAccumulatorStateIdx_Parse(absl::string_view name, JonGuiDataAccumulatorStateIdx* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JonGuiDataAccumulatorStateIdx>(
      JonGuiDataAccumulatorStateIdx_descriptor(), name, value);
}
enum JonGuiDataTimeFormats : int {
  JON_GUI_DATA_TIME_FORMAT_UNSPECIFIED = 0,
  JON_GUI_DATA_TIME_FORMAT_H_M_S = 1,
  JON_GUI_DATA_TIME_FORMAT_Y_m_D_H_M_S = 2,
  JonGuiDataTimeFormats_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  JonGuiDataTimeFormats_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool JonGuiDataTimeFormats_IsValid(int value);
extern const uint32_t JonGuiDataTimeFormats_internal_data_[];
constexpr JonGuiDataTimeFormats JonGuiDataTimeFormats_MIN = static_cast<JonGuiDataTimeFormats>(0);
constexpr JonGuiDataTimeFormats JonGuiDataTimeFormats_MAX = static_cast<JonGuiDataTimeFormats>(2);
constexpr int JonGuiDataTimeFormats_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
JonGuiDataTimeFormats_descriptor();
template <typename T>
const std::string& JonGuiDataTimeFormats_Name(T value) {
  static_assert(std::is_same<T, JonGuiDataTimeFormats>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JonGuiDataTimeFormats_Name().");
  return JonGuiDataTimeFormats_Name(static_cast<JonGuiDataTimeFormats>(value));
}
template <>
inline const std::string& JonGuiDataTimeFormats_Name(JonGuiDataTimeFormats value) {
  return ::google::protobuf::internal::NameOfDenseEnum<JonGuiDataTimeFormats_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool JonGuiDataTimeFormats_Parse(absl::string_view name, JonGuiDataTimeFormats* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JonGuiDataTimeFormats>(
      JonGuiDataTimeFormats_descriptor(), name, value);
}
enum JonGuiDataRotaryDirection : int {
  JON_GUI_DATA_ROTARY_DIRECTION_UNSPECIFIED = 0,
  JON_GUI_DATA_ROTARY_DIRECTION_CLOCKWISE = 1,
  JON_GUI_DATA_ROTARY_DIRECTION_COUNTER_CLOCKWISE = 2,
  JonGuiDataRotaryDirection_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  JonGuiDataRotaryDirection_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool JonGuiDataRotaryDirection_IsValid(int value);
extern const uint32_t JonGuiDataRotaryDirection_internal_data_[];
constexpr JonGuiDataRotaryDirection JonGuiDataRotaryDirection_MIN = static_cast<JonGuiDataRotaryDirection>(0);
constexpr JonGuiDataRotaryDirection JonGuiDataRotaryDirection_MAX = static_cast<JonGuiDataRotaryDirection>(2);
constexpr int JonGuiDataRotaryDirection_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
JonGuiDataRotaryDirection_descriptor();
template <typename T>
const std::string& JonGuiDataRotaryDirection_Name(T value) {
  static_assert(std::is_same<T, JonGuiDataRotaryDirection>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JonGuiDataRotaryDirection_Name().");
  return JonGuiDataRotaryDirection_Name(static_cast<JonGuiDataRotaryDirection>(value));
}
template <>
inline const std::string& JonGuiDataRotaryDirection_Name(JonGuiDataRotaryDirection value) {
  return ::google::protobuf::internal::NameOfDenseEnum<JonGuiDataRotaryDirection_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool JonGuiDataRotaryDirection_Parse(absl::string_view name, JonGuiDataRotaryDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JonGuiDataRotaryDirection>(
      JonGuiDataRotaryDirection_descriptor(), name, value);
}
enum JonGuiDataLrfScanModes : int {
  JON_GUI_DATA_LRF_SCAN_MODE_UNSPECIFIED = 0,
  JON_GUI_DATA_LRF_SCAN_MODE_1_HZ_CONTINUOUS = 1,
  JON_GUI_DATA_LRF_SCAN_MODE_4_HZ_CONTINUOUS = 2,
  JON_GUI_DATA_LRF_SCAN_MODE_10_HZ_CONTINUOUS = 3,
  JON_GUI_DATA_LRF_SCAN_MODE_20_HZ_CONTINUOUS = 4,
  JON_GUI_DATA_LRF_SCAN_MODE_100_HZ_CONTINUOUS = 5,
  JON_GUI_DATA_LRF_SCAN_MODE_200_HZ_CONTINUOUS = 6,
  JonGuiDataLrfScanModes_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  JonGuiDataLrfScanModes_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool JonGuiDataLrfScanModes_IsValid(int value);
extern const uint32_t JonGuiDataLrfScanModes_internal_data_[];
constexpr JonGuiDataLrfScanModes JonGuiDataLrfScanModes_MIN = static_cast<JonGuiDataLrfScanModes>(0);
constexpr JonGuiDataLrfScanModes JonGuiDataLrfScanModes_MAX = static_cast<JonGuiDataLrfScanModes>(6);
constexpr int JonGuiDataLrfScanModes_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
JonGuiDataLrfScanModes_descriptor();
template <typename T>
const std::string& JonGuiDataLrfScanModes_Name(T value) {
  static_assert(std::is_same<T, JonGuiDataLrfScanModes>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JonGuiDataLrfScanModes_Name().");
  return JonGuiDataLrfScanModes_Name(static_cast<JonGuiDataLrfScanModes>(value));
}
template <>
inline const std::string& JonGuiDataLrfScanModes_Name(JonGuiDataLrfScanModes value) {
  return ::google::protobuf::internal::NameOfDenseEnum<JonGuiDataLrfScanModes_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool JonGuiDataLrfScanModes_Parse(absl::string_view name, JonGuiDataLrfScanModes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JonGuiDataLrfScanModes>(
      JonGuiDataLrfScanModes_descriptor(), name, value);
}
enum JonGuiDatatLrfLaserPointerModes : int {
  JON_GUI_DATA_LRF_LASER_POINTER_MODE_UNSPECIFIED = 0,
  JON_GUI_DATA_LRF_LASER_POINTER_MODE_OFF = 1,
  JON_GUI_DATA_LRF_LASER_POINTER_MODE_ON_1 = 2,
  JON_GUI_DATA_LRF_LASER_POINTER_MODE_ON_2 = 3,
  JonGuiDatatLrfLaserPointerModes_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  JonGuiDatatLrfLaserPointerModes_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool JonGuiDatatLrfLaserPointerModes_IsValid(int value);
extern const uint32_t JonGuiDatatLrfLaserPointerModes_internal_data_[];
constexpr JonGuiDatatLrfLaserPointerModes JonGuiDatatLrfLaserPointerModes_MIN = static_cast<JonGuiDatatLrfLaserPointerModes>(0);
constexpr JonGuiDatatLrfLaserPointerModes JonGuiDatatLrfLaserPointerModes_MAX = static_cast<JonGuiDatatLrfLaserPointerModes>(3);
constexpr int JonGuiDatatLrfLaserPointerModes_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
JonGuiDatatLrfLaserPointerModes_descriptor();
template <typename T>
const std::string& JonGuiDatatLrfLaserPointerModes_Name(T value) {
  static_assert(std::is_same<T, JonGuiDatatLrfLaserPointerModes>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JonGuiDatatLrfLaserPointerModes_Name().");
  return JonGuiDatatLrfLaserPointerModes_Name(static_cast<JonGuiDatatLrfLaserPointerModes>(value));
}
template <>
inline const std::string& JonGuiDatatLrfLaserPointerModes_Name(JonGuiDatatLrfLaserPointerModes value) {
  return ::google::protobuf::internal::NameOfDenseEnum<JonGuiDatatLrfLaserPointerModes_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool JonGuiDatatLrfLaserPointerModes_Parse(absl::string_view name, JonGuiDatatLrfLaserPointerModes* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JonGuiDatatLrfLaserPointerModes>(
      JonGuiDatatLrfLaserPointerModes_descriptor(), name, value);
}
enum JonGuiDataCompassCalibrateStatus : int {
  JON_GUI_DATA_COMPASS_CALIBRATE_STATUS_UNSPECIFIED = 0,
  JON_GUI_DATA_COMPASS_CALIBRATE_STATUS_NOT_CALIBRATING = 1,
  JON_GUI_DATA_COMPASS_CALIBRATE_STATUS_CALIBRATING_SHORT = 2,
  JON_GUI_DATA_COMPASS_CALIBRATE_STATUS_CALIBRATING_LONG = 3,
  JON_GUI_DATA_COMPASS_CALIBRATE_STATUS_FINISHED = 4,
  JON_GUI_DATA_COMPASS_CALIBRATE_STATUS_ERROR = 5,
  JonGuiDataCompassCalibrateStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  JonGuiDataCompassCalibrateStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool JonGuiDataCompassCalibrateStatus_IsValid(int value);
extern const uint32_t JonGuiDataCompassCalibrateStatus_internal_data_[];
constexpr JonGuiDataCompassCalibrateStatus JonGuiDataCompassCalibrateStatus_MIN = static_cast<JonGuiDataCompassCalibrateStatus>(0);
constexpr JonGuiDataCompassCalibrateStatus JonGuiDataCompassCalibrateStatus_MAX = static_cast<JonGuiDataCompassCalibrateStatus>(5);
constexpr int JonGuiDataCompassCalibrateStatus_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
JonGuiDataCompassCalibrateStatus_descriptor();
template <typename T>
const std::string& JonGuiDataCompassCalibrateStatus_Name(T value) {
  static_assert(std::is_same<T, JonGuiDataCompassCalibrateStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JonGuiDataCompassCalibrateStatus_Name().");
  return JonGuiDataCompassCalibrateStatus_Name(static_cast<JonGuiDataCompassCalibrateStatus>(value));
}
template <>
inline const std::string& JonGuiDataCompassCalibrateStatus_Name(JonGuiDataCompassCalibrateStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<JonGuiDataCompassCalibrateStatus_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool JonGuiDataCompassCalibrateStatus_Parse(absl::string_view name, JonGuiDataCompassCalibrateStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JonGuiDataCompassCalibrateStatus>(
      JonGuiDataCompassCalibrateStatus_descriptor(), name, value);
}
enum JonGuiDataRotaryMode : int {
  JON_GUI_DATA_ROTARY_MODE_UNSPECIFIED = 0,
  JON_GUI_DATA_ROTARY_MODE_INITIALIZATION = 1,
  JON_GUI_DATA_ROTARY_MODE_SPEED = 2,
  JON_GUI_DATA_ROTARY_MODE_POSITION = 3,
  JON_GUI_DATA_ROTARY_MODE_STABILIZATION = 4,
  JON_GUI_DATA_ROTARY_MODE_TARGETING = 5,
  JON_GUI_DATA_ROTARY_MODE_VIDEO_TRACKER = 6,
  JonGuiDataRotaryMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  JonGuiDataRotaryMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool JonGuiDataRotaryMode_IsValid(int value);
extern const uint32_t JonGuiDataRotaryMode_internal_data_[];
constexpr JonGuiDataRotaryMode JonGuiDataRotaryMode_MIN = static_cast<JonGuiDataRotaryMode>(0);
constexpr JonGuiDataRotaryMode JonGuiDataRotaryMode_MAX = static_cast<JonGuiDataRotaryMode>(6);
constexpr int JonGuiDataRotaryMode_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
JonGuiDataRotaryMode_descriptor();
template <typename T>
const std::string& JonGuiDataRotaryMode_Name(T value) {
  static_assert(std::is_same<T, JonGuiDataRotaryMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JonGuiDataRotaryMode_Name().");
  return JonGuiDataRotaryMode_Name(static_cast<JonGuiDataRotaryMode>(value));
}
template <>
inline const std::string& JonGuiDataRotaryMode_Name(JonGuiDataRotaryMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<JonGuiDataRotaryMode_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool JonGuiDataRotaryMode_Parse(absl::string_view name, JonGuiDataRotaryMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JonGuiDataRotaryMode>(
      JonGuiDataRotaryMode_descriptor(), name, value);
}
enum JonGuiDataVideoChannel : int {
  JON_GUI_DATA_VIDEO_CHANNEL_UNSPECIFIED = 0,
  JON_GUI_DATA_VIDEO_CHANNEL_HEAT = 1,
  JON_GUI_DATA_VIDEO_CHANNEL_DAY = 2,
  JonGuiDataVideoChannel_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  JonGuiDataVideoChannel_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool JonGuiDataVideoChannel_IsValid(int value);
extern const uint32_t JonGuiDataVideoChannel_internal_data_[];
constexpr JonGuiDataVideoChannel JonGuiDataVideoChannel_MIN = static_cast<JonGuiDataVideoChannel>(0);
constexpr JonGuiDataVideoChannel JonGuiDataVideoChannel_MAX = static_cast<JonGuiDataVideoChannel>(2);
constexpr int JonGuiDataVideoChannel_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
JonGuiDataVideoChannel_descriptor();
template <typename T>
const std::string& JonGuiDataVideoChannel_Name(T value) {
  static_assert(std::is_same<T, JonGuiDataVideoChannel>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JonGuiDataVideoChannel_Name().");
  return JonGuiDataVideoChannel_Name(static_cast<JonGuiDataVideoChannel>(value));
}
template <>
inline const std::string& JonGuiDataVideoChannel_Name(JonGuiDataVideoChannel value) {
  return ::google::protobuf::internal::NameOfDenseEnum<JonGuiDataVideoChannel_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool JonGuiDataVideoChannel_Parse(absl::string_view name, JonGuiDataVideoChannel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JonGuiDataVideoChannel>(
      JonGuiDataVideoChannel_descriptor(), name, value);
}
enum JonGuiDataRecOsdScreen : int {
  JON_GUI_DATA_REC_OSD_SCREEN_UNSPECIFIED = 0,
  JON_GUI_DATA_REC_OSD_SCREEN_MAIN = 1,
  JON_GUI_DATA_REC_OSD_SCREEN_LRF_MEASURE = 2,
  JON_GUI_DATA_REC_OSD_SCREEN_LRF_RESULT = 3,
  JON_GUI_DATA_REC_OSD_SCREEN_LRF_RESULT_SIMPLIFIED = 4,
  JonGuiDataRecOsdScreen_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  JonGuiDataRecOsdScreen_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool JonGuiDataRecOsdScreen_IsValid(int value);
extern const uint32_t JonGuiDataRecOsdScreen_internal_data_[];
constexpr JonGuiDataRecOsdScreen JonGuiDataRecOsdScreen_MIN = static_cast<JonGuiDataRecOsdScreen>(0);
constexpr JonGuiDataRecOsdScreen JonGuiDataRecOsdScreen_MAX = static_cast<JonGuiDataRecOsdScreen>(4);
constexpr int JonGuiDataRecOsdScreen_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
JonGuiDataRecOsdScreen_descriptor();
template <typename T>
const std::string& JonGuiDataRecOsdScreen_Name(T value) {
  static_assert(std::is_same<T, JonGuiDataRecOsdScreen>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JonGuiDataRecOsdScreen_Name().");
  return JonGuiDataRecOsdScreen_Name(static_cast<JonGuiDataRecOsdScreen>(value));
}
template <>
inline const std::string& JonGuiDataRecOsdScreen_Name(JonGuiDataRecOsdScreen value) {
  return ::google::protobuf::internal::NameOfDenseEnum<JonGuiDataRecOsdScreen_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool JonGuiDataRecOsdScreen_Parse(absl::string_view name, JonGuiDataRecOsdScreen* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JonGuiDataRecOsdScreen>(
      JonGuiDataRecOsdScreen_descriptor(), name, value);
}
enum JonGuiDataFxModeDay : int {
  JON_GUI_DATA_FX_MODE_DAY_DEFAULT = 0,
  JON_GUI_DATA_FX_MODE_DAY_A = 1,
  JON_GUI_DATA_FX_MODE_DAY_B = 2,
  JON_GUI_DATA_FX_MODE_DAY_C = 3,
  JON_GUI_DATA_FX_MODE_DAY_D = 4,
  JON_GUI_DATA_FX_MODE_DAY_E = 5,
  JON_GUI_DATA_FX_MODE_DAY_F = 6,
  JonGuiDataFxModeDay_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  JonGuiDataFxModeDay_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool JonGuiDataFxModeDay_IsValid(int value);
extern const uint32_t JonGuiDataFxModeDay_internal_data_[];
constexpr JonGuiDataFxModeDay JonGuiDataFxModeDay_MIN = static_cast<JonGuiDataFxModeDay>(0);
constexpr JonGuiDataFxModeDay JonGuiDataFxModeDay_MAX = static_cast<JonGuiDataFxModeDay>(6);
constexpr int JonGuiDataFxModeDay_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
JonGuiDataFxModeDay_descriptor();
template <typename T>
const std::string& JonGuiDataFxModeDay_Name(T value) {
  static_assert(std::is_same<T, JonGuiDataFxModeDay>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JonGuiDataFxModeDay_Name().");
  return JonGuiDataFxModeDay_Name(static_cast<JonGuiDataFxModeDay>(value));
}
template <>
inline const std::string& JonGuiDataFxModeDay_Name(JonGuiDataFxModeDay value) {
  return ::google::protobuf::internal::NameOfDenseEnum<JonGuiDataFxModeDay_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool JonGuiDataFxModeDay_Parse(absl::string_view name, JonGuiDataFxModeDay* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JonGuiDataFxModeDay>(
      JonGuiDataFxModeDay_descriptor(), name, value);
}
enum JonGuiDataFxModeHeat : int {
  JON_GUI_DATA_FX_MODE_HEAT_DEFAULT = 0,
  JON_GUI_DATA_FX_MODE_HEAT_A = 1,
  JON_GUI_DATA_FX_MODE_HEAT_B = 2,
  JON_GUI_DATA_FX_MODE_HEAT_C = 3,
  JON_GUI_DATA_FX_MODE_HEAT_D = 4,
  JON_GUI_DATA_FX_MODE_HEAT_E = 5,
  JON_GUI_DATA_FX_MODE_HEAT_F = 6,
  JonGuiDataFxModeHeat_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  JonGuiDataFxModeHeat_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool JonGuiDataFxModeHeat_IsValid(int value);
extern const uint32_t JonGuiDataFxModeHeat_internal_data_[];
constexpr JonGuiDataFxModeHeat JonGuiDataFxModeHeat_MIN = static_cast<JonGuiDataFxModeHeat>(0);
constexpr JonGuiDataFxModeHeat JonGuiDataFxModeHeat_MAX = static_cast<JonGuiDataFxModeHeat>(6);
constexpr int JonGuiDataFxModeHeat_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
JonGuiDataFxModeHeat_descriptor();
template <typename T>
const std::string& JonGuiDataFxModeHeat_Name(T value) {
  static_assert(std::is_same<T, JonGuiDataFxModeHeat>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JonGuiDataFxModeHeat_Name().");
  return JonGuiDataFxModeHeat_Name(static_cast<JonGuiDataFxModeHeat>(value));
}
template <>
inline const std::string& JonGuiDataFxModeHeat_Name(JonGuiDataFxModeHeat value) {
  return ::google::protobuf::internal::NameOfDenseEnum<JonGuiDataFxModeHeat_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool JonGuiDataFxModeHeat_Parse(absl::string_view name, JonGuiDataFxModeHeat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JonGuiDataFxModeHeat>(
      JonGuiDataFxModeHeat_descriptor(), name, value);
}
enum JonGuiDataSystemLocalizations : int {
  JON_GUI_DATA_SYSTEM_LOCALIZATION_UNSPECIFIED = 0,
  JON_GUI_DATA_SYSTEM_LOCALIZATION_EN = 1,
  JON_GUI_DATA_SYSTEM_LOCALIZATION_UA = 2,
  JON_GUI_DATA_SYSTEM_LOCALIZATION_AR = 3,
  JON_GUI_DATA_SYSTEM_LOCALIZATION_CS = 4,
  JonGuiDataSystemLocalizations_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  JonGuiDataSystemLocalizations_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool JonGuiDataSystemLocalizations_IsValid(int value);
extern const uint32_t JonGuiDataSystemLocalizations_internal_data_[];
constexpr JonGuiDataSystemLocalizations JonGuiDataSystemLocalizations_MIN = static_cast<JonGuiDataSystemLocalizations>(0);
constexpr JonGuiDataSystemLocalizations JonGuiDataSystemLocalizations_MAX = static_cast<JonGuiDataSystemLocalizations>(4);
constexpr int JonGuiDataSystemLocalizations_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
JonGuiDataSystemLocalizations_descriptor();
template <typename T>
const std::string& JonGuiDataSystemLocalizations_Name(T value) {
  static_assert(std::is_same<T, JonGuiDataSystemLocalizations>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JonGuiDataSystemLocalizations_Name().");
  return JonGuiDataSystemLocalizations_Name(static_cast<JonGuiDataSystemLocalizations>(value));
}
template <>
inline const std::string& JonGuiDataSystemLocalizations_Name(JonGuiDataSystemLocalizations value) {
  return ::google::protobuf::internal::NameOfDenseEnum<JonGuiDataSystemLocalizations_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool JonGuiDataSystemLocalizations_Parse(absl::string_view name, JonGuiDataSystemLocalizations* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JonGuiDataSystemLocalizations>(
      JonGuiDataSystemLocalizations_descriptor(), name, value);
}
enum JonGuiDataClientType : int {
  JON_GUI_DATA_CLIENT_TYPE_UNSPECIFIED = 0,
  JON_GUI_DATA_CLIENT_TYPE_INTERNAL_CV = 1,
  JON_GUI_DATA_CLIENT_TYPE_LOCAL_NETWORK = 2,
  JON_GUI_DATA_CLIENT_TYPE_CERTIFICATE_PROTECTED = 3,
  JON_GUI_DATA_CLIENT_TYPE_LIRA = 4,
  JonGuiDataClientType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  JonGuiDataClientType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool JonGuiDataClientType_IsValid(int value);
extern const uint32_t JonGuiDataClientType_internal_data_[];
constexpr JonGuiDataClientType JonGuiDataClientType_MIN = static_cast<JonGuiDataClientType>(0);
constexpr JonGuiDataClientType JonGuiDataClientType_MAX = static_cast<JonGuiDataClientType>(4);
constexpr int JonGuiDataClientType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
JonGuiDataClientType_descriptor();
template <typename T>
const std::string& JonGuiDataClientType_Name(T value) {
  static_assert(std::is_same<T, JonGuiDataClientType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JonGuiDataClientType_Name().");
  return JonGuiDataClientType_Name(static_cast<JonGuiDataClientType>(value));
}
template <>
inline const std::string& JonGuiDataClientType_Name(JonGuiDataClientType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<JonGuiDataClientType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool JonGuiDataClientType_Parse(absl::string_view name, JonGuiDataClientType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JonGuiDataClientType>(
      JonGuiDataClientType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class JonGuiDataMeteo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ser.JonGuiDataMeteo) */ {
 public:
  inline JonGuiDataMeteo() : JonGuiDataMeteo(nullptr) {}
  ~JonGuiDataMeteo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(JonGuiDataMeteo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(JonGuiDataMeteo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR JonGuiDataMeteo(
      ::google::protobuf::internal::ConstantInitialized);

  inline JonGuiDataMeteo(const JonGuiDataMeteo& from) : JonGuiDataMeteo(nullptr, from) {}
  inline JonGuiDataMeteo(JonGuiDataMeteo&& from) noexcept
      : JonGuiDataMeteo(nullptr, std::move(from)) {}
  inline JonGuiDataMeteo& operator=(const JonGuiDataMeteo& from) {
    CopyFrom(from);
    return *this;
  }
  inline JonGuiDataMeteo& operator=(JonGuiDataMeteo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JonGuiDataMeteo& default_instance() {
    return *internal_default_instance();
  }
  static inline const JonGuiDataMeteo* internal_default_instance() {
    return reinterpret_cast<const JonGuiDataMeteo*>(
        &_JonGuiDataMeteo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(JonGuiDataMeteo& a, JonGuiDataMeteo& b) { a.Swap(&b); }
  inline void Swap(JonGuiDataMeteo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JonGuiDataMeteo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JonGuiDataMeteo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<JonGuiDataMeteo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JonGuiDataMeteo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const JonGuiDataMeteo& from) { JonGuiDataMeteo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(JonGuiDataMeteo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ser.JonGuiDataMeteo"; }

 protected:
  explicit JonGuiDataMeteo(::google::protobuf::Arena* arena);
  JonGuiDataMeteo(::google::protobuf::Arena* arena, const JonGuiDataMeteo& from);
  JonGuiDataMeteo(::google::protobuf::Arena* arena, JonGuiDataMeteo&& from) noexcept
      : JonGuiDataMeteo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTemperatureFieldNumber = 1,
    kHumidityFieldNumber = 2,
    kPressureFieldNumber = 3,
  };
  // double temperature = 1;
  void clear_temperature() ;
  double temperature() const;
  void set_temperature(double value);

  private:
  double _internal_temperature() const;
  void _internal_set_temperature(double value);

  public:
  // double humidity = 2;
  void clear_humidity() ;
  double humidity() const;
  void set_humidity(double value);

  private:
  double _internal_humidity() const;
  void _internal_set_humidity(double value);

  public:
  // double pressure = 3;
  void clear_pressure() ;
  double pressure() const;
  void set_pressure(double value);

  private:
  double _internal_pressure() const;
  void _internal_set_pressure(double value);

  public:
  // @@protoc_insertion_point(class_scope:ser.JonGuiDataMeteo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const JonGuiDataMeteo& from_msg);
    double temperature_;
    double humidity_;
    double pressure_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fdata_5ftypes_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// JonGuiDataMeteo

// double temperature = 1;
inline void JonGuiDataMeteo::clear_temperature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = 0;
}
inline double JonGuiDataMeteo::temperature() const {
  // @@protoc_insertion_point(field_get:ser.JonGuiDataMeteo.temperature)
  return _internal_temperature();
}
inline void JonGuiDataMeteo::set_temperature(double value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:ser.JonGuiDataMeteo.temperature)
}
inline double JonGuiDataMeteo::_internal_temperature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.temperature_;
}
inline void JonGuiDataMeteo::_internal_set_temperature(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.temperature_ = value;
}

// double humidity = 2;
inline void JonGuiDataMeteo::clear_humidity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.humidity_ = 0;
}
inline double JonGuiDataMeteo::humidity() const {
  // @@protoc_insertion_point(field_get:ser.JonGuiDataMeteo.humidity)
  return _internal_humidity();
}
inline void JonGuiDataMeteo::set_humidity(double value) {
  _internal_set_humidity(value);
  // @@protoc_insertion_point(field_set:ser.JonGuiDataMeteo.humidity)
}
inline double JonGuiDataMeteo::_internal_humidity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.humidity_;
}
inline void JonGuiDataMeteo::_internal_set_humidity(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.humidity_ = value;
}

// double pressure = 3;
inline void JonGuiDataMeteo::clear_pressure() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pressure_ = 0;
}
inline double JonGuiDataMeteo::pressure() const {
  // @@protoc_insertion_point(field_get:ser.JonGuiDataMeteo.pressure)
  return _internal_pressure();
}
inline void JonGuiDataMeteo::set_pressure(double value) {
  _internal_set_pressure(value);
  // @@protoc_insertion_point(field_set:ser.JonGuiDataMeteo.pressure)
}
inline double JonGuiDataMeteo::_internal_pressure() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pressure_;
}
inline void JonGuiDataMeteo::_internal_set_pressure(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pressure_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace ser


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::ser::JonGuiDataVideoChannelHeatFilters> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ser::JonGuiDataVideoChannelHeatFilters>() {
  return ::ser::JonGuiDataVideoChannelHeatFilters_descriptor();
}
template <>
struct is_proto_enum<::ser::JonGuiDataVideoChannelHeatAGCModes> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ser::JonGuiDataVideoChannelHeatAGCModes>() {
  return ::ser::JonGuiDataVideoChannelHeatAGCModes_descriptor();
}
template <>
struct is_proto_enum<::ser::JonGuiDataGpsUnits> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ser::JonGuiDataGpsUnits>() {
  return ::ser::JonGuiDataGpsUnits_descriptor();
}
template <>
struct is_proto_enum<::ser::JonGuiDataGpsFixType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ser::JonGuiDataGpsFixType>() {
  return ::ser::JonGuiDataGpsFixType_descriptor();
}
template <>
struct is_proto_enum<::ser::JonGuiDataCompassUnits> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ser::JonGuiDataCompassUnits>() {
  return ::ser::JonGuiDataCompassUnits_descriptor();
}
template <>
struct is_proto_enum<::ser::JonGuiDataAccumulatorStateIdx> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ser::JonGuiDataAccumulatorStateIdx>() {
  return ::ser::JonGuiDataAccumulatorStateIdx_descriptor();
}
template <>
struct is_proto_enum<::ser::JonGuiDataTimeFormats> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ser::JonGuiDataTimeFormats>() {
  return ::ser::JonGuiDataTimeFormats_descriptor();
}
template <>
struct is_proto_enum<::ser::JonGuiDataRotaryDirection> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ser::JonGuiDataRotaryDirection>() {
  return ::ser::JonGuiDataRotaryDirection_descriptor();
}
template <>
struct is_proto_enum<::ser::JonGuiDataLrfScanModes> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ser::JonGuiDataLrfScanModes>() {
  return ::ser::JonGuiDataLrfScanModes_descriptor();
}
template <>
struct is_proto_enum<::ser::JonGuiDatatLrfLaserPointerModes> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ser::JonGuiDatatLrfLaserPointerModes>() {
  return ::ser::JonGuiDatatLrfLaserPointerModes_descriptor();
}
template <>
struct is_proto_enum<::ser::JonGuiDataCompassCalibrateStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ser::JonGuiDataCompassCalibrateStatus>() {
  return ::ser::JonGuiDataCompassCalibrateStatus_descriptor();
}
template <>
struct is_proto_enum<::ser::JonGuiDataRotaryMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ser::JonGuiDataRotaryMode>() {
  return ::ser::JonGuiDataRotaryMode_descriptor();
}
template <>
struct is_proto_enum<::ser::JonGuiDataVideoChannel> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ser::JonGuiDataVideoChannel>() {
  return ::ser::JonGuiDataVideoChannel_descriptor();
}
template <>
struct is_proto_enum<::ser::JonGuiDataRecOsdScreen> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ser::JonGuiDataRecOsdScreen>() {
  return ::ser::JonGuiDataRecOsdScreen_descriptor();
}
template <>
struct is_proto_enum<::ser::JonGuiDataFxModeDay> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ser::JonGuiDataFxModeDay>() {
  return ::ser::JonGuiDataFxModeDay_descriptor();
}
template <>
struct is_proto_enum<::ser::JonGuiDataFxModeHeat> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ser::JonGuiDataFxModeHeat>() {
  return ::ser::JonGuiDataFxModeHeat_descriptor();
}
template <>
struct is_proto_enum<::ser::JonGuiDataSystemLocalizations> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ser::JonGuiDataSystemLocalizations>() {
  return ::ser::JonGuiDataSystemLocalizations_descriptor();
}
template <>
struct is_proto_enum<::ser::JonGuiDataClientType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ser::JonGuiDataClientType>() {
  return ::ser::JonGuiDataClientType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // jon_5fshared_5fdata_5ftypes_2eproto_2epb_2eh
