// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: jon_shared_cmd_day_cam_glass_heater.proto
// Protobuf C++ Version: 5.29.2

#ifndef jon_5fshared_5fcmd_5fday_5fcam_5fglass_5fheater_2eproto_2epb_2eh
#define jon_5fshared_5fcmd_5fday_5fcam_5fglass_5fheater_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_jon_5fshared_5fcmd_5fday_5fcam_5fglass_5fheater_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_jon_5fshared_5fcmd_5fday_5fcam_5fglass_5fheater_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_jon_5fshared_5fcmd_5fday_5fcam_5fglass_5fheater_2eproto;
namespace cmd {
namespace DayCamGlassHeater {
class GetMeteo;
struct GetMeteoDefaultTypeInternal;
extern GetMeteoDefaultTypeInternal _GetMeteo_default_instance_;
class Root;
struct RootDefaultTypeInternal;
extern RootDefaultTypeInternal _Root_default_instance_;
class Start;
struct StartDefaultTypeInternal;
extern StartDefaultTypeInternal _Start_default_instance_;
class Stop;
struct StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class TurnOff;
struct TurnOffDefaultTypeInternal;
extern TurnOffDefaultTypeInternal _TurnOff_default_instance_;
class TurnOn;
struct TurnOnDefaultTypeInternal;
extern TurnOnDefaultTypeInternal _TurnOn_default_instance_;
}  // namespace DayCamGlassHeater
}  // namespace cmd
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cmd {
namespace DayCamGlassHeater {

// ===================================================================


// -------------------------------------------------------------------

class TurnOn final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.DayCamGlassHeater.TurnOn) */ {
 public:
  inline TurnOn() : TurnOn(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TurnOn* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TurnOn));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TurnOn(
      ::google::protobuf::internal::ConstantInitialized);

  inline TurnOn(const TurnOn& from) : TurnOn(nullptr, from) {}
  inline TurnOn(TurnOn&& from) noexcept
      : TurnOn(nullptr, std::move(from)) {}
  inline TurnOn& operator=(const TurnOn& from) {
    CopyFrom(from);
    return *this;
  }
  inline TurnOn& operator=(TurnOn&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TurnOn& default_instance() {
    return *internal_default_instance();
  }
  static inline const TurnOn* internal_default_instance() {
    return reinterpret_cast<const TurnOn*>(
        &_TurnOn_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(TurnOn& a, TurnOn& b) { a.Swap(&b); }
  inline void Swap(TurnOn* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TurnOn* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TurnOn* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<TurnOn>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TurnOn& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TurnOn& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamGlassHeater.TurnOn"; }

 protected:
  explicit TurnOn(::google::protobuf::Arena* arena);
  TurnOn(::google::protobuf::Arena* arena, const TurnOn& from);
  TurnOn(::google::protobuf::Arena* arena, TurnOn&& from) noexcept
      : TurnOn(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.DayCamGlassHeater.TurnOn)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TurnOn& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcam_5fglass_5fheater_2eproto;
};
// -------------------------------------------------------------------

class TurnOff final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.DayCamGlassHeater.TurnOff) */ {
 public:
  inline TurnOff() : TurnOff(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TurnOff* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TurnOff));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TurnOff(
      ::google::protobuf::internal::ConstantInitialized);

  inline TurnOff(const TurnOff& from) : TurnOff(nullptr, from) {}
  inline TurnOff(TurnOff&& from) noexcept
      : TurnOff(nullptr, std::move(from)) {}
  inline TurnOff& operator=(const TurnOff& from) {
    CopyFrom(from);
    return *this;
  }
  inline TurnOff& operator=(TurnOff&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TurnOff& default_instance() {
    return *internal_default_instance();
  }
  static inline const TurnOff* internal_default_instance() {
    return reinterpret_cast<const TurnOff*>(
        &_TurnOff_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(TurnOff& a, TurnOff& b) { a.Swap(&b); }
  inline void Swap(TurnOff* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TurnOff* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TurnOff* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<TurnOff>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TurnOff& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TurnOff& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamGlassHeater.TurnOff"; }

 protected:
  explicit TurnOff(::google::protobuf::Arena* arena);
  TurnOff(::google::protobuf::Arena* arena, const TurnOff& from);
  TurnOff(::google::protobuf::Arena* arena, TurnOff&& from) noexcept
      : TurnOff(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.DayCamGlassHeater.TurnOff)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TurnOff& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcam_5fglass_5fheater_2eproto;
};
// -------------------------------------------------------------------

class Stop final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.DayCamGlassHeater.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Stop* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Stop));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Stop(
      ::google::protobuf::internal::ConstantInitialized);

  inline Stop(const Stop& from) : Stop(nullptr, from) {}
  inline Stop(Stop&& from) noexcept
      : Stop(nullptr, std::move(from)) {}
  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
        &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Stop& a, Stop& b) { a.Swap(&b); }
  inline void Swap(Stop* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stop* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Stop>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Stop& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Stop& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamGlassHeater.Stop"; }

 protected:
  explicit Stop(::google::protobuf::Arena* arena);
  Stop(::google::protobuf::Arena* arena, const Stop& from);
  Stop(::google::protobuf::Arena* arena, Stop&& from) noexcept
      : Stop(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.DayCamGlassHeater.Stop)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Stop& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcam_5fglass_5fheater_2eproto;
};
// -------------------------------------------------------------------

class Start final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.DayCamGlassHeater.Start) */ {
 public:
  inline Start() : Start(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Start* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Start));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Start(
      ::google::protobuf::internal::ConstantInitialized);

  inline Start(const Start& from) : Start(nullptr, from) {}
  inline Start(Start&& from) noexcept
      : Start(nullptr, std::move(from)) {}
  inline Start& operator=(const Start& from) {
    CopyFrom(from);
    return *this;
  }
  inline Start& operator=(Start&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Start& default_instance() {
    return *internal_default_instance();
  }
  static inline const Start* internal_default_instance() {
    return reinterpret_cast<const Start*>(
        &_Start_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Start& a, Start& b) { a.Swap(&b); }
  inline void Swap(Start* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Start* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Start* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Start>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Start& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Start& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamGlassHeater.Start"; }

 protected:
  explicit Start(::google::protobuf::Arena* arena);
  Start(::google::protobuf::Arena* arena, const Start& from);
  Start(::google::protobuf::Arena* arena, Start&& from) noexcept
      : Start(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.DayCamGlassHeater.Start)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Start& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcam_5fglass_5fheater_2eproto;
};
// -------------------------------------------------------------------

class GetMeteo final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:cmd.DayCamGlassHeater.GetMeteo) */ {
 public:
  inline GetMeteo() : GetMeteo(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetMeteo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetMeteo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetMeteo(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetMeteo(const GetMeteo& from) : GetMeteo(nullptr, from) {}
  inline GetMeteo(GetMeteo&& from) noexcept
      : GetMeteo(nullptr, std::move(from)) {}
  inline GetMeteo& operator=(const GetMeteo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMeteo& operator=(GetMeteo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMeteo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMeteo* internal_default_instance() {
    return reinterpret_cast<const GetMeteo*>(
        &_GetMeteo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(GetMeteo& a, GetMeteo& b) { a.Swap(&b); }
  inline void Swap(GetMeteo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMeteo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMeteo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<GetMeteo>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetMeteo& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetMeteo& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamGlassHeater.GetMeteo"; }

 protected:
  explicit GetMeteo(::google::protobuf::Arena* arena);
  GetMeteo(::google::protobuf::Arena* arena, const GetMeteo& from);
  GetMeteo(::google::protobuf::Arena* arena, GetMeteo&& from) noexcept
      : GetMeteo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:cmd.DayCamGlassHeater.GetMeteo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetMeteo& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcam_5fglass_5fheater_2eproto;
};
// -------------------------------------------------------------------

class Root final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cmd.DayCamGlassHeater.Root) */ {
 public:
  inline Root() : Root(nullptr) {}
  ~Root() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Root* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Root));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Root(
      ::google::protobuf::internal::ConstantInitialized);

  inline Root(const Root& from) : Root(nullptr, from) {}
  inline Root(Root&& from) noexcept
      : Root(nullptr, std::move(from)) {}
  inline Root& operator=(const Root& from) {
    CopyFrom(from);
    return *this;
  }
  inline Root& operator=(Root&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Root& default_instance() {
    return *internal_default_instance();
  }
  enum CmdCase {
    kStart = 1,
    kStop = 2,
    kTurnOn = 3,
    kTurnOff = 4,
    kGetMeteo = 5,
    CMD_NOT_SET = 0,
  };
  static inline const Root* internal_default_instance() {
    return reinterpret_cast<const Root*>(
        &_Root_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Root& a, Root& b) { a.Swap(&b); }
  inline void Swap(Root* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Root* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Root* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Root>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Root& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Root& from) { Root::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Root* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cmd.DayCamGlassHeater.Root"; }

 protected:
  explicit Root(::google::protobuf::Arena* arena);
  Root(::google::protobuf::Arena* arena, const Root& from);
  Root(::google::protobuf::Arena* arena, Root&& from) noexcept
      : Root(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStartFieldNumber = 1,
    kStopFieldNumber = 2,
    kTurnOnFieldNumber = 3,
    kTurnOffFieldNumber = 4,
    kGetMeteoFieldNumber = 5,
  };
  // .cmd.DayCamGlassHeater.Start start = 1;
  bool has_start() const;
  private:
  bool _internal_has_start() const;

  public:
  void clear_start() ;
  const ::cmd::DayCamGlassHeater::Start& start() const;
  PROTOBUF_NODISCARD ::cmd::DayCamGlassHeater::Start* release_start();
  ::cmd::DayCamGlassHeater::Start* mutable_start();
  void set_allocated_start(::cmd::DayCamGlassHeater::Start* value);
  void unsafe_arena_set_allocated_start(::cmd::DayCamGlassHeater::Start* value);
  ::cmd::DayCamGlassHeater::Start* unsafe_arena_release_start();

  private:
  const ::cmd::DayCamGlassHeater::Start& _internal_start() const;
  ::cmd::DayCamGlassHeater::Start* _internal_mutable_start();

  public:
  // .cmd.DayCamGlassHeater.Stop stop = 2;
  bool has_stop() const;
  private:
  bool _internal_has_stop() const;

  public:
  void clear_stop() ;
  const ::cmd::DayCamGlassHeater::Stop& stop() const;
  PROTOBUF_NODISCARD ::cmd::DayCamGlassHeater::Stop* release_stop();
  ::cmd::DayCamGlassHeater::Stop* mutable_stop();
  void set_allocated_stop(::cmd::DayCamGlassHeater::Stop* value);
  void unsafe_arena_set_allocated_stop(::cmd::DayCamGlassHeater::Stop* value);
  ::cmd::DayCamGlassHeater::Stop* unsafe_arena_release_stop();

  private:
  const ::cmd::DayCamGlassHeater::Stop& _internal_stop() const;
  ::cmd::DayCamGlassHeater::Stop* _internal_mutable_stop();

  public:
  // .cmd.DayCamGlassHeater.TurnOn turn_on = 3;
  bool has_turn_on() const;
  private:
  bool _internal_has_turn_on() const;

  public:
  void clear_turn_on() ;
  const ::cmd::DayCamGlassHeater::TurnOn& turn_on() const;
  PROTOBUF_NODISCARD ::cmd::DayCamGlassHeater::TurnOn* release_turn_on();
  ::cmd::DayCamGlassHeater::TurnOn* mutable_turn_on();
  void set_allocated_turn_on(::cmd::DayCamGlassHeater::TurnOn* value);
  void unsafe_arena_set_allocated_turn_on(::cmd::DayCamGlassHeater::TurnOn* value);
  ::cmd::DayCamGlassHeater::TurnOn* unsafe_arena_release_turn_on();

  private:
  const ::cmd::DayCamGlassHeater::TurnOn& _internal_turn_on() const;
  ::cmd::DayCamGlassHeater::TurnOn* _internal_mutable_turn_on();

  public:
  // .cmd.DayCamGlassHeater.TurnOff turn_off = 4;
  bool has_turn_off() const;
  private:
  bool _internal_has_turn_off() const;

  public:
  void clear_turn_off() ;
  const ::cmd::DayCamGlassHeater::TurnOff& turn_off() const;
  PROTOBUF_NODISCARD ::cmd::DayCamGlassHeater::TurnOff* release_turn_off();
  ::cmd::DayCamGlassHeater::TurnOff* mutable_turn_off();
  void set_allocated_turn_off(::cmd::DayCamGlassHeater::TurnOff* value);
  void unsafe_arena_set_allocated_turn_off(::cmd::DayCamGlassHeater::TurnOff* value);
  ::cmd::DayCamGlassHeater::TurnOff* unsafe_arena_release_turn_off();

  private:
  const ::cmd::DayCamGlassHeater::TurnOff& _internal_turn_off() const;
  ::cmd::DayCamGlassHeater::TurnOff* _internal_mutable_turn_off();

  public:
  // .cmd.DayCamGlassHeater.GetMeteo get_meteo = 5;
  bool has_get_meteo() const;
  private:
  bool _internal_has_get_meteo() const;

  public:
  void clear_get_meteo() ;
  const ::cmd::DayCamGlassHeater::GetMeteo& get_meteo() const;
  PROTOBUF_NODISCARD ::cmd::DayCamGlassHeater::GetMeteo* release_get_meteo();
  ::cmd::DayCamGlassHeater::GetMeteo* mutable_get_meteo();
  void set_allocated_get_meteo(::cmd::DayCamGlassHeater::GetMeteo* value);
  void unsafe_arena_set_allocated_get_meteo(::cmd::DayCamGlassHeater::GetMeteo* value);
  ::cmd::DayCamGlassHeater::GetMeteo* unsafe_arena_release_get_meteo();

  private:
  const ::cmd::DayCamGlassHeater::GetMeteo& _internal_get_meteo() const;
  ::cmd::DayCamGlassHeater::GetMeteo* _internal_mutable_get_meteo();

  public:
  void clear_cmd();
  CmdCase cmd_case() const;
  // @@protoc_insertion_point(class_scope:cmd.DayCamGlassHeater.Root)
 private:
  class _Internal;
  void set_has_start();
  void set_has_stop();
  void set_has_turn_on();
  void set_has_turn_off();
  void set_has_get_meteo();
  inline bool has_cmd() const;
  inline void clear_has_cmd();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 5, 5,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Root& from_msg);
    union CmdUnion {
      constexpr CmdUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::cmd::DayCamGlassHeater::Start* start_;
      ::cmd::DayCamGlassHeater::Stop* stop_;
      ::cmd::DayCamGlassHeater::TurnOn* turn_on_;
      ::cmd::DayCamGlassHeater::TurnOff* turn_off_;
      ::cmd::DayCamGlassHeater::GetMeteo* get_meteo_;
    } cmd_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_jon_5fshared_5fcmd_5fday_5fcam_5fglass_5fheater_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Root

// .cmd.DayCamGlassHeater.Start start = 1;
inline bool Root::has_start() const {
  return cmd_case() == kStart;
}
inline bool Root::_internal_has_start() const {
  return cmd_case() == kStart;
}
inline void Root::set_has_start() {
  _impl_._oneof_case_[0] = kStart;
}
inline void Root::clear_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kStart) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.start_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.start_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamGlassHeater::Start* Root::release_start() {
  // @@protoc_insertion_point(field_release:cmd.DayCamGlassHeater.Root.start)
  if (cmd_case() == kStart) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.start_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamGlassHeater::Start& Root::_internal_start() const {
  return cmd_case() == kStart ? *_impl_.cmd_.start_ : reinterpret_cast<::cmd::DayCamGlassHeater::Start&>(::cmd::DayCamGlassHeater::_Start_default_instance_);
}
inline const ::cmd::DayCamGlassHeater::Start& Root::start() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamGlassHeater.Root.start)
  return _internal_start();
}
inline ::cmd::DayCamGlassHeater::Start* Root::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamGlassHeater.Root.start)
  if (cmd_case() == kStart) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.start_;
    _impl_.cmd_.start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_start(::cmd::DayCamGlassHeater::Start* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_start();
    _impl_.cmd_.start_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamGlassHeater.Root.start)
}
inline ::cmd::DayCamGlassHeater::Start* Root::_internal_mutable_start() {
  if (cmd_case() != kStart) {
    clear_cmd();
    set_has_start();
    _impl_.cmd_.start_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamGlassHeater::Start>(GetArena());
  }
  return _impl_.cmd_.start_;
}
inline ::cmd::DayCamGlassHeater::Start* Root::mutable_start() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamGlassHeater::Start* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamGlassHeater.Root.start)
  return _msg;
}

// .cmd.DayCamGlassHeater.Stop stop = 2;
inline bool Root::has_stop() const {
  return cmd_case() == kStop;
}
inline bool Root::_internal_has_stop() const {
  return cmd_case() == kStop;
}
inline void Root::set_has_stop() {
  _impl_._oneof_case_[0] = kStop;
}
inline void Root::clear_stop() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kStop) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.stop_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.stop_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamGlassHeater::Stop* Root::release_stop() {
  // @@protoc_insertion_point(field_release:cmd.DayCamGlassHeater.Root.stop)
  if (cmd_case() == kStop) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.stop_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.stop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamGlassHeater::Stop& Root::_internal_stop() const {
  return cmd_case() == kStop ? *_impl_.cmd_.stop_ : reinterpret_cast<::cmd::DayCamGlassHeater::Stop&>(::cmd::DayCamGlassHeater::_Stop_default_instance_);
}
inline const ::cmd::DayCamGlassHeater::Stop& Root::stop() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamGlassHeater.Root.stop)
  return _internal_stop();
}
inline ::cmd::DayCamGlassHeater::Stop* Root::unsafe_arena_release_stop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamGlassHeater.Root.stop)
  if (cmd_case() == kStop) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.stop_;
    _impl_.cmd_.stop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_stop(::cmd::DayCamGlassHeater::Stop* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_stop();
    _impl_.cmd_.stop_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamGlassHeater.Root.stop)
}
inline ::cmd::DayCamGlassHeater::Stop* Root::_internal_mutable_stop() {
  if (cmd_case() != kStop) {
    clear_cmd();
    set_has_stop();
    _impl_.cmd_.stop_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamGlassHeater::Stop>(GetArena());
  }
  return _impl_.cmd_.stop_;
}
inline ::cmd::DayCamGlassHeater::Stop* Root::mutable_stop() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamGlassHeater::Stop* _msg = _internal_mutable_stop();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamGlassHeater.Root.stop)
  return _msg;
}

// .cmd.DayCamGlassHeater.TurnOn turn_on = 3;
inline bool Root::has_turn_on() const {
  return cmd_case() == kTurnOn;
}
inline bool Root::_internal_has_turn_on() const {
  return cmd_case() == kTurnOn;
}
inline void Root::set_has_turn_on() {
  _impl_._oneof_case_[0] = kTurnOn;
}
inline void Root::clear_turn_on() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kTurnOn) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.turn_on_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.turn_on_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamGlassHeater::TurnOn* Root::release_turn_on() {
  // @@protoc_insertion_point(field_release:cmd.DayCamGlassHeater.Root.turn_on)
  if (cmd_case() == kTurnOn) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.turn_on_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.turn_on_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamGlassHeater::TurnOn& Root::_internal_turn_on() const {
  return cmd_case() == kTurnOn ? *_impl_.cmd_.turn_on_ : reinterpret_cast<::cmd::DayCamGlassHeater::TurnOn&>(::cmd::DayCamGlassHeater::_TurnOn_default_instance_);
}
inline const ::cmd::DayCamGlassHeater::TurnOn& Root::turn_on() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamGlassHeater.Root.turn_on)
  return _internal_turn_on();
}
inline ::cmd::DayCamGlassHeater::TurnOn* Root::unsafe_arena_release_turn_on() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamGlassHeater.Root.turn_on)
  if (cmd_case() == kTurnOn) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.turn_on_;
    _impl_.cmd_.turn_on_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_turn_on(::cmd::DayCamGlassHeater::TurnOn* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_turn_on();
    _impl_.cmd_.turn_on_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamGlassHeater.Root.turn_on)
}
inline ::cmd::DayCamGlassHeater::TurnOn* Root::_internal_mutable_turn_on() {
  if (cmd_case() != kTurnOn) {
    clear_cmd();
    set_has_turn_on();
    _impl_.cmd_.turn_on_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamGlassHeater::TurnOn>(GetArena());
  }
  return _impl_.cmd_.turn_on_;
}
inline ::cmd::DayCamGlassHeater::TurnOn* Root::mutable_turn_on() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamGlassHeater::TurnOn* _msg = _internal_mutable_turn_on();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamGlassHeater.Root.turn_on)
  return _msg;
}

// .cmd.DayCamGlassHeater.TurnOff turn_off = 4;
inline bool Root::has_turn_off() const {
  return cmd_case() == kTurnOff;
}
inline bool Root::_internal_has_turn_off() const {
  return cmd_case() == kTurnOff;
}
inline void Root::set_has_turn_off() {
  _impl_._oneof_case_[0] = kTurnOff;
}
inline void Root::clear_turn_off() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kTurnOff) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.turn_off_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.turn_off_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamGlassHeater::TurnOff* Root::release_turn_off() {
  // @@protoc_insertion_point(field_release:cmd.DayCamGlassHeater.Root.turn_off)
  if (cmd_case() == kTurnOff) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.turn_off_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.turn_off_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamGlassHeater::TurnOff& Root::_internal_turn_off() const {
  return cmd_case() == kTurnOff ? *_impl_.cmd_.turn_off_ : reinterpret_cast<::cmd::DayCamGlassHeater::TurnOff&>(::cmd::DayCamGlassHeater::_TurnOff_default_instance_);
}
inline const ::cmd::DayCamGlassHeater::TurnOff& Root::turn_off() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamGlassHeater.Root.turn_off)
  return _internal_turn_off();
}
inline ::cmd::DayCamGlassHeater::TurnOff* Root::unsafe_arena_release_turn_off() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamGlassHeater.Root.turn_off)
  if (cmd_case() == kTurnOff) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.turn_off_;
    _impl_.cmd_.turn_off_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_turn_off(::cmd::DayCamGlassHeater::TurnOff* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_turn_off();
    _impl_.cmd_.turn_off_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamGlassHeater.Root.turn_off)
}
inline ::cmd::DayCamGlassHeater::TurnOff* Root::_internal_mutable_turn_off() {
  if (cmd_case() != kTurnOff) {
    clear_cmd();
    set_has_turn_off();
    _impl_.cmd_.turn_off_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamGlassHeater::TurnOff>(GetArena());
  }
  return _impl_.cmd_.turn_off_;
}
inline ::cmd::DayCamGlassHeater::TurnOff* Root::mutable_turn_off() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamGlassHeater::TurnOff* _msg = _internal_mutable_turn_off();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamGlassHeater.Root.turn_off)
  return _msg;
}

// .cmd.DayCamGlassHeater.GetMeteo get_meteo = 5;
inline bool Root::has_get_meteo() const {
  return cmd_case() == kGetMeteo;
}
inline bool Root::_internal_has_get_meteo() const {
  return cmd_case() == kGetMeteo;
}
inline void Root::set_has_get_meteo() {
  _impl_._oneof_case_[0] = kGetMeteo;
}
inline void Root::clear_get_meteo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (cmd_case() == kGetMeteo) {
    if (GetArena() == nullptr) {
      delete _impl_.cmd_.get_meteo_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.cmd_.get_meteo_);
    }
    clear_has_cmd();
  }
}
inline ::cmd::DayCamGlassHeater::GetMeteo* Root::release_get_meteo() {
  // @@protoc_insertion_point(field_release:cmd.DayCamGlassHeater.Root.get_meteo)
  if (cmd_case() == kGetMeteo) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.get_meteo_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.get_meteo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cmd::DayCamGlassHeater::GetMeteo& Root::_internal_get_meteo() const {
  return cmd_case() == kGetMeteo ? *_impl_.cmd_.get_meteo_ : reinterpret_cast<::cmd::DayCamGlassHeater::GetMeteo&>(::cmd::DayCamGlassHeater::_GetMeteo_default_instance_);
}
inline const ::cmd::DayCamGlassHeater::GetMeteo& Root::get_meteo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cmd.DayCamGlassHeater.Root.get_meteo)
  return _internal_get_meteo();
}
inline ::cmd::DayCamGlassHeater::GetMeteo* Root::unsafe_arena_release_get_meteo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cmd.DayCamGlassHeater.Root.get_meteo)
  if (cmd_case() == kGetMeteo) {
    clear_has_cmd();
    auto* temp = _impl_.cmd_.get_meteo_;
    _impl_.cmd_.get_meteo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Root::unsafe_arena_set_allocated_get_meteo(::cmd::DayCamGlassHeater::GetMeteo* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_cmd();
  if (value) {
    set_has_get_meteo();
    _impl_.cmd_.get_meteo_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cmd.DayCamGlassHeater.Root.get_meteo)
}
inline ::cmd::DayCamGlassHeater::GetMeteo* Root::_internal_mutable_get_meteo() {
  if (cmd_case() != kGetMeteo) {
    clear_cmd();
    set_has_get_meteo();
    _impl_.cmd_.get_meteo_ =
        ::google::protobuf::Message::DefaultConstruct<::cmd::DayCamGlassHeater::GetMeteo>(GetArena());
  }
  return _impl_.cmd_.get_meteo_;
}
inline ::cmd::DayCamGlassHeater::GetMeteo* Root::mutable_get_meteo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::cmd::DayCamGlassHeater::GetMeteo* _msg = _internal_mutable_get_meteo();
  // @@protoc_insertion_point(field_mutable:cmd.DayCamGlassHeater.Root.get_meteo)
  return _msg;
}

inline bool Root::has_cmd() const {
  return cmd_case() != CMD_NOT_SET;
}
inline void Root::clear_has_cmd() {
  _impl_._oneof_case_[0] = CMD_NOT_SET;
}
inline Root::CmdCase Root::cmd_case() const {
  return Root::CmdCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Start

// -------------------------------------------------------------------

// Stop

// -------------------------------------------------------------------

// TurnOn

// -------------------------------------------------------------------

// TurnOff

// -------------------------------------------------------------------

// GetMeteo

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace DayCamGlassHeater
}  // namespace cmd


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // jon_5fshared_5fcmd_5fday_5fcam_5fglass_5fheater_2eproto_2epb_2eh
