// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: jon_shared_data_system.proto
// Protobuf C++ Version: 5.29.2

#include "jon_shared_data_system.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace ser {

inline constexpr JonGuiDataSystem::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : cpu_temperature_{0},
        gpu_temperature_{0},
        gpu_load_{0},
        cpu_load_{0},
        power_consumption_{0},
        loc_{static_cast< ::ser::JonGuiDataSystemLocalizations >(0)},
        cur_video_rec_dir_year_{0},
        cur_video_rec_dir_month_{0},
        cur_video_rec_dir_day_{0},
        cur_video_rec_dir_hour_{0},
        cur_video_rec_dir_minute_{0},
        cur_video_rec_dir_second_{0},
        rec_enabled_{false},
        important_rec_enabled_{false},
        low_disk_space_{false},
        no_disk_space_{false},
        disk_space_{0},
        tracking_{false},
        vampire_mode_{false},
        stabilization_mode_{false},
        geodesic_mode_{false},
        cv_dumping_{false},
        recognition_mode_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR JonGuiDataSystem::JonGuiDataSystem(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct JonGuiDataSystemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JonGuiDataSystemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~JonGuiDataSystemDefaultTypeInternal() {}
  union {
    JonGuiDataSystem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JonGuiDataSystemDefaultTypeInternal _JonGuiDataSystem_default_instance_;
}  // namespace ser
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_jon_5fshared_5fdata_5fsystem_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_jon_5fshared_5fdata_5fsystem_2eproto = nullptr;
const ::uint32_t
    TableStruct_jon_5fshared_5fdata_5fsystem_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.cpu_temperature_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.gpu_temperature_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.gpu_load_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.cpu_load_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.power_consumption_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.loc_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.cur_video_rec_dir_year_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.cur_video_rec_dir_month_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.cur_video_rec_dir_day_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.cur_video_rec_dir_hour_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.cur_video_rec_dir_minute_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.cur_video_rec_dir_second_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.rec_enabled_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.important_rec_enabled_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.low_disk_space_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.no_disk_space_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.disk_space_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.tracking_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.vampire_mode_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.stabilization_mode_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.geodesic_mode_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.cv_dumping_),
        PROTOBUF_FIELD_OFFSET(::ser::JonGuiDataSystem, _impl_.recognition_mode_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::ser::JonGuiDataSystem)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::ser::_JonGuiDataSystem_default_instance_._instance,
};
const char descriptor_table_protodef_jon_5fshared_5fdata_5fsystem_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\034jon_shared_data_system.proto\022\003ser\032\033jon"
    "_shared_data_types.proto\"\370\004\n\020JonGuiDataS"
    "ystem\022\027\n\017cpu_temperature\030\001 \001(\001\022\027\n\017gpu_te"
    "mperature\030\002 \001(\001\022\020\n\010gpu_load\030\003 \001(\001\022\020\n\010cpu"
    "_load\030\004 \001(\001\022\031\n\021power_consumption\030\005 \001(\001\022/"
    "\n\003loc\030\006 \001(\0162\".ser.JonGuiDataSystemLocali"
    "zations\022\036\n\026cur_video_rec_dir_year\030\007 \001(\005\022"
    "\037\n\027cur_video_rec_dir_month\030\010 \001(\005\022\035\n\025cur_"
    "video_rec_dir_day\030\t \001(\005\022\036\n\026cur_video_rec"
    "_dir_hour\030\n \001(\005\022 \n\030cur_video_rec_dir_min"
    "ute\030\013 \001(\005\022 \n\030cur_video_rec_dir_second\030\014 "
    "\001(\005\022\023\n\013rec_enabled\030\r \001(\010\022\035\n\025important_re"
    "c_enabled\030\016 \001(\010\022\026\n\016low_disk_space\030\017 \001(\010\022"
    "\025\n\rno_disk_space\030\020 \001(\010\022\022\n\ndisk_space\030\021 \001"
    "(\005\022\020\n\010tracking\030\022 \001(\010\022\024\n\014vampire_mode\030\023 \001"
    "(\010\022\032\n\022stabilization_mode\030\024 \001(\010\022\025\n\rgeodes"
    "ic_mode\030\025 \001(\010\022\022\n\ncv_dumping\030\026 \001(\010\022\030\n\020rec"
    "ognition_mode\030\027 \001(\010BNZLgit-codecommit.eu"
    "-central-1.amazonaws.com/v1/repos/jettis"
    "on/jonp/data/systemb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_jon_5fshared_5fdata_5fsystem_2eproto_deps[1] =
    {
        &::descriptor_table_jon_5fshared_5fdata_5ftypes_2eproto,
};
static ::absl::once_flag descriptor_table_jon_5fshared_5fdata_5fsystem_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_jon_5fshared_5fdata_5fsystem_2eproto = {
    false,
    false,
    787,
    descriptor_table_protodef_jon_5fshared_5fdata_5fsystem_2eproto,
    "jon_shared_data_system.proto",
    &descriptor_table_jon_5fshared_5fdata_5fsystem_2eproto_once,
    descriptor_table_jon_5fshared_5fdata_5fsystem_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_jon_5fshared_5fdata_5fsystem_2eproto::offsets,
    file_level_enum_descriptors_jon_5fshared_5fdata_5fsystem_2eproto,
    file_level_service_descriptors_jon_5fshared_5fdata_5fsystem_2eproto,
};
namespace ser {
// ===================================================================

class JonGuiDataSystem::_Internal {
 public:
};

JonGuiDataSystem::JonGuiDataSystem(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ser.JonGuiDataSystem)
}
JonGuiDataSystem::JonGuiDataSystem(
    ::google::protobuf::Arena* arena, const JonGuiDataSystem& from)
    : JonGuiDataSystem(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE JonGuiDataSystem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void JonGuiDataSystem::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, cpu_temperature_),
           0,
           offsetof(Impl_, recognition_mode_) -
               offsetof(Impl_, cpu_temperature_) +
               sizeof(Impl_::recognition_mode_));
}
JonGuiDataSystem::~JonGuiDataSystem() {
  // @@protoc_insertion_point(destructor:ser.JonGuiDataSystem)
  SharedDtor(*this);
}
inline void JonGuiDataSystem::SharedDtor(MessageLite& self) {
  JonGuiDataSystem& this_ = static_cast<JonGuiDataSystem&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* JonGuiDataSystem::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) JonGuiDataSystem(arena);
}
constexpr auto JonGuiDataSystem::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(JonGuiDataSystem),
                                            alignof(JonGuiDataSystem));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull JonGuiDataSystem::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_JonGuiDataSystem_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &JonGuiDataSystem::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<JonGuiDataSystem>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &JonGuiDataSystem::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<JonGuiDataSystem>(), &JonGuiDataSystem::ByteSizeLong,
            &JonGuiDataSystem::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_._cached_size_),
        false,
    },
    &JonGuiDataSystem::kDescriptorMethods,
    &descriptor_table_jon_5fshared_5fdata_5fsystem_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* JonGuiDataSystem::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 23, 0, 0, 2> JonGuiDataSystem::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    23, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4286578688,  // skipmap
    offsetof(decltype(_table_), field_entries),
    23,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ser::JonGuiDataSystem>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double cpu_temperature = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cpu_temperature_)}},
    // double gpu_temperature = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.gpu_temperature_)}},
    // double gpu_load = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.gpu_load_)}},
    // double cpu_load = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cpu_load_)}},
    // double power_consumption = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.power_consumption_)}},
    // .ser.JonGuiDataSystemLocalizations loc = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataSystem, _impl_.loc_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.loc_)}},
    // int32 cur_video_rec_dir_year = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataSystem, _impl_.cur_video_rec_dir_year_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cur_video_rec_dir_year_)}},
    // int32 cur_video_rec_dir_month = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataSystem, _impl_.cur_video_rec_dir_month_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cur_video_rec_dir_month_)}},
    // int32 cur_video_rec_dir_day = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataSystem, _impl_.cur_video_rec_dir_day_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cur_video_rec_dir_day_)}},
    // int32 cur_video_rec_dir_hour = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataSystem, _impl_.cur_video_rec_dir_hour_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cur_video_rec_dir_hour_)}},
    // int32 cur_video_rec_dir_minute = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataSystem, _impl_.cur_video_rec_dir_minute_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cur_video_rec_dir_minute_)}},
    // int32 cur_video_rec_dir_second = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(JonGuiDataSystem, _impl_.cur_video_rec_dir_second_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cur_video_rec_dir_second_)}},
    // bool rec_enabled = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(JonGuiDataSystem, _impl_.rec_enabled_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.rec_enabled_)}},
    // bool important_rec_enabled = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(JonGuiDataSystem, _impl_.important_rec_enabled_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.important_rec_enabled_)}},
    // bool low_disk_space = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(JonGuiDataSystem, _impl_.low_disk_space_), 63>(),
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.low_disk_space_)}},
    // bool no_disk_space = 16;
    {::_pbi::TcParser::FastV8S2,
     {384, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.no_disk_space_)}},
    // int32 disk_space = 17;
    {::_pbi::TcParser::FastV32S2,
     {392, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.disk_space_)}},
    // bool tracking = 18;
    {::_pbi::TcParser::FastV8S2,
     {400, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.tracking_)}},
    // bool vampire_mode = 19;
    {::_pbi::TcParser::FastV8S2,
     {408, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.vampire_mode_)}},
    // bool stabilization_mode = 20;
    {::_pbi::TcParser::FastV8S2,
     {416, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.stabilization_mode_)}},
    // bool geodesic_mode = 21;
    {::_pbi::TcParser::FastV8S2,
     {424, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.geodesic_mode_)}},
    // bool cv_dumping = 22;
    {::_pbi::TcParser::FastV8S2,
     {432, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cv_dumping_)}},
    // bool recognition_mode = 23;
    {::_pbi::TcParser::FastV8S2,
     {440, 63, 0, PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.recognition_mode_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // double cpu_temperature = 1;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cpu_temperature_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double gpu_temperature = 2;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.gpu_temperature_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double gpu_load = 3;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.gpu_load_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double cpu_load = 4;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cpu_load_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double power_consumption = 5;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.power_consumption_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // .ser.JonGuiDataSystemLocalizations loc = 6;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.loc_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 cur_video_rec_dir_year = 7;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cur_video_rec_dir_year_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 cur_video_rec_dir_month = 8;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cur_video_rec_dir_month_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 cur_video_rec_dir_day = 9;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cur_video_rec_dir_day_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 cur_video_rec_dir_hour = 10;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cur_video_rec_dir_hour_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 cur_video_rec_dir_minute = 11;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cur_video_rec_dir_minute_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 cur_video_rec_dir_second = 12;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cur_video_rec_dir_second_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool rec_enabled = 13;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.rec_enabled_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool important_rec_enabled = 14;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.important_rec_enabled_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool low_disk_space = 15;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.low_disk_space_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool no_disk_space = 16;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.no_disk_space_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 disk_space = 17;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.disk_space_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool tracking = 18;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.tracking_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool vampire_mode = 19;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.vampire_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool stabilization_mode = 20;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.stabilization_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool geodesic_mode = 21;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.geodesic_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool cv_dumping = 22;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cv_dumping_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool recognition_mode = 23;
    {PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.recognition_mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void JonGuiDataSystem::Clear() {
// @@protoc_insertion_point(message_clear_start:ser.JonGuiDataSystem)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.cpu_temperature_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.recognition_mode_) -
      reinterpret_cast<char*>(&_impl_.cpu_temperature_)) + sizeof(_impl_.recognition_mode_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* JonGuiDataSystem::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const JonGuiDataSystem& this_ = static_cast<const JonGuiDataSystem&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* JonGuiDataSystem::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const JonGuiDataSystem& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:ser.JonGuiDataSystem)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // double cpu_temperature = 1;
          if (::absl::bit_cast<::uint64_t>(this_._internal_cpu_temperature()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_cpu_temperature(), target);
          }

          // double gpu_temperature = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_gpu_temperature()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_gpu_temperature(), target);
          }

          // double gpu_load = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_gpu_load()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_gpu_load(), target);
          }

          // double cpu_load = 4;
          if (::absl::bit_cast<::uint64_t>(this_._internal_cpu_load()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                4, this_._internal_cpu_load(), target);
          }

          // double power_consumption = 5;
          if (::absl::bit_cast<::uint64_t>(this_._internal_power_consumption()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_power_consumption(), target);
          }

          // .ser.JonGuiDataSystemLocalizations loc = 6;
          if (this_._internal_loc() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                6, this_._internal_loc(), target);
          }

          // int32 cur_video_rec_dir_year = 7;
          if (this_._internal_cur_video_rec_dir_year() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_cur_video_rec_dir_year(), target);
          }

          // int32 cur_video_rec_dir_month = 8;
          if (this_._internal_cur_video_rec_dir_month() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<8>(
                    stream, this_._internal_cur_video_rec_dir_month(), target);
          }

          // int32 cur_video_rec_dir_day = 9;
          if (this_._internal_cur_video_rec_dir_day() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<9>(
                    stream, this_._internal_cur_video_rec_dir_day(), target);
          }

          // int32 cur_video_rec_dir_hour = 10;
          if (this_._internal_cur_video_rec_dir_hour() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<10>(
                    stream, this_._internal_cur_video_rec_dir_hour(), target);
          }

          // int32 cur_video_rec_dir_minute = 11;
          if (this_._internal_cur_video_rec_dir_minute() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<11>(
                    stream, this_._internal_cur_video_rec_dir_minute(), target);
          }

          // int32 cur_video_rec_dir_second = 12;
          if (this_._internal_cur_video_rec_dir_second() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<12>(
                    stream, this_._internal_cur_video_rec_dir_second(), target);
          }

          // bool rec_enabled = 13;
          if (this_._internal_rec_enabled() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                13, this_._internal_rec_enabled(), target);
          }

          // bool important_rec_enabled = 14;
          if (this_._internal_important_rec_enabled() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                14, this_._internal_important_rec_enabled(), target);
          }

          // bool low_disk_space = 15;
          if (this_._internal_low_disk_space() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                15, this_._internal_low_disk_space(), target);
          }

          // bool no_disk_space = 16;
          if (this_._internal_no_disk_space() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                16, this_._internal_no_disk_space(), target);
          }

          // int32 disk_space = 17;
          if (this_._internal_disk_space() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                17, this_._internal_disk_space(), target);
          }

          // bool tracking = 18;
          if (this_._internal_tracking() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                18, this_._internal_tracking(), target);
          }

          // bool vampire_mode = 19;
          if (this_._internal_vampire_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                19, this_._internal_vampire_mode(), target);
          }

          // bool stabilization_mode = 20;
          if (this_._internal_stabilization_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                20, this_._internal_stabilization_mode(), target);
          }

          // bool geodesic_mode = 21;
          if (this_._internal_geodesic_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                21, this_._internal_geodesic_mode(), target);
          }

          // bool cv_dumping = 22;
          if (this_._internal_cv_dumping() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                22, this_._internal_cv_dumping(), target);
          }

          // bool recognition_mode = 23;
          if (this_._internal_recognition_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                23, this_._internal_recognition_mode(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:ser.JonGuiDataSystem)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t JonGuiDataSystem::ByteSizeLong(const MessageLite& base) {
          const JonGuiDataSystem& this_ = static_cast<const JonGuiDataSystem&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t JonGuiDataSystem::ByteSizeLong() const {
          const JonGuiDataSystem& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:ser.JonGuiDataSystem)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // double cpu_temperature = 1;
            if (::absl::bit_cast<::uint64_t>(this_._internal_cpu_temperature()) != 0) {
              total_size += 9;
            }
            // double gpu_temperature = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_gpu_temperature()) != 0) {
              total_size += 9;
            }
            // double gpu_load = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_gpu_load()) != 0) {
              total_size += 9;
            }
            // double cpu_load = 4;
            if (::absl::bit_cast<::uint64_t>(this_._internal_cpu_load()) != 0) {
              total_size += 9;
            }
            // double power_consumption = 5;
            if (::absl::bit_cast<::uint64_t>(this_._internal_power_consumption()) != 0) {
              total_size += 9;
            }
            // .ser.JonGuiDataSystemLocalizations loc = 6;
            if (this_._internal_loc() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_loc());
            }
            // int32 cur_video_rec_dir_year = 7;
            if (this_._internal_cur_video_rec_dir_year() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_cur_video_rec_dir_year());
            }
            // int32 cur_video_rec_dir_month = 8;
            if (this_._internal_cur_video_rec_dir_month() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_cur_video_rec_dir_month());
            }
            // int32 cur_video_rec_dir_day = 9;
            if (this_._internal_cur_video_rec_dir_day() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_cur_video_rec_dir_day());
            }
            // int32 cur_video_rec_dir_hour = 10;
            if (this_._internal_cur_video_rec_dir_hour() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_cur_video_rec_dir_hour());
            }
            // int32 cur_video_rec_dir_minute = 11;
            if (this_._internal_cur_video_rec_dir_minute() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_cur_video_rec_dir_minute());
            }
            // int32 cur_video_rec_dir_second = 12;
            if (this_._internal_cur_video_rec_dir_second() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_cur_video_rec_dir_second());
            }
            // bool rec_enabled = 13;
            if (this_._internal_rec_enabled() != 0) {
              total_size += 2;
            }
            // bool important_rec_enabled = 14;
            if (this_._internal_important_rec_enabled() != 0) {
              total_size += 2;
            }
            // bool low_disk_space = 15;
            if (this_._internal_low_disk_space() != 0) {
              total_size += 2;
            }
            // bool no_disk_space = 16;
            if (this_._internal_no_disk_space() != 0) {
              total_size += 3;
            }
            // int32 disk_space = 17;
            if (this_._internal_disk_space() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_disk_space());
            }
            // bool tracking = 18;
            if (this_._internal_tracking() != 0) {
              total_size += 3;
            }
            // bool vampire_mode = 19;
            if (this_._internal_vampire_mode() != 0) {
              total_size += 3;
            }
            // bool stabilization_mode = 20;
            if (this_._internal_stabilization_mode() != 0) {
              total_size += 3;
            }
            // bool geodesic_mode = 21;
            if (this_._internal_geodesic_mode() != 0) {
              total_size += 3;
            }
            // bool cv_dumping = 22;
            if (this_._internal_cv_dumping() != 0) {
              total_size += 3;
            }
            // bool recognition_mode = 23;
            if (this_._internal_recognition_mode() != 0) {
              total_size += 3;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void JonGuiDataSystem::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<JonGuiDataSystem*>(&to_msg);
  auto& from = static_cast<const JonGuiDataSystem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ser.JonGuiDataSystem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint64_t>(from._internal_cpu_temperature()) != 0) {
    _this->_impl_.cpu_temperature_ = from._impl_.cpu_temperature_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_gpu_temperature()) != 0) {
    _this->_impl_.gpu_temperature_ = from._impl_.gpu_temperature_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_gpu_load()) != 0) {
    _this->_impl_.gpu_load_ = from._impl_.gpu_load_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_cpu_load()) != 0) {
    _this->_impl_.cpu_load_ = from._impl_.cpu_load_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_power_consumption()) != 0) {
    _this->_impl_.power_consumption_ = from._impl_.power_consumption_;
  }
  if (from._internal_loc() != 0) {
    _this->_impl_.loc_ = from._impl_.loc_;
  }
  if (from._internal_cur_video_rec_dir_year() != 0) {
    _this->_impl_.cur_video_rec_dir_year_ = from._impl_.cur_video_rec_dir_year_;
  }
  if (from._internal_cur_video_rec_dir_month() != 0) {
    _this->_impl_.cur_video_rec_dir_month_ = from._impl_.cur_video_rec_dir_month_;
  }
  if (from._internal_cur_video_rec_dir_day() != 0) {
    _this->_impl_.cur_video_rec_dir_day_ = from._impl_.cur_video_rec_dir_day_;
  }
  if (from._internal_cur_video_rec_dir_hour() != 0) {
    _this->_impl_.cur_video_rec_dir_hour_ = from._impl_.cur_video_rec_dir_hour_;
  }
  if (from._internal_cur_video_rec_dir_minute() != 0) {
    _this->_impl_.cur_video_rec_dir_minute_ = from._impl_.cur_video_rec_dir_minute_;
  }
  if (from._internal_cur_video_rec_dir_second() != 0) {
    _this->_impl_.cur_video_rec_dir_second_ = from._impl_.cur_video_rec_dir_second_;
  }
  if (from._internal_rec_enabled() != 0) {
    _this->_impl_.rec_enabled_ = from._impl_.rec_enabled_;
  }
  if (from._internal_important_rec_enabled() != 0) {
    _this->_impl_.important_rec_enabled_ = from._impl_.important_rec_enabled_;
  }
  if (from._internal_low_disk_space() != 0) {
    _this->_impl_.low_disk_space_ = from._impl_.low_disk_space_;
  }
  if (from._internal_no_disk_space() != 0) {
    _this->_impl_.no_disk_space_ = from._impl_.no_disk_space_;
  }
  if (from._internal_disk_space() != 0) {
    _this->_impl_.disk_space_ = from._impl_.disk_space_;
  }
  if (from._internal_tracking() != 0) {
    _this->_impl_.tracking_ = from._impl_.tracking_;
  }
  if (from._internal_vampire_mode() != 0) {
    _this->_impl_.vampire_mode_ = from._impl_.vampire_mode_;
  }
  if (from._internal_stabilization_mode() != 0) {
    _this->_impl_.stabilization_mode_ = from._impl_.stabilization_mode_;
  }
  if (from._internal_geodesic_mode() != 0) {
    _this->_impl_.geodesic_mode_ = from._impl_.geodesic_mode_;
  }
  if (from._internal_cv_dumping() != 0) {
    _this->_impl_.cv_dumping_ = from._impl_.cv_dumping_;
  }
  if (from._internal_recognition_mode() != 0) {
    _this->_impl_.recognition_mode_ = from._impl_.recognition_mode_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void JonGuiDataSystem::CopyFrom(const JonGuiDataSystem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ser.JonGuiDataSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void JonGuiDataSystem::InternalSwap(JonGuiDataSystem* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.recognition_mode_)
      + sizeof(JonGuiDataSystem::_impl_.recognition_mode_)
      - PROTOBUF_FIELD_OFFSET(JonGuiDataSystem, _impl_.cpu_temperature_)>(
          reinterpret_cast<char*>(&_impl_.cpu_temperature_),
          reinterpret_cast<char*>(&other->_impl_.cpu_temperature_));
}

::google::protobuf::Metadata JonGuiDataSystem::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace ser
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_jon_5fshared_5fdata_5fsystem_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
